openapi: "3.1.0"

info:

  title: "Bathysphere API"
  version: "2.0.0"
  description: |

    Bathysphere API is a store and registry for public and proprietary geospatial data. The system is designed to support marine research in the North Atlantic, but can be configured or extended for many applications.

    We ingest sensor and simulation data and automatically parse them into discoverable databases. Representing complex relationships between heterogenous data is simplified by applying a graph-native framework, backed by our [Neo4j](https://neo4j.com/) cluster.
    
    This approach applies to many flexible, high-level cases, from NASA managing their [lessons-learned](https://neo4j.com/blog/nasa-lesson-learned-database-using-neo4j-linkurious/)
    mission database, to modeling a [virtual economy](https://www.airpair.com/neo4j/posts/modelling-game-economy-with-neo4j).

    You probably have to share data anyway. Our middleware can enhance your data science and management experience by providing representation state transfer (REST) and graph-based services for...

    * Secure organizational accounts
    * Open Geospatial Consortium (OGC) SensorThings standard
    * [SpatioTemporal Assets Catalog](https://stacspec.org/) (STAC) standard
    * Provenance tracking
    * Granular access control and auditing

    By assessing data and service availability over your whole domain, projects can allocate resources to fill coverage gaps. This supports an open marketplace asset sharing model, which may be preferable to redundant operational and capital expenses.

  contact:
    name: Oceanicsdotio LLC
    url: http://www.oceanics.io
    email: business@oceanics.io

  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

  x-logo:
    url: https://www.oceanics.io/assets/dagan.png

tags:

  - name: Account
    description: |
      If you have an e-mail address associated with an organization known to us, you can register to use the database and services. Please review security and privacy information before uploading any proprietary data.

  - name: Catalog
    description: |
      Access data through the entity catalog interface. These are your generic CRUD operations.

  - name: Topology
    description: |
      Build topological relationships and access metadata.

  - name: DataStreams
    description: Collections of time series observations with numerical methods


servers:
- url: https://graph.oceanics.io/{basePath}
  description: Production API server
  variables:
    basePath:
      default: api

paths:

  /auth:

    post:
      tags: [ Account ]
      summary: Register
      security:
        - ApiKeyAuth: []
      description: |
        Register an e-mail address to get access to development API. Accounts are for development and testing purposes only. We won't share your contact information, but we do reserve the right to analyze and profile your use of our infrastructure, as well as monitor un-encrypted traffic.

        Contact us if you are interested in a dedicated database instance, or long-term multi-tenancy hosting.

      requestBody:
        $ref: '#/components/requestBodies/Register'

      responses:
        '200':
          $ref: '#/components/responses/Message'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'

    get:
      tags: [ Account ]
      summary: Get Token
      security:
        - BasicAuth: []
      description: |
        Exchange token or email and password for a Javascript Web Token. This will allow you make API calls and use graphical interfaces for a fixed period of time. If you have previously provided a secret, it will be required here to authenticate login and hash the token.

      parameters:
        - name: secret
          in: query
          schema:
            $ref: '#/components/schemas/SecretKey'

      responses:
        '200':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/components/responses/Unauthorized'

    put:
      tags: [Account]
      summary: Manage
      security:
        - BearerAuth: []
      description: |
        Change e-mail address or password.

      requestBody:
        $ref: '#/components/requestBodies/Register'

      responses:
        '204':
          description: No content
        '400':
          $ref: '#/components/responses/BadRequest'

    delete:
      tags: [Account]
      summary: Delete
      security:
        - BearerAuth: []
      description: |
        Delete account and all connected data.

      responses:
        '204':
          description: No content
        '400':
          $ref: '#/components/responses/BadRequest'
      
  /:
  
    get:
      tags: [Catalog]
      summary: Catalog
      security:
        - BearerAuth: []
      description: |
        Get all entity types in database as collections following the SpatioTemporal Asset Catalog specification

      parameters:

        - name: asset
          in: query
          schema:
            type: string
            default: index

        - name: extension
          description: |
            Any entity can be linked topologically to any other entity, but generally
            these are grouped in functional sets by application area:
            * `sensing` implements Open Geospatial Consortium SensorThings specification (part 1),
            and has models relevant to operating and getting data from sensor networks.
            * `tasking` builds off of the SensorThings specification part 2.
            * `mesh` implements structures for spatial simulations.

          in: query
          schema:
            type: string
            enum: [sensing, mesh, tasking, admin, catalog]

      responses:
        '200':
          description: Catalog

  /{entity}:

    post:
      tags: [Catalog]
      summary: Create
      security:
        - BearerAuth: []
      description: |
        Create a new entity.
      parameters:
        - $ref: "#/components/parameters/entityClass"
      requestBody:
        $ref: '#/components/requestBodies/Entity'
      responses:
        '200':
          $ref: '#/components/responses/Entity'
        '400':
          $ref: '#/components/responses/BadRequest'

    get:
      tags: [Catalog]
      summary: Collection
      security:
        - BearerAuth: []
      description: |
        Get all entities of one type

      parameters:
        - $ref: "#/components/parameters/entityClass"

      responses:
        '200':
          $ref: '#/components/responses/EntityCollection'
        '404':
          $ref: '#/components/responses/NotFound'


  /{entity}({uuid}):

    get:
      tags: [Catalog]
      summary: Metadata
      security:
        - BearerAuth: []
      description: Get entity
      parameters:
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"
      responses:
        '200':
          $ref: '#/components/responses/Entity'
        '404':
          $ref: '#/components/responses/NotFound'

    # put:
    #   tags: [ Catalog ]
    #   summary: Update
    #   security:
    #     - BearerAuth: []
    #   description: Update entity
    #   requestBody:
    #     $ref: '#/components/requestBodies/Entity'

    #   parameters:
    #     - $ref: "#/components/parameters/entityClass"
    #     - $ref: "#/components/parameters/entityId"

    #   responses:
    #     '200':
    #       $ref: '#/components/responses/Entity'
    #     '404':
    #       $ref: '#/components/responses/NotFound'

    delete:
      tags: [ Catalog ]
      summary: Delete
      security:
        - BearerAuth: []
      description: Delete entity and orphans recursively.
      parameters:
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"

      responses:
        '204':
          description: No content
        '404':
          $ref: '#/components/responses/NotFound'

        
  /{root}({rootId})/{entity}:

    get:
      tags: [ Topology ]
      summary: Query
      security:
        - BearerAuth: []
      description: |
        Get related entities

      parameters:
        - $ref: "#/components/parameters/root"
        - $ref: "#/components/parameters/rootId"
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/label"

      responses:
        '200':
          $ref: '#/components/responses/EntityCollection'
        '400':
          $ref: '#/components/responses/BadRequest'


  /{root}({rootId})/{entity}({uuid}):

    post:
      tags: [ Topology ]
      summary: Join
      security:
        - BearerAuth: []
      description: Create a labeled relationship between entities.
      parameters:
        - $ref: "#/components/parameters/root"
        - $ref: "#/components/parameters/rootId"
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"
        - $ref: "#/components/parameters/label"

      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'

    delete:
      tags: [Topology]
      summary: Drop
      security:
        - BearerAuth: []
      description: |
        Remove a labeled relationship between entities. If no `label` is specified, remove all
        relationships between the entities.

      parameters:
        - $ref: "#/components/parameters/root"
        - $ref: "#/components/parameters/rootId"
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"
        - $ref: "#/components/parameters/label"

      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'

components:

  securitySchemes:

    BasicAuth:
      type: http
      in: header
      scheme: basic

    BearerAuth:
      type: http
      in: header
      scheme: bearer

    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY

  parameters:

    weight:
      name: weight
      in: query
      required: true
      schema:
        $ref: "#/components/schemas/Weight"

    root:
      in: path
      required: true
      name: root
      description: |
        The class name of the root or parent entity that the request object is associated with. During a `GET` request
        this will be used to collect child entities based on graph relationship. For `PUT` and `POST` requests this
        and the child entities will be linked with a labeled relationship.

      schema:
        type: string

    rootId:
      in: path
      required: true
      name: rootId
      description: |
        Unique integer identifier of the parent entity.
      schema:
        type: string

    entityClass:
      in: path
      required: true
      name: entity
      description: |
        Name of the entity model to create or fetch.

      schema:
        type: string
        enum:
          - DataStreams
          - Observations
          - HistoricalLocations
          - Locations
          - Sensors
          - Things
          - ObservedProperties
          - Tasks
          - Actuators
          - TaskingCapabilities
          - FeaturesOfInterest
          - Collections

    entityId:
      in: path
      required: true
      name: uuid
      description: |
        Unique identifier of the resource to be retrieved.
      schema:
        type: string

    label:
      in: query
      name: label
      description: |
        Should be in format `LABEL`, although this is not strictly necessary. Labeled relationships
        are used to crawl over the graph.
      schema:
        type: string

    ObjectKey:
      in: path
      name: objectKey
      required: true
      description: UUID of experiment data
      schema:
        type: string

    ThingId:
      in: path
      name: thingId
      required: true
      description: Unique identifier of the object to copy.
      schema:
        type: integer
        minimum: 0

    configId:
      in: query
      name: configId
      description: |
        A reference to a model configuration can be used instead of supplying values for `runs`, `workers`, `dt`, and
        `days`.
      schema:
        type: integer

  requestBodies:

    Asset:
      description: |
        Tell the server where to find the data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Asset'
          
    Collection:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Collection'

    CollectionUpdate:
      description: |
        Relabel or index an entity collection

      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CollectionOptions'

    Memos:
      description: Create and retrieve content data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Memos'

    Entity:
      description: |
        Entity
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/Things'
              - $ref: '#/components/schemas/Locations'
              - $ref: '#/components/schemas/HistoricalLocations'
              - $ref: '#/components/schemas/DataStreams'
              - $ref: '#/components/schemas/Observations'
              - $ref: '#/components/schemas/ObservedProperties'
              - $ref: '#/components/schemas/Sensors'
              - $ref: '#/components/schemas/FeaturesOfInterest'
              - $ref: '#/components/schemas/Collection'

    Register:
      description: |
        Request is e-mail and password, plus an optional secret key for encrypting password and data.
        Note that if you lose the secret key, you will lose access to data.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Register'
  responses:

    Asset:
      description: |
        Description of the file
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Asset'

    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            
    Collection:
      description: |
        Description of the service and data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Collection'

    Memos:
      description: Description of Memos
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Memos'

    Entity:
      description: |
        Single entity
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/Things'
              - $ref: '#/components/schemas/Locations'
              - $ref: '#/components/schemas/HistoricalLocations'
              - $ref: '#/components/schemas/DataStreams'
              - $ref: '#/components/schemas/Observations'
              - $ref: '#/components/schemas/ObservedProperties'
              - $ref: '#/components/schemas/Sensors'
              - $ref: '#/components/schemas/FeaturesOfInterest'

    EntityCollection:
      description: |
        Collection of entities

      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EntityCollection'
    Message:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
                
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    TokenResponse:
      description: Auth token
      content:
        application/json:
          schema:
            type: object
            properties:

              token:
                description: JWT Bearer token containing user ID
                type: string
                minLength: 127

              duration:
                type: integer
                description: JWT expiration interval in seconds
                default: 600
                minimum: 30
                maximum: 3600

    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Not authorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:

    Agents:
      examples:
        - name: Arthur Machen
        - name: Octavia Butler
      type: object
      additionalProperties: false
      required: [uuid, name]
      properties:
        uuid:
          type: string
          format: uuid
          description: |
            Unique integer identifier for entity.

        name:
          type:
            - "string"
            - "null"
          description: Human readable entity name for displaying data.

        description:
          type:
            - "string"
            - "null"
          description: Short but useful explanation of what the entity is.
            
    Asset:
      type: object

    CollectionOptions:
      allOf:
        - $ref: '#/components/schemas/Collection'
        - type: object
          properties:

            label:
              $ref: '#/components/schemas/EntityLabel'

            indexBy:
              type: string
              default: id
              enum:
                - id
                - location
                - ts
              description: |
                Node attribute to create an index on.

    Memos:
      type: object
      properties:
        uuid:
          type: string
        publication:
          type: string
        published:
          type: date-time
        labels:
          type: array
          items:
            type: object
            properties:
              value:
                type: string
        authors:
          type: array
          items:
            type: string
        title:
          type: string
        description:
          type: string
        volume:
          type: string
        pages:
          type: array
          items:
            type: array
            items:
              type: number
              format: integer

    EntityLabel:
      type: string
      enum:
        - Proxy
        - Buoy
        - Server
        - Metadata
        - File
        - Raw
      description: |
        Additional node labels that can be applied to entities, which have internal meaning.

    Message:
      type: object
      properties:
        message:
          type: string
          description: Status message

    Index:
      type: string
      description: Class name of entities to index.

    SecretKey:
      description: |
        Your secret key is used to encrypt traffic and private data, such as your login credentials. If you do not
        provide your own key, a default secret will be used. If you do provide a secret key, make sure to save it.
        It is not possible for us to recover data encrypted with a user secret.

      type: string

    Register:
      type: object
      properties:

        email:
          description: |
            Registration requires an e-mail that can be used to validate non-profit or educational affiliation.
          type: string

        password:
          description: |
            Password cannot be `password`, but there are no character limits otherwise.
            A compromised account will only expose your data and publicly available
            datasets. This is encrypted to prevent possible re-use across other services. Use a good random password.
          type: string
          minLength: 10
          maxLength: 128

        secret:
          $ref: '#/components/schemas/SecretKey'

    EntityCollection:
      allOf:
        - $ref: '#/components/schemas/Collection'
        - type: object
          properties:
            "@iot.count":
              type: integer
              minimum: 1
              maximum: 100
              description: Total number of records in the response
            value:
              type: array
              description: Array of response data
              items:
                oneOf:
                  - $ref: '#/components/schemas/Things'
                  - $ref: '#/components/schemas/Locations'
                  - $ref: '#/components/schemas/HistoricalLocations'
                  - $ref: '#/components/schemas/DataStreams'
                  - $ref: '#/components/schemas/Observations'
                  - $ref: '#/components/schemas/ObservedProperties'
                  - $ref: '#/components/schemas/Sensors'
                  - $ref: '#/components/schemas/FeaturesOfInterest'
                  - $ref: '#/components/schemas/Memos'
        

    EntityClass:
      type: string
      enum:
        - DataStreams
        - FeaturesOfInterest
        - Locations
        - Observations
        - ObservedProperties
        - Sensors
        - Things
        - Collections
        - Actuators
        - TaskingCapabilities
        - Tasks
        - Memos

    FeaturesOfInterest:
      examples:
        - name: Gulf of Maine Mesh
        - name: Midcoast Maine Mesh
        - name: Damariscotta River Estuary shellfish growing area
          description: Traditional growing area for oysters in Maine.
      type: object
      description: |
        Features of interest are usually Locations
      additionalProperties: false
      required: [uuid, name]
      properties:
        uuid:
          type: string
          format: uuid
          description: |
            Unique integer identifier for entity.

        name:
          type:
            - "string"
            - "null"
          description: Human readable entity name for displaying data.

        description:
          type:
            - "string"
            - "null"
          description: Short but useful explanation of what the entity is.

        encodingType:
          type: string
          description: Identifier for parsing feature data

        feature:
          type: object
          description: Feature data

        Observations@iot.navigation:
          readOnly: true
          oneOf:

            - type: array
              title: references
              items:
                type: string

            - type: array
              title: objects
              items:
                type: object

    Things:
      examples:
        - name: Landsat-7
          description: Satellite mission
        - name: Land Ocean Biogeochemical Observatory
          description: |
            Moored buoy deployment of the Sustainable Ecological Aquaculture Network
        - name: Sealab
          properties:
            home: Farm
            capacity: 6
            icon: laboratory
        - name: R/V Lloigor
          properties:
            capacity: 2
            icon: boat
            meters:
              - name: starboard aft fuel
                value: 2
                max: 20
                high: 15
                low: 10
            
              - name: port aft fuel
                value: 12
                max: 20
                high: 15
                low: 10
            
              - name: starboard forward fuel
                value: 5.5
                max: 20
                high: 15
                low: 10
            
              - name: port forward fuel
                value: 15.5
                max: 20
                high: 15
                low: 10

      type: object
      description: |
        A thing is an object of the physical or information world that is capable of of being identified
        and integrated into communication networks.
      required: [uuid, name]
      additionalProperties: false
      properties:

        uuid:
          type: string
          format: uuid
          description: |
            Unique integer identifier for entity. This usually auto-generated, but is different that the default node
            IDs within the Neo4j database, since those are not guaranteed to persist.

        name:
          type:
            - "string"
            - "null"
          description: |
            Human readable entity name for displaying data.

        description:
          type:
            - "string"
            - "null"
          description: |
            Short but useful explanation of what the entity is.

        properties:
          type: object
          description: Key-value properties

        HistoricalLocations@iot.navigation:
          readOnly: true
          oneOf:

            - type: array
              title: references
              items:
                type: string

            - type: array
              title: objects
              items:
                type: object

        Locations@iot.navigation:
          readOnly: true
          oneOf:

            - type: array
              title: references
              items:
                type: string

            - type: array
              title: objects
              items:
                type: object

        DataStreams@iot.navigation:
          readOnly: true
          oneOf:

            - type: array
              title: references
              items:
                type: string

            - type: array
              title: objects
              items:
                type: object

    LocationEncodingType:
      type: string
      enum:
        - "application/vnd.geo+json"
      default: "application/vnd.geo+json"
      description: The encoding rendered in the location response

    Locations:
      examples:
        - name: Lower Damariscotta
          encodingType: application/vnd.geo+json
          location:
            type: Point
            coordinates: [43.93354, -69.58344]
        - name: Upper Damariscotta Estuary
          encodingType: application/vnd.geo+json
          description: Buoy deployment
          location:
            type: Point
            coordinates: [ 43.998178, -69.54253, 0.0 ]
        - name: Wood Island Harbor
          encodingType: application/vnd.geo+json
          location:
            type: Point
            coordinates: [ 43.456550, -70.344432 ]
        - name: Ram Island Saco Bay
          encodingType: application/vnd.geo+json
          location:
            type: Point
            coordinates: [ 43.465934, -70.359646 ]
        - name: Upper New Meadows
          encodingType: application/vnd.geo+json
          location:
            type: Point
            coordinates: [ 43.863669, -69.8984055 ]  # Bombazine
        - name: Lower New Meadows
          encodingType: application/vnd.geo+json
          location:
            type: Point
            coordinates: [ 43.77643055, -69.89196944 ]  # Sand Cove
        - name: Bagaduce River
          encodingType: application/vnd.geo+json
          location:
            type: Point
            coordinates: [ 44.40156667, -68.7738333 ]
        - name: Machias Bay
          encodingType: application/vnd.geo+json
          location:
            type: Point
            coordinates: [ 44.618517, -67.318033 ]
        - name: Cobscook Bay
          encodingType: application/vnd.geo+json
          location:
            type: Point
            coordinates: [ 44.8968, -67.0651 ]
        - name: Western Passage
          encodingType: application/vnd.geo+json
          location:
            type: Point
            coordinates: [ 44.92017, -66.995833 ]

      type: object
      description: |
        Last known location of a thing. May be a feature of interest, unless remote sensing.
      additionalProperties: false
      required: [uuid, location, encodingType]
      properties:

        uuid:
          type: string
          format: uuid
          description: |
            Unique integer identifier for entity.

        name:
          type:
            - "string"
            - "null"
          description: Human readable entity name for displaying data.

        description:
          type:
            - "string"
            - "null"
          description: Short but useful explanation of what the entity is.

        encodingType:
          $ref: '#/components/schemas/LocationEncodingType'

        location:
          type: object
          additionalProperties: false
          properties:
            type:
              type: string
              enum: ["Point", "Polygon"]
            coordinates:
              type: array
              minLength: 2
              maxLength: 3
              items:
                type: number
                format: float

        HistoricalLocations@iot.navigation:
          readOnly: true
          oneOf:

            - type: array
              title: references
              items:
                type: string

            - type: array
              title: objects
              items:
                type: object

        Things@iot.navigation:
          readOnly: true
          oneOf:

            - type: array
              title: references
              items:
                type: string

            - type: array
              title: objects
              items:
                type: object

    HistoricalLocations:
      examples:
       - time: "2020-04-01T09:00:00Z"
         Things@iot.navigation:
          - name: [ R/V Lloigor ]
         Locations@iot.navigation:
          - name: [ Wood Island Harbor ]

      type: object
      additionalProperties: false
      required: [ uuid, time ]
      properties:
        uuid:
          type: string
          format: uuid
          description: |
            Unique integer identifier for entity.

        time:
          type: string
          format: date-time
          description: Timestamp when the location was current

        Things@iot.navigation:
          readOnly: true
          oneOf:

            - type: array
              title: references
              minItems: 1
              maxItems: 1
              items:
                type: string

            - type: array
              title: objects
              minItems: 1
              maxItems: 1
              items:
                type: object

        Locations@iot.navigation:
          readOnly: true
          oneOf:

            - type: array
              title: references
              minItems: 1
              items:
                type: string

            - type: array
              title: objects
              minItems: 1
              items:
                type: object

    Sensors:
      examples:
        - name: SeaBird Electronics CTD
          description: A common oceanographic sensing package
        - name: Chlorophyll fluorometer
          description: For measuring plankton stuff
      type: object
      additionalProperties: false
      required: [ uuid, name ]
      properties:

        uuid:
          type: string
          format: uuid
          description: |
            Unique integer identifier for entity.

        name:
          type:
            - "string"
            - "null"
          description: Human readable entity name for displaying data.

        description:
          type:
            - "string"
            - "null"
          description: Short but useful explanation of what the entity is.

        encodingType:
          type: string
          enum: [application/pdf, "http://www.opengis.net/doc/IS/SensorML/2.0"]
          default: "http://www.opengis.net/doc/IS/SensorML/2.0"

        metadata:
          type: object

        DataStreams@iot.navigation:
          readOnly: true
          oneOf:

            - type: array
              title: references
              items:
                type: string

            - type: array
              title: objects
              items:
                type: object

    DataStreams:
      examples:
        - Things@iot.navigation:
            - name: [ Land Ocean Biogeochemical Observatory ]
          Sensors@iot.navigation:
            - name: [ SeaBird Electronics CTD ]
          ObservedProperties@iot.navigation:
            - name: [ temperature ]
          name: temperature
          description: An example synthetic temperature series
        - Things@iot.navigation:
            - name: [ Land Ocean Biogeochemical Observatory ]
          ObservedProperties@iot.navigation:
            - name: [ chlorophyll ]
          name: chlorophyll
          description: Just another chlorophyll series
      type: object
      description: |
        DataStreams are collections of `Observations` from the same `Sensors`.
      additionalProperties: false
      required: [ uuid, name ]
      properties:

        uuid:
          type: string
          format: uuid
          description: |
            Unique integer identifier for entity.

        name:
          type:
            - "string"
            - "null"
          description: Human readable entity name for displaying data.

        description:
          type:
            - "string"
            - "null"
          description: Short but useful explanation of what the entity is.

        unitOfMeasurement:
          type: object
          description: |
            Unified Code for Unit of Measure

          properties:
            name:
              type: string
              description: Name for matching and displaying

            symbol:
              type:
                - "string"
                - "null"
              description: Abbreviation for the parameter

            definition:
              type:
                - "string"
                - "null"
              description: A link to a formal definition

        observationType:
          type:
            - "string"
            - "null"
          description: |
            Data model of child `Observations`. Usually a `Measurement`.
          enum:
            - "OM_CategoryObservation"
            - "OM_CountObservation"
            - "OM_Measurement"
            - "OM_Observation"
            - "OM_TruthObservation"

        observedArea:
          type: [object, "null"]
          readOnly: true
          description: |
            The bounding box that encloses all `FeaturesOfInterest` referenced by child `Observations`

        phenomenonTime:
          type: array
          description: |
            Time interval of the measured process, consisting of two ISO8601 timestamps.
          minItems: 2
          maxItems: 2
          items:
            type: string
            format: date-time

        resultTime:
          type: array
          description: |
            Time interval of receiving data, consisting of two ISO8601 timestamps. May be different than the
            measured process, due to batch uploads, latency, lack of real-time clocks in devices, etc.
          minItems: 2
          maxItems: 2
          items:
            type: string
            format: date-time

        Observations@iot.navigation:
          readOnly: true
          oneOf:

            - type: array
              title: references
              items:
                type: string

            - type: array
              title: objects
              items:
                type: object

        ObservedProperties@iot.navigation:
          readOnly: true
          oneOf:

            - type: array
              title: references
              minItems: 1
              items:
                type: string

            - type: array
              title: objects
              minItems: 1
              items:
                type: object

        Sensors@iot.navigation:
          readOnly: true
          oneOf:

            - type: array
              title: references
              minItems: 1
              items:
                type: string

            - type: array
              title: objects
              minItems: 1
              items:
                type: object

        Things@iot.navigation:
          readOnly: true
          oneOf:

            - type: array
              title: references
              minItems: 1
              items:
                type: string

            - type: array
              title: objects
              minItems: 1
              items:
                type: object


    Observations:
      examples: 
        - DataStreams@iot.navigation:
            - name: [ temperature ]
          resultTime: "2020-04-01T09:00:00Z"
          result: 10.0

        - DataStreams@iot.navigation:
            - name: [ temperature ]
          resultTime: "2018-04-01T09:45:00Z"
          result: 11.7
      type: object
      additionalProperties: false
      required: [uuid, resultTime, result]
      properties:
        uuid:
          type: string
          format: uuid
          description: |
            Unique integer identifier for entity.

        resultTime:
          type: string
          format: date-time
          description: |
            Timestamp when the `Observation` was registered by the system.

        resultQuality:
          type: string
          description: |
            Quality of the result described as a `DQ_Element` (OGC)

        validTime:
          type: array
          description: Time interval when the result is valid
          minItems: 2
          maxItems: 2
          items:
            type: string
            format: date-time

        phenomenonTime:
          type: string
          format: date-time
          description: |
            Timestamp of the acquisition of the `Observation`

        result:
          description: The result of the observation. Usually a number.
          type: number
          format: float

        parameters:
          type: object
          description: Environmental conditions during the `Observation`

        DataStreams@iot.navigation:
          readOnly: true
          oneOf:

            - type: array
              title: references
              maxItems: 1
              items:
                type: string

            - type: array
              title: objects
              maxItems: 1
              items:
                type: object

        FeaturesOfInterest@iot.navigation:
          readOnly: true
          oneOf:

            - type: array
              title: references
              maxItems: 1
              items:
                type: string

            - type: array
              title: objects
              maxItems: 1
              items:
                type: object

    Tasks:
      examples:
        - Locations@iot.navigation:
            - name: [Wharf]
          name: Do a thing
        - Locations@iot.navigation:
            - name: [Wharf]
          name: Fix me
        - Locations@iot.navigation:
            - name: [Farm]
          name: Harvest
      type: object
      additionalProperties: false
      required: [uuid, name]
      properties:
        uuid:
          type: string
          format: uuid
          description: |
            Unique integer identifier for entity.

        name:
          type:
            - "string"
            - "null"
          description: Human readable entity name for displaying data.

        description:
          type:
            - "string"
            - "null"
          description: Short but useful explanation of what the entity is.
        Locations@iot.navigation:
          readOnly: true
          oneOf:
            - type: array
              title: references or objects
              maxItems: 1
              items:
                oneOf: 
                  - type: string
                  - type: object
        TaskingCapabilities@iot.navigation:
          readOnly: true
          oneOf:
            - type: array
              title: references or objects
              maxItems: 1
              items:
                oneOf: 
                  - type: string
                  - type: object
        
    ObservedProperties:
      examples:
        - name: colored dissolved organic matter
          description: Optically active material suspended in water
        - name: salinity
          description: Seawater salinity
        - name: temperature
          description: Measured through a thermistor or remote sensing
        - name: chlorophyll
          description: Measure of chlorophyll
        - name: oxygen
        - name: oxygen percent
        - name: transmission
        - name: oxygen saturation
        - name: conductivity
        - name: photosynthetically active radiation
        - name: turbidity
        - name: voltage
          description: Electrical voltage or sensor or power source
        - name: water velocity

      type: object
      additionalProperties: false
      required: [uuid, name]
      properties:
        uuid:
          type: string
          format: uuid
          description: |
            Unique integer identifier for entity.

        name:
          type:
            - "string"
            - "null"
          description: Human readable entity name for displaying data.

        description:
          type:
            - "string"
            - "null"
          description: Short but useful explanation of what the entity is.

        definition:
          type:
            - "string"
            - "null"
          description: Reference to resource that defines the property. We default to trying Wikipedia.

        DataStreams@iot.navigation:
          readOnly: true
          oneOf:

            - type: array
              title: references
              maxItems: 1
              items:
                type: string

            - type: array
              title: objects
              maxItems: 1
              items:
                type: object

    Collection:
      title: stacCollection
      examples:
        - name: Oysters
          description: Oyster data
          license:
          version: 1
          keywords: oysters,aquaculture,Maine,ShellSIM
        - name: Limited purpose aquaculture sites
          description: Temporary sites with a small footprint
      type: object
      description: |
        SpatioTemporal Asset Catalog object-linking collection object. Collections are generic, while some
        SensorThings entities are special Collections. For instance, a `DataStreams` is a collection of
        `Observations`.

      properties:
        uuid:
          type: string
          format: uuid
          description: |
            Unique integer identifier for entity.

        name:
          type:
            - "string"
            - "null"
          description: Human readable entity name for displaying data.

        description:
          type:
            - "string"
            - "null"
          description: Short but useful explanation of what the entity is.

        extent:
          $ref: '#/components/schemas/Extent'

    Extent:
      title: extent
      type: [object, "null"]
      readOnly: true
      description: |

        Spatiotemporal extent of a data `Collection`. Contains a 2 or 3-D `spatial` extent, and a `temporal`
        interval.

      properties:

        spatial:
          type: array
          minLength: 4
          maxLength: 6
          items:
            type: number
            format: float

        temporal:
          type: string
          description: ISO format timestamp interval


    Provider:
      title: dataProvider
      examples:
        - name: University of Maine
          description: Aquaculture research
          domain: maine.edu
        - name: Public
          description: Public Data Repository
        - name: Oceanicsdotio
          description: Research and development
          domain: oceanics.io
          owner: true
      type: object
      description: |
        Data providers are organizations or individuals that produce, process, host, or license data.

      properties:
        uuid:
          type: string
          format: uuid
          description: |
            Unique integer identifier for entity.

        name:
          type:
            - "string"
            - "null"
          description: Human readable entity name for displaying data.

        description:
          type:
            - "string"
            - "null"
          description: Short but useful explanation of what the entity is.

        url:
          type: string
          description: URL to organization website

        roles:
          type: array
          description: |
            Data providers are labeled with a role, so that attribution and redaction works properly on synthesized
            datasets. Data in the system m
          items:
            title: providerRole
            type: string
            enum:
              - licensor
              - producer
              - processor
              - host


    Weight:
      description: |
        The total fresh product weight in grams. There are other conversions depending on your application case.

        Biogeochemical modelers are likely more interested in carbon and nutrient masses. This will apply best to products sold by weight like mussels.

      type: number
      format: float
      minimum: 0.0

    Error:
      type: object
      properties:
        message:
            type: string

    Configuration:
      type: object
      properties:

        self:
          type: string
          readOnly: true
          description: |
            Link back this the object

        metadata:
          type: object
          description: |
            Metadata for the configuration. Includes indexing and search data.
          properties:
            name:
              type: string
              maxLength: 50
              description: |
                A human readable name for the model configuration
            description:
              type: string
              description: |
                A short description to help understand the purpose of the simulation
            keywords:
              type: [array, "null"]
              description: |
                You may optionally attach keywords to the configuration
              items:
                type: string
            license: 
              type: string
              default: proprietary
              description: |
                We need to know licensing restrictions to properly route your data.

        properties:
          type: object
          description: |
            When you configure a simulation, it will persist
            indefinitely. After the first production run it will be frozen. Future derived versions will be connected
            to preserve model provenance and intent.

          properties:

            workers:
              description: | 
                Number of processes to use for Monte Carlo simulations.
              type: [integer, "null"]
              minimum: 1
              maximum: 4
              default: 1

            dt:
             
              description: |
                Time step in integer seconds. A one minute time step is probably unnecessary, unless you are validating/comparing a laboratory physiology study. Longer time steps may miss important tidal dynamics. 
                
                One hour is the recommended value, which is also a common sampling frequency for sensors deployed near growing areas (and therefore limits interpolation). 
                
                Integration is by Euler (`euler`) or Runge-Kutta (`rk`).

              type: integer
              minimum: 60
              maximum: 3600
              default: 3600

            integration:
              description: |
                Integration is by Euler (`euler`) or Runge-Kutta 4th order (`rungeKutta`). Only `euler` is enabled.
              type:
                - "string"
                - "null"
              enum: [euler]
              default: euler

            backend:
              description: |
                There are several options for biological prediction. Your choice of backend will be based on your licenses
                and appetite for risk:
                * `shellsim` is available if you have licensed `ShellSIM` from Plymouth Marine Laboratory
                * `empirical` uses multiple linear regression and field data to drive growth predictions
                * `ensemble` uses mix of proprietary models and public data

                Only `ensemble` is enabled.

              type:
                - "string"
                - "null"
              enum: [ensemble]
              default: ensemble

        experiments:

          description: |
            Collection of multi-simulation experiments produced by this model configuration
          type:
            - "array"
            - "null"
          readOnly: true
          items:
            type: string

    Experiment:
      title: time series
      type: object
      properties:

        data:

          type: array
          description: | 
            Result of the simulation.

          items:
            type: array
            items:

              type: object
              required:
                - time
                - weight
              properties:

                time:
                  description: |
                    Time in days. While computational time steps are usually hourly or shorter, the interval of interest for aquaculture is measured in days. 
                    
                    The internal clock uses integers to prevent numerical problems in long running simulations, but this is translated to decimal hours for calculating physiological rates.

                  type: number
                  format: float
                  minimum: 0.0

                weight:
                  $ref: "#/components/schemas/Weight"

                oxygenUptake:
                  description: |
                    Cumulative oxygen uptake. Metabolism removes oxygen from the water column. 
                    
                    If aeration does not exceed the rate of biological uptake (plus other processes), the water body will become hypoxic or anoxic.

                  number:
                    - "string"
                    - "null"
                  format: float
                  minimum: 0.0

                chlorophyllUptake:
                  description: |
                    Filter feeding removes phytoplankton from the water column. Chlorophyll is a proxy for the productivity of the water body. 
                    
                    When there are too many shellfish in a semi-closed system, they can deplete available
                    food for conspecifics.

                  type:
                    - "number"
                    - "null"
                  format: float
                  minimum: 0.0

                nitrogenUptake:
                  description: |
                    Filter feeding moves nitrogen from the environment into tissue.
                  type: [number, "null"]
                  format: float
                  minimum: 0.0

                nitrogenExcretion:
                  description: |
                    Shellfish excrete nitrogen through membrane transfer.

                  type: [number, "null"]
                  format: float
                  minimum: 0.0

                ammoniaLoss:
                  description: |
                    Ammonia is released to the environment as waste. This can stimulate the growth of plankton.

                  type: [number, "null"]
                  format: float
                  minimum: 0.0

                deposition:
                  description: |
                    Shellfish are widely considered beneficial to water quality. However, they can concentrate biological material into feces and pseudofeces. 
                    
                    These particulate forms sink more quickly, and may settle in mats either under the culture area, or downstream.
                    
                    Decomposition can lead to sediment and bottom water hypoxia.
                  type: [number, "null"]
                  format: float
                  minimum: 0.0

        workers:
          type: integer
          description: | 
            Parallelism used, multiplies execution time for calculating billable compute time.

        configuration:
          type: string
          format: url
          description: | 
            Link to the model configuration that the result derives
            from.
        
        start:
          type: number
          format: float
          description: |
            Start time

        finish:
          type: number
          format: float
          description: | 
            Time that the backend processes completes

        forcing:
          type: array
          description: |
            Forcing data used as input to the model

        self:
          type: string
          format: url
          description: |
            Link back to this asset
