{
  "openapi": "3.1.0",
  "info": {
    "title": "Bathysphere API",
    "version": "2.0.0",
    "description": "\nBathysphere API is a store and registry for public and proprietary geospatial data. The system is designed to support marine research in the North Atlantic, but can be configured or extended for many applications.\n\nWe ingest sensor and simulation data and automatically parse them into discoverable databases. Representing complex relationships between heterogenous data is simplified by applying a graph-native framework, backed by our [Neo4j](https://neo4j.com/) cluster.\n\nThis approach applies to many flexible, high-level cases, from NASA managing their [lessons-learned](https://neo4j.com/blog/nasa-lesson-learned-database-using-neo4j-linkurious/)\nmission database, to modeling a [virtual economy](https://www.airpair.com/neo4j/posts/modelling-game-economy-with-neo4j).\n\nYou probably have to share data anyway. Our middleware can enhance your data science and management experience by providing representation state transfer (REST) and graph-based services for...\n\n* Secure organizational accounts\n* Open Geospatial Consortium (OGC) SensorThings standard\n* [SpatioTemporal Assets Catalog](https://stacspec.org/) (STAC) standard\n* Provenance tracking\n* Granular access control and auditing\n\nBy assessing data and service availability over your whole domain, projects can allocate resources to fill coverage gaps. This supports an open marketplace asset sharing model, which may be preferable to redundant operational and capital expenses.\n\n<img src=\"https://www.oceanics.io/assets/turbine-fire.gif\" alt=\"Turbine\" title=\"Turbine\" width=\"64\" height=\"64\" style=\"image-rendering:crisp-edges;\" />\n<img src=\"https://www.oceanics.io/assets/boat.gif\" alt=\"Boat\" title=\"Boat\" width=\"64\" height=\"64\" style=\"image-rendering:crisp-edges;\" />\n<img src=\"https://www.oceanics.io/assets/fish-pen.gif\" alt=\"Fish\" title=\"Fish\" width=\"64\" height=\"64\" style=\"image-rendering:crisp-edges;\" />\n<img src=\"https://www.oceanics.io/assets/diver-down.gif\" alt=\"Diver\" title=\"Diver\" width=\"64\" height=\"64\" style=\"image-rendering:crisp-edges;\" />\n<img src=\"https://www.oceanics.io/assets/lighthouse.gif\" alt=\"Lighthouse\" title=\"Lighthouse\" width=\"64\" height=\"64\" style=\"image-rendering:crisp-edges;\" />\n<img src=\"https://www.oceanics.io/assets/lobster-buoys.gif\" alt=\"Lobster\" title=\"Lobster\" width=\"64\" height=\"64\" style=\"image-rendering:crisp-edges;\" />\n<img src=\"https://www.oceanics.io/assets/oyster.gif\" alt=\"Oyster\" title=\"Oyster\" width=\"64\" height=\"64\" style=\"image-rendering:crisp-edges;\" />\n<img src=\"https://www.oceanics.io/assets/mussels.gif\" alt=\"Mussels\" title=\"Mussels\" width=\"64\" height=\"64\" style=\"image-rendering:crisp-edges;\" />\n",
    "contact": {
      "name": "Oceanicsdotio LLC",
      "url": "http://www.oceanics.io",
      "email": "business@oceanics.io"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "x-logo": {
      "url": "https://www.oceanics.io/assets/dagan.png"
    }
  },
  "tags": [
    {
      "name": "Account",
      "description": "If you have an e-mail address associated with an organization known to us, you can register to use the database and services. Please review security and privacy information before uploading any proprietary data.\n"
    },
    {
      "name": "Catalog",
      "description": "Access data through the entity catalog interface. These are your generic CRUD operations.\n"
    },
    {
      "name": "Topology",
      "description": "Build topological relationships and access metadata.\n"
    },
    {
      "name": "DataStreams",
      "description": "Collections of time series observations with numerical methods"
    }
  ],
  "servers": [
    {
      "url": "https://graph.oceanics.io/{basePath}",
      "description": "Production API server",
      "variables": {
        "basePath": {
          "default": "api"
        }
      }
    }
  ],
  "paths": {
    "/auth": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Register",
        "description": "\nRegister an e-mail address to get access to development API. Accounts are for development and testing purposes only. We won't share your contact information, but we do reserve the right to analyze and profile your use of our infrastructure, as well as monitor un-encrypted traffic.\n\nContact us if you are interested in a dedicated database instance, or long-term multi-tenancy hosting.\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Register"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/TokenResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      },
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Token",
        "description": "\nExchange token or email and password for a Javascript Web Token. This will allow you make API calls and use graphical interfaces for a fixed period of time. If you have previously provided a secret, it will be required here to authenticate login and hash the token.\n",
        "parameters": [
          {
            "name": "secret",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SecretKey"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TokenResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Manage",
        "description": "\nChange e-mail address or password.\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Register"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/TokenResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Catalog",
        "description": "Get all entity types in database as collections following the SpatioTemporal Asset Catalog specification\n",
        "parameters": [
          {
            "name": "asset",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "index"
            }
          },
          {
            "name": "extension",
            "description": "Any entity can be linked topologically to any other entity, but generally\nthese are grouped in functional sets by application area:\n* `sensing` implements Open Geospatial Consortium SensorThings specification (part 1),\nand has models relevant to operating and getting data from sensor networks.\n* `tasking` builds off of the SensorThings specification part 2.\n* `mesh` implements structures for spatial simulations.\n",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "sensing",
                "mesh",
                "tasking",
                "admin",
                "catalog"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Catalog",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Entity"
                }
              }
            }
          }
        }
      }
    },
    "/{entity}": {
      "post": {
        "tags": [
          "Catalog"
        ],
        "summary": "Create",
        "description": "Create a new entity.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/entityClass"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Entity"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Entity"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      },
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Collection",
        "description": "Get all entities of one type\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/entityClass"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EntityCollection"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/{entity}({uuid})": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Metadata",
        "description": "Get entity",
        "parameters": [
          {
            "$ref": "#/components/parameters/entityClass"
          },
          {
            "$ref": "#/components/parameters/entityId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Entity"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Catalog"
        ],
        "summary": "Update",
        "description": "Update entity",
        "requestBody": {
          "$ref": "#/components/requestBodies/Entity"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/entityClass"
          },
          {
            "$ref": "#/components/parameters/entityId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Entity"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "Catalog"
        ],
        "summary": "Delete",
        "description": "Delete entity and orphans recursively.",
        "parameters": [
          {
            "$ref": "#/components/parameters/entityClass"
          },
          {
            "$ref": "#/components/parameters/entityId"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/{root}({rootId})/{entity}": {
      "get": {
        "tags": [
          "Topology"
        ],
        "summary": "Query",
        "description": "Get related entities\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/root"
          },
          {
            "$ref": "#/components/parameters/rootId"
          },
          {
            "$ref": "#/components/parameters/entityClass"
          },
          {
            "$ref": "#/components/parameters/label"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EntityCollection"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/{root}({rootId})/{entity}({uuid})": {
      "post": {
        "tags": [
          "Topology"
        ],
        "summary": "Join",
        "description": "Create a labeled relationship between entities.",
        "parameters": [
          {
            "$ref": "#/components/parameters/root"
          },
          {
            "$ref": "#/components/parameters/rootId"
          },
          {
            "$ref": "#/components/parameters/entityClass"
          },
          {
            "$ref": "#/components/parameters/entityId"
          },
          {
            "$ref": "#/components/parameters/label"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      },
      "delete": {
        "tags": [
          "Topology"
        ],
        "summary": "Drop",
        "description": "Remove a labeled relationship between entities. If no `label` is specified, remove all\nrelationships between the entities.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/root"
          },
          {
            "$ref": "#/components/parameters/rootId"
          },
          {
            "$ref": "#/components/parameters/entityClass"
          },
          {
            "$ref": "#/components/parameters/entityId"
          },
          {
            "$ref": "#/components/parameters/label"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/DataStreams/smooth": {
      "post": {
        "tags": [
          "DataStreams"
        ],
        "summary": "Smooth",
        "description": "\nSmooth an evenly-spaced time series using convolution. The backend uses the `Numpy.convolve` method.\nThe result is a filtered time series, with a length that depends on the `convolutionMode` parameter. It is\nthe same length by default, but introduces artifacts at the boundaries.\n",
        "parameters": [
          {
            "in": "query",
            "name": "bandwidth",
            "description": "Width of convolution filter signal in terms of existing sample points. This assumes that the signal\ndiscretization has even intervals, and no missing values.\n",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "\nDetermines the length of the resulting series. Mode \"full\" returns points of overlap, with size (N+M-1).\nBoundary/edge effects will be retained. Mode \"same\" will have the same length as the input series. Mode \"valid\"\nreturns points where signals overlap, and will eliminate edges effects, but will have a different size than the\ninput series.\n",
            "schema": {
              "type": "string",
              "default": "same",
              "enum": [
                "full",
                "same",
                "valid"
              ]
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Entity"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Entity"
          }
        }
      }
    },
    "/DataStreams/fft": {
      "post": {
        "tags": [
          "DataStreams"
        ],
        "summary": "Bandpass",
        "description": "Filter an evenly-spaced time series using fast Fourier transform. The query string can include `lowpass` and\n`highpass` thresholds. With both described, this acts as a bandpass filter. The `fill` option will\nautomatically forward-fill missing values to prevent anomalies.\n",
        "parameters": [
          {
            "in": "query",
            "name": "lowpass",
            "description": "High-frequency cutoff in Hz",
            "schema": {
              "type": "number",
              "format": "foat"
            }
          },
          {
            "in": "query",
            "name": "highpass",
            "description": "Low-frequency cutoff in Hz",
            "schema": {
              "type": "number",
              "format": "float"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Entity"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Entity"
          }
        }
      }
    },
    "/DataStreams/resample": {
      "post": {
        "tags": [
          "DataStreams"
        ],
        "summary": "Resample and interpolate",
        "description": "Resample a sparse time series at specified rate by either forward/back filling or linear interpolation.\n",
        "parameters": [
          {
            "in": "query",
            "name": "observations",
            "description": "Total number of observations to produce",
            "schema": {
              "type": "number",
              "format": "integer"
            }
          },
          {
            "in": "query",
            "name": "start",
            "description": "Datetime to apply as a start",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "method",
            "description": "Interpolation method",
            "schema": {
              "type": "string",
              "enum": [
                "forward",
                "back",
                "interp"
              ]
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Entity"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Entity"
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "ploidy": {
        "in": "query",
        "name": "ploidy",
        "description": "Shellfish are assumed to be reproductive, and therefore diploid. \nFuture features will include phylogeography tools.\n",
        "schema": {
          "type": "string",
          "enum": [
            "diploid",
            "triploid"
          ],
          "default": "diploid"
        }
      },
      "dryWeight": {
        "in": "query",
        "name": "dryWeight",
        "description": "Actual mass of organic material. Automatically calculated from fresh weight.\n",
        "schema": {
          "type": "number",
          "format": "float",
          "minimum": 0
        }
      },
      "shellHeight": {
        "in": "query",
        "name": "shellHeight",
        "description": "Linear size measurement. Automatically calculated from fresh weight.\n",
        "schema": {
          "type": "number",
          "format": "float"
        }
      },
      "volume": {
        "in": "query",
        "name": "volume",
        "description": "Control volume for density-dependence",
        "schema": {
          "description": "Control volume for density-dependence, measure in liters. As the number of organisms per unit volume increases,\ncompetition for limited resources like food or oxygen can come into play.\n",
          "type": "number",
          "format": "float",
          "minimum": 1,
          "maximum": 1000
        }
      },
      "weight": {
        "name": "weight",
        "in": "query",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Weight"
        }
      },
      "root": {
        "in": "path",
        "required": true,
        "name": "root",
        "description": "The class name of the root or parent entity that the request object is associated with. During a `GET` request\nthis will be used to collect child entities based on graph relationship. For `PUT` and `POST` requests this\nand the child entities will be linked with a labeled relationship.\n",
        "schema": {
          "type": "string"
        }
      },
      "rootId": {
        "in": "path",
        "required": true,
        "name": "rootId",
        "description": "Unique integer identifier of the parent entity.\n",
        "schema": {
          "type": "string"
        }
      },
      "entityClass": {
        "in": "path",
        "required": true,
        "name": "entity",
        "description": "Name of the entity model to create or fetch.\n",
        "schema": {
          "type": "string",
          "enum": [
            "DataStreams",
            "Observations",
            "HistoricalLocations",
            "Locations",
            "Sensors",
            "Things",
            "ObservedProperties",
            "Tasks",
            "Actuators",
            "TaskingCapabilities",
            "FeaturesOfInterest",
            "Collections"
          ]
        }
      },
      "entityId": {
        "in": "path",
        "required": true,
        "name": "uuid",
        "description": "Unique identifier of the resource to be retrieved.\n",
        "schema": {
          "type": "string"
        }
      },
      "label": {
        "in": "query",
        "name": "label",
        "description": "Should be in format `LABEL`, although this is not strictly necessary. Labeled relationships\nare used to crawl over the graph.\n",
        "schema": {
          "type": "string"
        }
      },
      "ObjectKey": {
        "in": "path",
        "name": "objectKey",
        "required": true,
        "description": "UUID of experiment data",
        "schema": {
          "type": "string"
        }
      },
      "ThingId": {
        "in": "path",
        "name": "thingId",
        "required": true,
        "description": "Unique identifier of the object to copy.",
        "schema": {
          "type": "integer",
          "minimum": 0
        }
      },
      "configId": {
        "in": "query",
        "name": "configId",
        "description": "A reference to a model configuration can be used instead of supplying values for `runs`, `workers`, `dt`, and\n`days`.\n",
        "schema": {
          "type": "integer"
        }
      }
    },
    "requestBodies": {
      "Register": {
        "description": "Request is e-mail and password, plus an optional secret key for encrypting password and data.\nNote that if you lose the secret key, you will lose access to data.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Register"
            }
          }
        }
      },
      "Collection": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Collection"
            }
          }
        }
      },
      "Entity": {
        "description": "Entity\n",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Things"
                },
                {
                  "$ref": "#/components/schemas/Locations"
                },
                {
                  "$ref": "#/components/schemas/HistoricalLocations"
                },
                {
                  "$ref": "#/components/schemas/DataStreams"
                },
                {
                  "$ref": "#/components/schemas/Observations"
                },
                {
                  "$ref": "#/components/schemas/ObservedProperties"
                },
                {
                  "$ref": "#/components/schemas/Sensors"
                },
                {
                  "$ref": "#/components/schemas/FeaturesOfInterest"
                },
                {
                  "$ref": "#/components/schemas/Collection"
                }
              ]
            }
          }
        }
      },
      "CollectionUpdate": {
        "description": "Relabel or index an entity collection\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CollectionOptions"
            }
          }
        }
      },
      "Asset": {
        "description": "Tell the server where to find the data\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Asset"
            }
          }
        }
      }
    },
    "responses": {
      "Asset": {
        "description": "Description of the file\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Asset"
            }
          }
        }
      },
      "Collection": {
        "description": "Description of the service and data\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Collection"
            }
          }
        }
      },
      "Entity": {
        "description": "Single entity\n",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Things"
                },
                {
                  "$ref": "#/components/schemas/Locations"
                },
                {
                  "$ref": "#/components/schemas/HistoricalLocations"
                },
                {
                  "$ref": "#/components/schemas/DataStreams"
                },
                {
                  "$ref": "#/components/schemas/Observations"
                },
                {
                  "$ref": "#/components/schemas/ObservedProperties"
                },
                {
                  "$ref": "#/components/schemas/Sensors"
                },
                {
                  "$ref": "#/components/schemas/FeaturesOfInterest"
                }
              ]
            }
          }
        }
      },
      "EntityCollection": {
        "description": "Collection of entities\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/EntityCollection"
            }
          }
        }
      },
      "TokenResponse": {
        "description": "Auth token",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "description": "JWT Bearer token containing user ID",
                  "type": "string",
                  "minLength": 127
                },
                "duration": {
                  "type": "integer",
                  "description": "JWT expiration interval in seconds",
                  "default": 600,
                  "minimum": 30,
                  "maximum": 3600
                }
              }
            }
          }
        }
      },
      "Message": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "NotFound": {
        "description": "Not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "BadRequest": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Not authorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ServerError": {
        "description": "Server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "schemas": {
      "Agents": {
        "examples": [
          {
            "name": "Arthur Machen"
          },
          {
            "name": "Octavia Butler"
          }
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "Unique integer identifier for entity.\n"
          },
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Human readable entity name for displaying data."
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "Short but useful explanation of what the entity is."
          }
        }
      },
      "Asset": {
        "type": "object"
      },
      "CollectionOptions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Collection"
          },
          {
            "type": "object",
            "properties": {
              "label": {
                "$ref": "#/components/schemas/EntityLabel"
              },
              "indexBy": {
                "type": "string",
                "default": "id",
                "enum": [
                  "id",
                  "location",
                  "ts"
                ],
                "description": "Node attribute to create an index on.\n"
              }
            }
          }
        ]
      },
      "EntityLabel": {
        "type": "string",
        "enum": [
          "Proxy",
          "Buoy",
          "Server",
          "Metadata",
          "File",
          "Raw"
        ],
        "description": "Additional node labels that can be applied to entities, which have internal meaning.\n"
      },
      "Message": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Status message"
          }
        }
      },
      "Index": {
        "type": "string",
        "description": "Class name of entities to index."
      },
      "SecretKey": {
        "description": "Your secret key is used to encrypt traffic and private data, such as your login credentials. If you do not\nprovide your own key, a default secret will be used. If you do provide a secret key, make sure to save it.\nIt is not possible for us to recover data encrypted with a user secret.\n",
        "type": "string"
      },
      "Register": {
        "type": "object",
        "properties": {
          "email": {
            "description": "Registration requires an e-mail that can be used to validate non-profit or educational affiliation.\n",
            "type": "string"
          },
          "password": {
            "description": "Password cannot be `password`, but there are no character limits otherwise.\nA compromised account will only expose your data and publicly available\ndatasets. This is encrypted to prevent possible re-use across other services. Use a good random password.\n",
            "type": "string",
            "minLength": 10,
            "maxLength": 128
          },
          "secret": {
            "$ref": "#/components/schemas/SecretKey"
          }
        }
      },
      "EntityCollection": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "@iot.count": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100,
                "description": "Total number of records in the response"
              },
              "value": {
                "type": "array",
                "description": "Array of response data",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Things"
                    },
                    {
                      "$ref": "#/components/schemas/Locations"
                    },
                    {
                      "$ref": "#/components/schemas/HistoricalLocations"
                    },
                    {
                      "$ref": "#/components/schemas/DataStreams"
                    },
                    {
                      "$ref": "#/components/schemas/Observations"
                    },
                    {
                      "$ref": "#/components/schemas/ObservedProperties"
                    },
                    {
                      "$ref": "#/components/schemas/Sensors"
                    },
                    {
                      "$ref": "#/components/schemas/FeaturesOfInterest"
                    }
                  ]
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/Collection"
          }
        ]
      },
      "EntityClass": {
        "type": "string",
        "enum": [
          "DataStreams",
          "FeaturesOfInterest",
          "Locations",
          "Observations",
          "ObservedProperties",
          "Sensors",
          "Things",
          "Collections",
          "Actuators",
          "TaskingCapabilities",
          "Tasks"
        ]
      },
      "Entity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique integer identifier for entity. This usually auto-generated, but is different that the default node\nIDs within the Neo4j database, since those are not guaranteed to persist.\n"
          },
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Human readable entity name for displaying data.\n"
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "Short but useful explanation of what the entity is.\n"
          }
        }
      },
      "FeaturesOfInterest": {
        "examples": [
          {
            "name": "Gulf of Maine Mesh"
          },
          {
            "name": "Midcoast Maine Mesh"
          },
          {
            "name": "Damariscotta River Estuary shellfish growing area",
            "description": "Traditional growing area for oysters in Maine."
          }
        ],
        "type": "object",
        "description": "Features of interest are usually Locations\n",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "Unique integer identifier for entity.\n"
          },
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Human readable entity name for displaying data."
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "Short but useful explanation of what the entity is."
          },
          "encodingType": {
            "type": "string",
            "description": "Identifier for parsing feature data"
          },
          "feature": {
            "type": "object",
            "description": "Feature data"
          },
          "Observations@iot.navigation": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "array",
                "title": "references",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "array",
                "title": "objects",
                "items": {
                  "type": "object"
                }
              }
            ]
          }
        }
      },
      "Things": {
        "examples": [
          {
            "name": "Landsat-7",
            "description": "Satellite mission"
          },
          {
            "name": "Land Ocean Biogeochemical Observatory",
            "description": "Moored buoy deployment of the Sustainable Ecological Aquaculture Network\n"
          },
          {
            "name": "Sealab",
            "properties": {
              "home": "Farm",
              "capacity": 6,
              "icon": "laboratory"
            }
          },
          {
            "name": "R/V Lloigor",
            "properties": {
              "capacity": 2,
              "icon": "boat",
              "meters": [
                {
                  "name": "starboard aft fuel",
                  "value": 2,
                  "max": 20,
                  "high": 15,
                  "low": 10
                },
                {
                  "name": "port aft fuel",
                  "value": 12,
                  "max": 20,
                  "high": 15,
                  "low": 10
                },
                {
                  "name": "starboard forward fuel",
                  "value": 5.5,
                  "max": 20,
                  "high": 15,
                  "low": 10
                },
                {
                  "name": "port forward fuel",
                  "value": 15.5,
                  "max": 20,
                  "high": 15,
                  "low": 10
                }
              ]
            }
          }
        ],
        "type": "object",
        "description": "A thing is an object of the physical or information world that is capable of of being identified\nand integrated into communication networks.\n",
        "required": [
          "uuid",
          "name"
        ],
        "additionalProperties": false,
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "Unique integer identifier for entity. This usually auto-generated, but is different that the default node\nIDs within the Neo4j database, since those are not guaranteed to persist.\n"
          },
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Human readable entity name for displaying data.\n"
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "Short but useful explanation of what the entity is.\n"
          },
          "properties": {
            "type": "object",
            "description": "Key-value properties"
          },
          "HistoricalLocations@iot.navigation": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "array",
                "title": "references",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "array",
                "title": "objects",
                "items": {
                  "type": "object"
                }
              }
            ]
          },
          "Locations@iot.navigation": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "array",
                "title": "references",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "array",
                "title": "objects",
                "items": {
                  "type": "object"
                }
              }
            ]
          },
          "DataStreams@iot.navigation": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "array",
                "title": "references",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "array",
                "title": "objects",
                "items": {
                  "type": "object"
                }
              }
            ]
          }
        }
      },
      "LocationEncodingType": {
        "type": "string",
        "enum": [
          "application/vnd.geo+json"
        ],
        "default": "application/vnd.geo+json",
        "description": "The encoding rendered in the location response"
      },
      "Locations": {
        "examples": [
          {
            "name": "Lower Damariscotta",
            "encodingType": "application/vnd.geo+json",
            "location": {
              "type": "Point",
              "coordinates": [
                43.93354,
                -69.58344
              ]
            }
          },
          {
            "name": "Upper Damariscotta Estuary",
            "encodingType": "application/vnd.geo+json",
            "description": "Buoy deployment",
            "location": {
              "type": "Point",
              "coordinates": [
                43.998178,
                -69.54253,
                0
              ]
            }
          },
          {
            "name": "Wood Island Harbor",
            "encodingType": "application/vnd.geo+json",
            "location": {
              "type": "Point",
              "coordinates": [
                43.45655,
                -70.344432
              ]
            }
          },
          {
            "name": "Ram Island Saco Bay",
            "encodingType": "application/vnd.geo+json",
            "location": {
              "type": "Point",
              "coordinates": [
                43.465934,
                -70.359646
              ]
            }
          },
          {
            "name": "Upper New Meadows",
            "encodingType": "application/vnd.geo+json",
            "location": {
              "type": "Point",
              "coordinates": [
                43.863669,
                -69.8984055
              ]
            }
          },
          {
            "name": "Lower New Meadows",
            "encodingType": "application/vnd.geo+json",
            "location": {
              "type": "Point",
              "coordinates": [
                43.77643055,
                -69.89196944
              ]
            }
          },
          {
            "name": "Bagaduce River",
            "encodingType": "application/vnd.geo+json",
            "location": {
              "type": "Point",
              "coordinates": [
                44.40156667,
                -68.7738333
              ]
            }
          },
          {
            "name": "Machias Bay",
            "encodingType": "application/vnd.geo+json",
            "location": {
              "type": "Point",
              "coordinates": [
                44.618517,
                -67.318033
              ]
            }
          },
          {
            "name": "Cobscook Bay",
            "encodingType": "application/vnd.geo+json",
            "location": {
              "type": "Point",
              "coordinates": [
                44.8968,
                -67.0651
              ]
            }
          },
          {
            "name": "Western Passage",
            "encodingType": "application/vnd.geo+json",
            "location": {
              "type": "Point",
              "coordinates": [
                44.92017,
                -66.995833
              ]
            }
          }
        ],
        "type": "object",
        "description": "Last known location of a thing. May be a feature of interest, unless remote sensing.\n",
        "additionalProperties": false,
        "required": [
          "uuid",
          "location",
          "encodingType"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "Unique integer identifier for entity.\n"
          },
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Human readable entity name for displaying data."
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "Short but useful explanation of what the entity is."
          },
          "encodingType": {
            "$ref": "#/components/schemas/LocationEncodingType"
          },
          "location": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Point",
                  "Polygon"
                ]
              },
              "coordinates": {
                "type": "array",
                "minLength": 2,
                "maxLength": 3,
                "items": {
                  "type": "number",
                  "format": "float"
                }
              }
            }
          },
          "HistoricalLocations@iot.navigation": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "array",
                "title": "references",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "array",
                "title": "objects",
                "items": {
                  "type": "object"
                }
              }
            ]
          },
          "Things@iot.navigation": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "array",
                "title": "references",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "array",
                "title": "objects",
                "items": {
                  "type": "object"
                }
              }
            ]
          }
        }
      },
      "HistoricalLocations": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "Unique integer identifier for entity.\n"
          },
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Human readable entity name for displaying data."
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "Short but useful explanation of what the entity is."
          },
          "encodingType": {
            "$ref": "#/components/schemas/LocationEncodingType"
          },
          "time": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the location was current"
          },
          "Things@iot.navigation": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "array",
                "title": "references",
                "minItems": 1,
                "maxItems": 1,
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "array",
                "title": "objects",
                "minItems": 1,
                "maxItems": 1,
                "items": {
                  "type": "object"
                }
              }
            ]
          },
          "Locations@iot.navigation": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "array",
                "title": "references",
                "minItems": 1,
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "array",
                "title": "objects",
                "minItems": 1,
                "items": {
                  "type": "object"
                }
              }
            ]
          }
        }
      },
      "Sensors": {
        "examples": [
          {
            "name": "SeaBird Electronics CTD",
            "description": "A common oceanographic sensing package"
          },
          {
            "name": "Chlorophyll fluorometer",
            "description": "For measuring plankton stuff"
          }
        ],
        "type": "object",
        "additionalProperties": false,
        "required": [
          "uuid",
          "name"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "Unique integer identifier for entity.\n"
          },
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Human readable entity name for displaying data."
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "Short but useful explanation of what the entity is."
          },
          "encodingType": {
            "type": "string",
            "enum": [
              "application/pdf",
              "http://www.opengis.net/doc/IS/SensorML/2.0"
            ],
            "default": "http://www.opengis.net/doc/IS/SensorML/2.0"
          },
          "metadata": {
            "type": "object"
          },
          "DataStreams@iot.navigation": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "array",
                "title": "references",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "array",
                "title": "objects",
                "items": {
                  "type": "object"
                }
              }
            ]
          }
        }
      },
      "DataStreams": {
        "examples": [
          {
            "Things@iot.navigation": [
              {
                "name": [
                  "Land Ocean Biogeochemical Observatory"
                ]
              }
            ],
            "Sensors@iot.navigation": [
              {
                "name": [
                  "SeaBird Electronics CTD"
                ]
              }
            ],
            "ObservedProperties@iot.navigation": [
              {
                "name": [
                  "temperature"
                ]
              }
            ],
            "name": "temperature",
            "description": "An example synthetic temperature series"
          },
          {
            "Things@iot.navigation": [
              {
                "name": [
                  "Land Ocean Biogeochemical Observatory"
                ]
              }
            ],
            "ObservedProperties@iot.navigation": [
              {
                "name": [
                  "chlorophyll"
                ]
              }
            ],
            "name": "chlorophyll",
            "description": "Just another chlorophyll series"
          }
        ],
        "type": "object",
        "description": "DataStreams are collections of `Observations` from the same `Sensors`.\n",
        "additionalProperties": false,
        "required": [
          "uuid",
          "name"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "Unique integer identifier for entity.\n"
          },
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Human readable entity name for displaying data."
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "Short but useful explanation of what the entity is."
          },
          "unitOfMeasurement": {
            "type": "object",
            "description": "Unified Code for Unit of Measure\n",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name for matching and displaying"
              },
              "symbol": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Abbreviation for the parameter"
              },
              "definition": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "A link to a formal definition"
              }
            }
          },
          "observationType": {
            "type": [
              "string",
              "null"
            ],
            "description": "Data model of child `Observations`. Usually a `Measurement`.\n",
            "enum": [
              "OM_CategoryObservation",
              "OM_CountObservation",
              "OM_Measurement",
              "OM_Observation",
              "OM_TruthObservation"
            ]
          },
          "observedArea": {
            "type": [
              "object",
              "null"
            ],
            "readOnly": true,
            "description": "The bounding box that encloses all `FeaturesOfInterest` referenced by child `Observations`\n"
          },
          "phenomenonTime": {
            "type": "array",
            "description": "Time interval of the measured process, consisting of two ISO8601 timestamps.\n",
            "minItems": 2,
            "maxItems": 2,
            "items": {
              "type": "string",
              "format": "date-time"
            }
          },
          "resultTime": {
            "type": "array",
            "description": "Time interval of receiving data, consisting of two ISO8601 timestamps. May be different than the\nmeasured process, due to batch uploads, latency, lack of real-time clocks in devices, etc.\n",
            "minItems": 2,
            "maxItems": 2,
            "items": {
              "type": "string",
              "format": "date-time"
            }
          },
          "Observations@iot.navigation": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "array",
                "title": "references",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "array",
                "title": "objects",
                "items": {
                  "type": "object"
                }
              }
            ]
          },
          "ObservedProperties@iot.navigation": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "array",
                "title": "references",
                "minItems": 1,
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "array",
                "title": "objects",
                "minItems": 1,
                "items": {
                  "type": "object"
                }
              }
            ]
          },
          "Sensors@iot.navigation": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "array",
                "title": "references",
                "minItems": 1,
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "array",
                "title": "objects",
                "minItems": 1,
                "items": {
                  "type": "object"
                }
              }
            ]
          },
          "Things@iot.navigation": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "array",
                "title": "references",
                "minItems": 1,
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "array",
                "title": "objects",
                "minItems": 1,
                "items": {
                  "type": "object"
                }
              }
            ]
          }
        }
      },
      "Observations": {
        "examples": [
          {
            "DataStreams@iot.navigation": [
              {
                "name": [
                  "temperature"
                ]
              }
            ],
            "resultTime": "2020-04-01T09:00:00Z",
            "result": 10
          },
          {
            "DataStreams@iot.navigation": [
              {
                "name": [
                  "temperature"
                ]
              }
            ],
            "resultTime": "2018-04-01T09:45:00Z",
            "result": 11.7
          }
        ],
        "type": "object",
        "additionalProperties": false,
        "required": [
          "uuid",
          "resultTime",
          "result"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "Unique integer identifier for entity.\n"
          },
          "resultTime": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the `Observation` was registered by the system.\n"
          },
          "resultQuality": {
            "type": "string",
            "description": "Quality of the result described as a `DQ_Element` (OGC)\n"
          },
          "validTime": {
            "type": "array",
            "description": "Time interval when the result is valid",
            "minItems": 2,
            "maxItems": 2,
            "items": {
              "type": "string",
              "format": "date-time"
            }
          },
          "phenomenonTime": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of the acquisition of the `Observation`\n"
          },
          "result": {
            "description": "The result of the observation. Usually a number.",
            "type": "number",
            "format": "float"
          },
          "parameters": {
            "type": "object",
            "description": "Environmental conditions during the `Observation`"
          },
          "DataStreams@iot.navigation": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "array",
                "title": "references",
                "maxItems": 1,
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "array",
                "title": "objects",
                "maxItems": 1,
                "items": {
                  "type": "object"
                }
              }
            ]
          },
          "FeaturesOfInterest@iot.navigation": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "array",
                "title": "references",
                "maxItems": 1,
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "array",
                "title": "objects",
                "maxItems": 1,
                "items": {
                  "type": "object"
                }
              }
            ]
          }
        }
      },
      "Tasks": {
        "examples": [
          {
            "Locations@iot.navigation": [
              {
                "name": [
                  "Wharf"
                ]
              }
            ],
            "name": "Do a thing"
          },
          {
            "Locations@iot.navigation": [
              {
                "name": [
                  "Wharf"
                ]
              }
            ],
            "name": "Fix me"
          },
          {
            "Locations@iot.navigation": [
              {
                "name": [
                  "Farm"
                ]
              }
            ],
            "name": "Harvest"
          }
        ],
        "type": "object",
        "additionalProperties": false,
        "required": [
          "uuid",
          "name"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "Unique integer identifier for entity.\n"
          },
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Human readable entity name for displaying data."
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "Short but useful explanation of what the entity is."
          },
          "Locations@iot.navigation": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "array",
                "title": "references or objects",
                "maxItems": 1,
                "items": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "object"
                    }
                  ]
                }
              }
            ]
          },
          "TaskingCapabilities@iot.navigation": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "array",
                "title": "references or objects",
                "maxItems": 1,
                "items": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "object"
                    }
                  ]
                }
              }
            ]
          }
        }
      },
      "ObservedProperties": {
        "examples": [
          {
            "ObservedProperties@iot.navigation": [
              {
                "name": [
                  "chlorophyll"
                ]
              }
            ],
            "Providers@iot.navigation": [
              {
                "label": "Alias",
                "props": {
                  "name": [
                    "cdom"
                  ]
                }
              }
            ],
            "name": "colored dissolved organic matter"
          },
          {
            "ObservedProperties@iot.navigation": [
              {
                "name": [
                  "conductivity"
                ]
              }
            ],
            "Providers@iot.navigation": [
              {
                "label": "Alias",
                "props": {
                  "name": [
                    "psu",
                    "sss",
                    "sal"
                  ]
                }
              }
            ],
            "name": "salinity",
            "description": "Seawater salinity"
          },
          {
            "Providers@iot.navigation": [
              {
                "label": "Alias",
                "props": {
                  "name": [
                    "temp"
                  ]
                }
              }
            ],
            "name": "temperature",
            "description": "Measured through a thermistor or remote sensing"
          },
          {
            "Providers@iot.navigation": [
              {
                "label": "Alias",
                "props": {
                  "name": [
                    "chl",
                    "chla",
                    "chl-a"
                  ]
                }
              }
            ],
            "name": "chlorophyll",
            "description": "Measure of chlorophyll"
          },
          {
            "name": "oxygen"
          },
          {
            "name": "oxygen percent"
          },
          {
            "name": "transmission"
          },
          {
            "name": "oxygen saturation"
          },
          {
            "name": "conductivity"
          },
          {
            "Providers@iot.navigation": [
              {
                "label": "Alias",
                "props": {
                  "name": [
                    "par0plus",
                    "par0minus"
                  ]
                }
              }
            ],
            "name": "photosynthetically active radiation"
          },
          {
            "ObservedProperties@iot.navigation": [
              {
                "name": [
                  "transmission",
                  "cdom",
                  "cholorophyll"
                ]
              }
            ],
            "name": "turbidity"
          },
          {
            "name": "voltage",
            "description": "Electrical voltage or sensor or power source"
          },
          {
            "Providers@iot.navigation": [
              {
                "label": "Alias",
                "props": {
                  "name": [
                    "uv",
                    "u",
                    "ww",
                    "omega",
                    "current_speed_cm",
                    "current_direction"
                  ]
                }
              }
            ],
            "name": "water velocity"
          }
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "Unique integer identifier for entity.\n"
          },
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Human readable entity name for displaying data."
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "Short but useful explanation of what the entity is."
          },
          "definition": {
            "type": [
              "string",
              "null"
            ],
            "description": "Reference to resource that defines the property. We default to trying Wikipedia."
          },
          "DataStreams@iot.navigation": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "array",
                "title": "references",
                "maxItems": 1,
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "array",
                "title": "objects",
                "maxItems": 1,
                "items": {
                  "type": "object"
                }
              }
            ]
          }
        }
      },
      "Collection": {
        "title": "stacCollection",
        "examples": [
          {
            "name": "Oysters",
            "description": "Oyster data",
            "license": null,
            "version": 1,
            "keywords": "oysters,aquaculture,Maine,ShellSIM"
          },
          {
            "name": "Limited purpose aquaculture sites",
            "description": "Temporary sites with a small footprint"
          }
        ],
        "type": "object",
        "description": "SpatioTemporal Asset Catalog object-linking collection object. Collections are generic, while some\nSensorThings entities are special Collections. For instance, a `DataStreams` is a collection of\n`Observations`.\n",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "Unique integer identifier for entity.\n"
          },
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Human readable entity name for displaying data."
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "Short but useful explanation of what the entity is."
          },
          "extent": {
            "$ref": "#/components/schemas/Extent"
          }
        }
      },
      "Extent": {
        "title": "extent",
        "type": [
          "object",
          "null"
        ],
        "readOnly": true,
        "description": "\nSpatiotemporal extent of a data `Collection`. Contains a 2 or 3-D `spatial` extent, and a `temporal`\ninterval.\n",
        "properties": {
          "spatial": {
            "type": "array",
            "minLength": 4,
            "maxLength": 6,
            "items": {
              "type": "number",
              "format": "float"
            }
          },
          "temporal": {
            "type": "string",
            "description": "ISO format timestamp interval"
          }
        }
      },
      "Provider": {
        "title": "dataProvider",
        "examples": [
          {
            "name": "University of Maine",
            "description": "Aquaculture research",
            "domain": "maine.edu"
          },
          {
            "name": "Public",
            "description": "Public Data Repository"
          },
          {
            "name": "Oceanicsdotio",
            "description": "Research and development",
            "domain": "oceanics.io",
            "owner": true
          }
        ],
        "type": "object",
        "description": "Data providers are organizations or individuals that produce, process, host, or license data.\n",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "Unique integer identifier for entity.\n"
          },
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Human readable entity name for displaying data."
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "Short but useful explanation of what the entity is."
          },
          "url": {
            "type": "string",
            "description": "URL to organization website"
          },
          "roles": {
            "type": "array",
            "description": "Data providers are labeled with a role, so that attribution and redaction works properly on synthesized\ndatasets. Data in the system m\n",
            "items": {
              "title": "providerRole",
              "type": "string",
              "enum": [
                "licensor",
                "producer",
                "processor",
                "host"
              ]
            }
          }
        }
      },
      "Weight": {
        "description": "The total fresh product weight in grams. There are other conversions depending on your application case.\n\nBiogeochemical modelers are likely more interested in carbon and nutrient masses. This will apply best to products sold by weight like mussels.\n",
        "type": "number",
        "format": "float",
        "minimum": 0
      },
      "Error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "Configuration": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string",
            "readOnly": true,
            "description": "Link back this the object\n"
          },
          "metadata": {
            "type": "object",
            "description": "Metadata for the configuration. Includes indexing and search data.\n",
            "properties": {
              "name": {
                "type": "string",
                "maxLength": 50,
                "description": "A human readable name for the model configuration\n"
              },
              "description": {
                "type": "string",
                "description": "A short description to help understand the purpose of the simulation\n"
              },
              "keywords": {
                "type": [
                  "array",
                  "null"
                ],
                "description": "You may optionally attach keywords to the configuration\n",
                "items": {
                  "type": "string"
                }
              },
              "license": {
                "type": "string",
                "default": "proprietary",
                "description": "We need to know licensing restrictions to properly route your data.\n"
              }
            }
          },
          "properties": {
            "type": "object",
            "description": "When you configure a simulation, it will persist\nindefinitely. After the first production run it will be frozen. Future derived versions will be connected\nto preserve model provenance and intent.\n",
            "properties": {
              "workers": {
                "description": "Number of processes to use for Monte Carlo simulations.\n",
                "type": [
                  "integer",
                  "null"
                ],
                "minimum": 1,
                "maximum": 4,
                "default": 1
              },
              "dt": {
                "description": "Time step in integer seconds. A one minute time step is probably unnecessary, unless you are validating/comparing a laboratory physiology study. Longer time steps may miss important tidal dynamics. \n\nOne hour is the recommended value, which is also a common sampling frequency for sensors deployed near growing areas (and therefore limits interpolation). \n\nIntegration is by Euler (`euler`) or Runge-Kutta (`rk`).\n",
                "type": "integer",
                "minimum": 60,
                "maximum": 3600,
                "default": 3600
              },
              "integration": {
                "description": "Integration is by Euler (`euler`) or Runge-Kutta 4th order (`rungeKutta`). Only `euler` is enabled.\n",
                "type": [
                  "string",
                  "null"
                ],
                "enum": [
                  "euler"
                ],
                "default": "euler"
              },
              "backend": {
                "description": "There are several options for biological prediction. Your choice of backend will be based on your licenses\nand appetite for risk:\n* `shellsim` is available if you have licensed `ShellSIM` from Plymouth Marine Laboratory\n* `empirical` uses multiple linear regression and field data to drive growth predictions\n* `ensemble` uses mix of proprietary models and public data\n\nOnly `ensemble` is enabled.\n",
                "type": [
                  "string",
                  "null"
                ],
                "enum": [
                  "ensemble"
                ],
                "default": "ensemble"
              }
            }
          },
          "experiments": {
            "description": "Collection of multi-simulation experiments produced by this model configuration\n",
            "type": [
              "array",
              "null"
            ],
            "readOnly": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Experiment": {
        "title": "time series",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Result of the simulation.\n",
            "items": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "time",
                  "weight"
                ],
                "properties": {
                  "time": {
                    "description": "Time in days. While computational time steps are usually hourly or shorter, the interval of interest for aquaculture is measured in days. \n\nThe internal clock uses integers to prevent numerical problems in long running simulations, but this is translated to decimal hours for calculating physiological rates.\n",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                  },
                  "weight": {
                    "$ref": "#/components/schemas/Weight"
                  },
                  "oxygenUptake": {
                    "description": "Cumulative oxygen uptake. Metabolism removes oxygen from the water column. \n\nIf aeration does not exceed the rate of biological uptake (plus other processes), the water body will become hypoxic or anoxic.\n",
                    "number": [
                      "string",
                      "null"
                    ],
                    "format": "float",
                    "minimum": 0
                  },
                  "chlorophyllUptake": {
                    "description": "Filter feeding removes phytoplankton from the water column. Chlorophyll is a proxy for the productivity of the water body. \n\nWhen there are too many shellfish in a semi-closed system, they can deplete available\nfood for conspecifics.\n",
                    "type": [
                      "number",
                      "null"
                    ],
                    "format": "float",
                    "minimum": 0
                  },
                  "nitrogenUptake": {
                    "description": "Filter feeding moves nitrogen from the environment into tissue.\n",
                    "type": [
                      "number",
                      "null"
                    ],
                    "format": "float",
                    "minimum": 0
                  },
                  "nitrogenExcretion": {
                    "description": "Shellfish excrete nitrogen through membrane transfer.\n",
                    "type": [
                      "number",
                      "null"
                    ],
                    "format": "float",
                    "minimum": 0
                  },
                  "ammoniaLoss": {
                    "description": "Ammonia is released to the environment as waste. This can stimulate the growth of plankton.\n",
                    "type": [
                      "number",
                      "null"
                    ],
                    "format": "float",
                    "minimum": 0
                  },
                  "deposition": {
                    "description": "Shellfish are widely considered beneficial to water quality. However, they can concentrate biological material into feces and pseudofeces. \n\nThese particulate forms sink more quickly, and may settle in mats either under the culture area, or downstream.\n\nDecomposition can lead to sediment and bottom water hypoxia.\n",
                    "type": [
                      "number",
                      "null"
                    ],
                    "format": "float",
                    "minimum": 0
                  }
                }
              }
            }
          },
          "workers": {
            "type": "integer",
            "description": "Parallelism used, multiplies execution time for calculating billable compute time.\n"
          },
          "configuration": {
            "type": "string",
            "format": "url",
            "description": "Link to the model configuration that the result derives\nfrom.\n"
          },
          "start": {
            "type": "number",
            "format": "float",
            "description": "Start time\n"
          },
          "finish": {
            "type": "number",
            "format": "float",
            "description": "Time that the backend processes completes\n"
          },
          "forcing": {
            "type": "array",
            "description": "Forcing data used as input to the model\n"
          },
          "self": {
            "type": "string",
            "format": "url",
            "description": "Link back to this asset\n"
          }
        }
      }
    }
  }
}
