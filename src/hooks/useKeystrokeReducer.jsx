import {useReducer, useEffect} from "react";
/**
Toggle the key state when it is pressed and released.
There is technically no need for the default case.

The initial value of the state is taken from the second
arg to `useReducer`.

Add and remove keypress listeners as necessary. These
will call the `setKeys` method generated by `useReducer`
to logicaly update the array of pressed keys. 
*/
export default (trigger, callback) => {
    
    const [keys, setKeys] = useReducer(
        (state, {type, key}) => {
            switch (type) {
                case "keydown":
                    return { ...state, [key]: true };
                case "keyup":
                    return { ...state, [key]: false };
                default:
                    return state;
            }
        }, 
        trigger
            .map(key => key.toLowerCase())
            .reduce((currentKeys, key) => {
                currentKeys[key] = false;
                return currentKeys;
            }, {})
    );

    
    useEffect(() => {
        const types = ["keyup", "keydown"];
        const listeners = types.map(type => {
            const listen = ({key, repeat}) => {
                const symbol = key.toLowerCase();
                if (repeat || !keys.hasOwnProperty(symbol)) return;
                if (keys[symbol] === ("keyup" === type)) setKeys({ type, key: symbol });  
            };
            window.addEventListener(type, listen, true);
            return listen;
        });
        return () => types.map(type => window.removeEventListener(type, listen, true));
    }, [keys]);
  

    useEffect(() => {
        if (Object.values(keys).every(x => x)) callback();
    }, [keys]);
};