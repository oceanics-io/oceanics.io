image: continuumio/miniconda3

options:
  docker: true

pipelines:
  default:
    - step:
        name: Install dependencies, unit test, and deploy a local node
        caches:
          - docker
          - pip
        services:
          - docker
          - graph

        script:
#          - pip install docker-compose
#          - docker pull neo4j:3.5
#          - docker-compose up -d neo4j
#          - sleep 30
#          - count=0; retries=10; timeout=6; status="undefined"
#          - while [ "$status" != *"healthy"* ]; do
#          -   if [ ${count} -gt ${retries} ]; then
#          -     echo "Neo4j status is ${status}, aborting"
#          -     docker-compose down; exit 1
#          -   fi
#          -   echo "Neo4j status is ${status}, waiting 5 seconds"
#          -   count=$(( count+1 )); sleep ${timeout}
#          -   status=$(docker inspect --format='{{json .State.Health.Status}}' bathysphere-graph_neo4j_1)
#          - done
#          - echo "Neo4j status is ${status}, continuing with tests";
          - conda env create -f config/environment.yml
          - source activate bathysphere_graph
          - pytest
#          - docker-compose down

    - step:
        name: Build docker image in docker
        caches:
          - docker
        script:
          - pip install docker-compose
          - docker-compose build goodbuoy

definitions:
  services:
    graph:
      image: neo4j:3.5
      environment:
        NEO4J_AUTH: "neo4j/n0t_passw0rd"
        NEO4J_dbms_memory_pagecache_size: "200M"
        NEO4J_dbms_memory_heap_maxSize: "500M"
      volumes: /data/testing:/data/databases
      healthcheck:
        test: ["CMD", "curl", "-f", "localhost:7474"]
        interval: 30s
        timeout: 5s
        retries: 3