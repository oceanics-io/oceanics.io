openapi: "3.0.0"

info:

  title: "Bathysphere API"
  version: "2.0.0"
  description: |

    Bathysphere API is a store and registry for public and proprietary geospatial data. The system is designed to support marine research in the North Atlantic, but can be configured or extended for many applications.

    We ingest sensor and simulation data and automatically parse them into discoverable databases. Representing complex relationships between heterogenous data is simplified by applying a graph-native framework, backed by our [Neo4j](https://neo4j.com/) cluster.
    
    This approach applies to many flexible, high-level cases, from NASA managing their [lessons-learned](https://neo4j.com/blog/nasa-lesson-learned-database-using-neo4j-linkurious/)
    mission database, to modeling a [virtual economy](https://www.airpair.com/neo4j/posts/modelling-game-economy-with-neo4j).

    You probably have to share data anyway. Our middleware can enhance your data science and management experience by providing representation state transfer (REST) and graph-based services for...

    * Secure organizational accounts
    * Open Geospatial Consortium (OGC) SensorThings standard
    * [SpatioTemporal Assets Catalog](https://stacspec.org/) (STAC) standard
    * Provenance tracking
    * Granular access control and auditing

    By assessing data and service availability over your whole domain, projects can allocate resources to fill coverage gaps. This supports an open marketplace asset sharing model, which may be preferable to redundant operational and capital expenses.

    <img src="https://www.oceanics.io/assets/turbine-fire.gif" alt="Turbine" title="Turbine" width="64" height="64" style="image-rendering:crisp-edges;" />
    <img src="https://www.oceanics.io/assets/boat.gif" alt="Boat" title="Boat" width="64" height="64" style="image-rendering:crisp-edges;" />
    <img src="https://www.oceanics.io/assets/fish-pen.gif" alt="Fish" title="Fish" width="64" height="64" style="image-rendering:crisp-edges;" />
    <img src="https://www.oceanics.io/assets/diver-down.gif" alt="Diver" title="Diver" width="64" height="64" style="image-rendering:crisp-edges;" />
    <img src="https://www.oceanics.io/assets/lighthouse.gif" alt="Lighthouse" title="Lighthouse" width="64" height="64" style="image-rendering:crisp-edges;" />
    <img src="https://www.oceanics.io/assets/lobster-buoys.gif" alt="Lobster" title="Lobster" width="64" height="64" style="image-rendering:crisp-edges;" />
    <img src="https://www.oceanics.io/assets/oyster.gif" alt="Oyster" title="Oyster" width="64" height="64" style="image-rendering:crisp-edges;" />
    <img src="https://www.oceanics.io/assets/mussels.gif" alt="Mussels" title="Mussels" width="64" height="64" style="image-rendering:crisp-edges;" />

  contact:
    name: Oceanicsdotio LLC
    url: http://www.oceanics.io
    email: business@oceanics.io

  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

  x-logo:
    url: https://www.oceanics.io/assets/dagan.png

tags:

  - name: Account
    description: |
      If you have an e-mail address associated with an organization known to us, you can register to use the database and services. Please review security and privacy information before uploading any proprietary data.

  - name: Catalog
    description: |
      Access data through the entity catalog interface. These are your generic CRUD operations.

  - name: Topology
    description: |
      Build topological relationships and access metadata.

  - name: DataStreams
    description: Collections of time series observations with numerical methods


servers:
- url: https://graph.oceanics.io/{basePath}
  description: Production API server
  variables:
    basePath:
      default: api

paths:

  /auth:

    post:
      tags: [ Account ]
      summary: Register
      description: |

        Register an e-mail address to get access to development API. Accounts are for development and testing purposes only. We won't share your contact information, but we do reserve the right to analyze and profile your use of our infrastructure, as well as monitor un-encrypted traffic.

        Contact us if you are interested in a dedicated database instance, or long-term multi-tenancy hosting.

      requestBody:
        $ref: '#/components/requestBodies/Register'

      responses:
        '200':
          $ref: '#/components/responses/TokenResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

    get:
      tags: [ Account ]
      summary: Token
      description: |

        Exchange token or email and password for a Javascript Web Token. This will allow you make API calls and use graphical interfaces for a fixed period of time. If you have previously provided a secret, it will be required here to authenticate login and hash the token.

      parameters:
        - name: secret
          in: query
          schema:
            $ref: '#/components/schemas/SecretKey'

      responses:
        '200':
          $ref: '#/components/responses/TokenResponse'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [Account]
      summary: Manage
      description: |

        Change e-mail address or password.

      requestBody:
        $ref: '#/components/requestBodies/Register'

      responses:
        '200':
          $ref: '#/components/responses/TokenResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      
  /:

    get:
      tags: [Catalog]
      summary: Catalog
      description: |
        Get all entity types in database as collections following the SpatioTemporal Asset Catalog specification

      parameters:

        - name: asset
          in: query
          schema:
            type: string
            default: index

        - name: extension
          description: |
            Any entity can be linked topologically to any other entity, but generally
            these are grouped in functional sets by application area:
            * `sensing` implements Open Geospatial Consortium SensorThings specification (part 1),
            and has models relevant to operating and getting data from sensor networks.
            * `tasking` builds off of the SensorThings specification part 2.
            * `mesh` implements structures for spatial simulations.

          in: query
          schema:
            type: string
            enum: [sensing, mesh, tasking, admin, catalog]

      responses:
        '200':
          description: Catalog
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'

  /{entity}:

    post:
      tags: [Catalog]
      summary: Create
      description: |
        Create a new entity.
      parameters:
        - $ref: "#/components/parameters/entityClass"
      requestBody:
        $ref: '#/components/requestBodies/Entity'
      responses:
        '200':
          $ref: '#/components/responses/Entity'
        '400':
          $ref: '#/components/responses/BadRequest'

    get:
      tags: [Catalog]
      summary: Collection
      description: |
        Get all entities of one type

      parameters:
        - $ref: "#/components/parameters/entityClass"

      responses:
        '200':
          $ref: '#/components/responses/EntityCollection'
        '404':
          $ref: '#/components/responses/NotFound'


  /{entity}({uuid}):

    get:
      tags: [Catalog]
      summary: Metadata
      description: |
        Get entity

      parameters:
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"

      responses:
        '200':
          $ref: '#/components/responses/Entity'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [ Catalog ]
      summary: Update
      description: Update entity
      requestBody:
        $ref: '#/components/requestBodies/Entity'

      parameters:
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"

      responses:
        '200':
          $ref: '#/components/responses/Entity'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [ Catalog ]
      summary: Delete
      description: Delete entity and orphans recursively.
      parameters:
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"

      responses:
        '204':
          description: No content
        '404':
          $ref: '#/components/responses/NotFound'

        
  /{root}({rootId})/{entity}:

    get:
      tags: [ Topology ]
      summary: Query
      description: |
        Get related entities

      parameters:
        - $ref: "#/components/parameters/root"
        - $ref: "#/components/parameters/rootId"
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/label"

      responses:
        '200':
          $ref: '#/components/responses/EntityCollection'
        '400':
          $ref: '#/components/responses/BadRequest'


  /{root}({rootId})/{entity}({uuid}):

    post:

      tags: [ Topology ]
      summary: Join
      description: Create a labeled relationship between entities.
      parameters:
        - $ref: "#/components/parameters/root"
        - $ref: "#/components/parameters/rootId"
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"
        - $ref: "#/components/parameters/label"

      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'

    delete:
      tags: [Topology]
      summary: Drop
      description: |
        Remove a labeled relationship between entities. If no `label` is specified, remove all
        relationships between the entities.

      parameters:
        - $ref: "#/components/parameters/root"
        - $ref: "#/components/parameters/rootId"
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"
        - $ref: "#/components/parameters/label"

      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
    
  /DataStreams/smooth:

    post:
      tags: [DataStreams]
      summary: Smooth
      description: |

        Smooth an evenly-spaced time series using convolution. The backend uses the `Numpy.convolve` method.
        The result is a filtered time series, with a length that depends on the `convolutionMode` parameter. It is
        the same length by default, but introduces artifacts at the boundaries.

      parameters:
        
        - in: query
          name: bandwidth
          description: |
            Width of convolution filter signal in terms of existing sample points. This assumes that the signal
            discretization has even intervals, and no missing values.

          schema:
            type: integer
            default: 1
        

        - in: query
          name: mode
          description: |

            Determines the length of the resulting series. Mode "full" returns points of overlap, with size (N+M-1).
            Boundary/edge effects will be retained. Mode "same" will have the same length as the input series. Mode "valid"
            returns points where signals overlap, and will eliminate edges effects, but will have a different size than the
            input series.

          schema:
            type: string
            default: same
            enum:
              - full
              - same
              - valid

      requestBody:
        $ref: '#/components/requestBodies/Entity'

      responses:
        '200':
          $ref: '#/components/responses/Entity'

  /DataStreams/fft:

    post:
      tags: [DataStreams]
      summary: Bandpass
      description: |
        Filter an evenly-spaced time series using fast Fourier transform. The query string can include `lowpass` and
        `highpass` thresholds. With both described, this acts as a bandpass filter. The `fill` option will
        automatically forward-fill missing values to prevent anomalies.

      parameters:
        # - $ref: '#/components/parameters/dt'

        - in: query
          name: lowpass
          description: High-frequency cutoff in Hz
          schema:
            type: number
            format: foat

        - in: query
          name: highpass
          description: Low-frequency cutoff in Hz
          schema:
            type: number
            format: float

        # - $ref: '#/components/parameters/fill'
        # - $ref: '#/components/parameters/compress'

      requestBody:
        $ref: '#/components/requestBodies/Entity'

      responses:
        '200':
          $ref: '#/components/responses/Entity'


  /DataStreams/resample:

    post:
      tags: [DataStreams]
      summary: Resample and interpolate
      description: |
        Resample a sparse time series at specified rate by either forward/back filling or linear interpolation.

      parameters:
        - in: query
          name: observations
          description: Total number of observations to produce
          schema:
            type: number
            format: integer

      
        - in: query
          name: start
          description: Datetime to apply as a start
          schema:
            type: string

       
        - in: query
          name: method
          description: Interpolation method
          schema:
            type: string
            enum:
              - forward
              - back
              - interp

      requestBody:
        $ref: '#/components/requestBodies/Entity'

      responses:
        '200':
          $ref: '#/components/responses/Entity'
      

components:

  parameters:

    ploidy:
      in: query
      name: ploidy
      description: |
        Shellfish are assumed to be reproductive, and therefore diploid. 
        Future features will include phylogeography tools.

      schema:
        type: string
        enum: [diploid, triploid]
        default: diploid

    dryWeight:
      in: query
      name: dryWeight
      description: |
        Actual mass of organic material. Automatically calculated from fresh weight.
      schema:
        type: number
        format: float
        minimum: 0.0

    shellHeight:
      in: query
      name: shellHeight
      description: |
        Linear size measurement. Automatically calculated from fresh weight.
      schema:
        type: number
        format: float

    volume:
      in: query
      name: volume
      description: Control volume for density-dependence
      schema:
        description: |
          Control volume for density-dependence, measure in liters. As the number of organisms per unit volume increases,
          competition for limited resources like food or oxygen can come into play.

        type: number
        format: float
        minimum: 1
        maximum: 1000

    weight:
      name: weight
      in: query
      required: true
      schema:
        $ref: "#/components/schemas/Weight"


    root:
      in: path
      required: true
      name: root
      description: |
        The class name of the root or parent entity that the request object is associated with. During a `GET` request
        this will be used to collect child entities based on graph relationship. For `PUT` and `POST` requests this
        and the child entities will be linked with a labeled relationship.

      schema:
        type: string

    rootId:
      in: path
      required: true
      name: rootId
      description: |
        Unique integer identifier of the parent entity.
      schema:
        type: string

    entityClass:
      in: path
      required: true
      name: entity
      description: |
        Name of the entity model to create or fetch.

      schema:
        type: string
        enum:
          - DataStreams
          - Observations
          - HistoricalLocations
          - Locations
          - Sensors
          - Things
          - ObservedProperties
          - Tasks
          - Actuators
          - TaskingCapabilities
          - FeaturesOfInterest
          - Collections

    entityId:
      in: path
      required: true
      name: uuid
      description: |
        Unique identifier of the resource to be retrieved.
      schema:
        type: string


    label:
      in: query
      name: label
      description: |
        Should be in format `LABEL`, although this is not strictly necessary. Labeled relationships
        are used to crawl over the graph.
      schema:
        type: string


    ObjectKey:
      in: path
      name: objectKey
      required: true
      description: UUID of experiment data
      schema:
        type: string

    ThingId:
      in: path
      name: thingId
      required: true
      description: Unique identifier of the object to copy.
      schema:
        type: integer
        minimum: 0

    configId:
      in: query
      name: configId
      description: |
        A reference to a model configuration can be used instead of supplying values for `runs`, `workers`, `dt`, and
        `days`.
      schema:
        type: integer


  requestBodies:

    Register:
      description: |
        Request is e-mail and password, plus an optional secret key for encrypting password and data.
        Note that if you lose the secret key, you will lose access to data.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Register'

    Collection:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Collection'

    Entity:
      description: |
        Entity
      content:
        application/json:
          schema:
            type: object
            anyOf:  # change back to oneOf? needs discriminator
              - $ref: '#/components/schemas/Thing'
              - $ref: '#/components/schemas/Location'
              - $ref: '#/components/schemas/HistoricalLocation'
              - $ref: '#/components/schemas/DataStream'
              - $ref: '#/components/schemas/Observation'
              - $ref: '#/components/schemas/ObservedProperty'
              - $ref: '#/components/schemas/Sensor'
              - $ref: '#/components/schemas/FeatureOfInterest'
              - $ref: '#/components/schemas/Collection'

    CollectionUpdate:
      description: |
        Relabel or index an entity collection

      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CollectionOptions'

    Asset:
      description: |
        Tell the server where to find the data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Asset'


  responses:

    Asset:
      description: |
        Description of the file
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Asset'

    Collection:
      description: |
        Description of the service and data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Collection'

    Entity:
      description: |
        Single entity
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/Thing'
              - $ref: '#/components/schemas/Location'
              - $ref: '#/components/schemas/HistoricalLocation'
              - $ref: '#/components/schemas/DataStream'
              - $ref: '#/components/schemas/Observation'
              - $ref: '#/components/schemas/ObservedProperty'
              - $ref: '#/components/schemas/Sensor'
              - $ref: '#/components/schemas/FeatureOfInterest'

    EntityCollection:
      description: |
        Collection of entities

      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EntityCollection'

    TokenResponse:
      description: Auth token
      content:
        application/json:
          schema:
            type: object
            properties:

              token:
                description: JWT Bearer token containing user ID
                type: string
                minLength: 127

              duration:
                type: integer
                description: JWT expiration interval in seconds
                default: 600
                minimum: 30
                maximum: 3600

    Message:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
                
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Not authorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:

    Agent:
      example:
        - name: Arthur Machen
        - name: Octavia Butler
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            entityClass:
              writeOnly: true
              enum: [thing]
              default: thing
            
    Asset:
      type: object

    CollectionOptions:
      allOf:
        - $ref: '#/components/schemas/Collection'
        - type: object
          properties:

            label:
              $ref: '#/components/schemas/EntityLabel'

            indexBy:
              type: string
              default: id
              enum:
                - id
                - location
                - ts
              description: |
                Node attribute to create an index on.


    EntityLabel:
      type: string
      enum:
        - Proxy
        - Buoy
        - Server
        - Metadata
        - File
        - Raw
      description: |
        Additional node labels that can be applied to entities, which have internal meaning.

  
    Message:
      type: object
      properties:
        message:
          type: string
          description: Status message

    Index:
      type: string
      description: Class name of entities to index.

    SecretKey:
      description: |
        Your secret key is used to encrypt traffic and private data, such as your login credentials. If you do not
        provide your own key, a default secret will be used. If you do provide a secret key, make sure to save it.
        It is not possible for us to recover data encrypted with a user secret.

      type: string

    Register:
      type: object
      properties:

        email:
          description: |
            Registration requires an e-mail that can be used to validate non-profit or educational affiliation.
          type: string

        password:
          description: |
            Password cannot be `password`, but there are no character limits otherwise.
            A compromised account will only expose your data and publicly available
            datasets. This is encrypted to prevent possible re-use across other services. Use a good random password.
          type: string
          minLength: 10
          maxLength: 128

        secret:
          $ref: '#/components/schemas/SecretKey'

    EntityCollection:
      allOf:
        - type: object
          properties:
            "@iot.count":
              type: integer
              minimum: 1
              maximum: 100
              description: Total number of records in the response
            value:
              type: array
              description: Array of response data
              items:
                oneOf:
                  - $ref: '#/components/schemas/Thing'
                  - $ref: '#/components/schemas/Location'
                  - $ref: '#/components/schemas/HistoricalLocation'
                  - $ref: '#/components/schemas/DataStream'
                  - $ref: '#/components/schemas/Observation'
                  - $ref: '#/components/schemas/ObservedProperty'
                  - $ref: '#/components/schemas/Sensor'
                  - $ref: '#/components/schemas/FeatureOfInterest'
        - $ref: '#/components/schemas/Collection'

    EntityClass:
      type: string
      enum:
        - DataStreams
        - FeaturesOfInterest
        - Locations
        - Observations
        - ObservedProperties
        - Sensors
        - Things
        - Collections
        - Actuators
        - TaskingCapabilities
        - Tasks

    Entity:
      type: object
      properties:

        id:
          type: integer
          readOnly: true
          description: |
            Unique integer identifier for entity. This usually auto-generated, but is different that the default node
            IDs within the Neo4j database, since those are not guaranteed to persist.

        name:
          type: string
          nullable: true
          description: |
            Human readable entity name for displaying data.

        description:
          type: string
          nullable: true
          description: |
            Short but useful explanation of what the entity is.

    FeatureOfInterest:
      example:
        - name: Gulf of Maine Mesh
        - name: Midcoast Maine Mesh
        - name: Damariscotta River Estuary shellfish growing area
          description: Traditional growing area for oysters in Maine.
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: |
            Features of interest are usually Locations

          properties:

            encodingType:
              type: string
              description: Identifier for parsing feature data

            feature:
              type: object
              description: Feature data

            Observations@iot.navigation:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object

    Thing:
      example:
        - name: Land Ocean Biogeochemical Observatory
          description: |
            Moored buoy deployment of the Sustainable Ecological Aquaculture Network
        - name: Landsat-7
          description: Satellite mission
        - name: Sealab
          properties:
            home: Farm
            capacity: 6
            icon: laboratory
        - name: R/V Lloigor
          properties:
            capacity: 2
            icon: boat
            meters:
              - name: starboard aft fuel
                value: 2
                max: 20
                high: 15
                low: 10
            
              - name: port aft fuel
                value: 12
                max: 20
                high: 15
                low: 10
            
              - name: starboard forward fuel
                value: 5.5
                max: 20
                high: 15
                low: 10
            
              - name: port forward fuel
                value: 15.5
                max: 20
                high: 15
                low: 10

      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: |
            A thing is an object of the physical or information world that is capable of of being identified
            and integrated into communication networks.

          properties:

            entityClass:
              writeOnly: true
              enum: [thing]
              default: thing

            properties:
              type: object
              description: Key-value properties

            HistoricalLocations@iot.navigation:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object

            Locations@iot.navigation:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object

            DataStreams@iot.navigation:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object


    LocationEncodingType:
      type: string
      enum:
        - "application/vnd.geo+json"
        - "application/vnd.network+json"
      default: "application/vnd.geo+json"
      description: The encoding rendered in the location response

    Location:
      example:
        - name: Fish Farm
          encodingType: application/json
          location:
            properties: 
              fictional: true
              icon: fish
        - name: Wharf
          encodingType: application/json
          location:
            properties:
              icon: wharf
              capacity: 4
              home: true
              fictional: true
        - Locations@iot.navigation:
            - name: [ Maine Loboviz Data ]
              props:
                node: 65
          name: Lower Damariscotta
          encodingType: application/vnd.geo+json
          location:
            type: Point
            coordinates: [43.93354, -69.58344]
        - Locations@iot.navigation:
            - name: [ Maine Loboviz Data ]
              props:
                node: 66
          name: Upper Damariscotta Estuary
          encodingType: application/vnd.geo+json
          description: Buoy deployment
          location:
            type: Point
            coordinates: [ 43.998178, -69.54253, 0.0 ]
        - Locations@iot.navigation:
            - name: [ Maine Loboviz Data ]
              props:
                node: 64
          name: Wood Island Harbor
          encodingType: application/vnd.geo+json
          location:
            type: Point
            coordinates: [ 43.456550, -70.344432 ]
        - Locations@iot.navigation:
            - name: [ Maine Loboviz Data ]
              props:
                node: 67

          name: Ram Island Saco Bay
          encodingType: application/vnd.geo+json
          location:
            type: Point
            coordinates: [ 43.465934, -70.359646 ]
        - Locations@iot.navigation:
            - name: [ Maine Loboviz Data ]
              props:
                node: 70
          name: Upper New Meadows
          encodingType: application/vnd.geo+json
          location:
            type: Point
            coordinates: [ 43.863669, -69.8984055 ]  # Bombazine
        - Locations@iot.navigation:
            - name: [ Maine Loboviz Data ]
              props:
                node: 71
          name: Lower New Meadows
          encodingType: application/vnd.geo+json
          location:
            type: Point
            coordinates: [ 43.77643055, -69.89196944 ]  # Sand Cove
        - Locations@iot.navigation:
            - name: [ Maine Loboviz Data ]
              props:
                node: 72
          name: Bagaduce River
          encodingType: application/vnd.geo+json
          location:
            type: Point
            coordinates: [ 44.40156667, -68.7738333 ]
        - Locations@iot.navigation:
            - name: [ Maine Loboviz Data ]
              props:
                node: 73
          name: Machias Bay
          encodingType: application/vnd.geo+json
          location:
            type: Point
            coordinates: [ 44.618517, -67.318033 ]
        - Locations@iot.navigation:
            - name: [ Maine Loboviz Data ]
              props:
                node: 74
          name: Cobscook Bay
          encodingType: application/vnd.geo+json
          location:
            type: Point
            coordinates: [ 44.8968, -67.0651 ]
        - Locations@iot.navigation:
            - name: [ Maine Loboviz Data ]
              props:
                node: 75
          Providers@iot.navigation:
            - label: Alias
              props:
                name: [ Passamaquoddy Bay ]
          name: Western Passage
          encodingType: application/vnd.geo+json
          location:
            type: Point
            coordinates: [ 44.92017, -66.995833 ]
        - Providers@iot.navigation:
            - domain: [ oceanics.io ]
          name: neo4j-local
          encodingType: application/vnd.network+json
          location:
            protocol: bolt
            host: localhost
            port: 7687
            connection:
              retries: 3
              delay: 1
            auth:
              basic: neo4j/neo4j
        - Providers@iot.navigation:
            - name: [ Public ]
              props:
                bucketName: oceanicsdotio
                readOnly: true
          name: Object Storage
          encodingType: application/vnd.network+json
          location:
            protocol: https
            host: nyc3.digitaloceanspaces.com
            port:
            connection:
              retries: 3
              delay: 1
            headers:
              x-amz-acl: public-read
              x-amz-meta-service: bathysphere
        - Providers@iot.navigation:
            - domain: [ oceanics.io ]
              props:
                bucketName: oceanicsdotio
                lockFile: lock.json
                indexFile: index.json
          name: Object Storage
          encodingType: application/vnd.network+json
          location:
            protocol: https
            host: nyc3.digitaloceanspaces.com
            port:
            connection:
              retries: 3
              delay: 1
            headers:
              x-amz-acl: private
              x-amz-meta-service: bathysphere
            auth:
              basic:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: |
            Last known location of a thing. May be a feature of interest, unless remote sensing.

          properties:

            entityClass:
              writeOnly: true
              enum: [location]
              default: location

            encodingType:
              $ref: '#/components/schemas/LocationEncodingType'

            location:
              type: object
              properties:
                type:
                  type: string
                  enum: ["Point", "Polygon"]
                coordinates:
                  type: array
                  minLength: 2
                  maxLength: 3
                  items:
                    type: number
                    format: float


            HistoricalLocations@iot.navigation:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object


            Things@iot.navigation:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object

    HistoricalLocation:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:

            entityClass:
              writeOnly: true
              enum: [HistoricalLocation]
              default: HistoricalLocation

            encodingType:
              $ref: '#/components/schemas/LocationEncodingType'

            time:
              type: string
              format: date-time
              description: Timestamp when the location was current

            Things@iot.navigation:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  minItems: 1
                  maxItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  minItems: 1
                  maxItems: 1
                  items:
                    type: object

            Locations@iot.navigation:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  minItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  minItems: 1
                  items:
                    type: object

    Sensor:
      example:
        - name: SeaBird Electronics CTD
          description: A common oceanographic sensing package
        - name: Chlorophyll fluorometer
          description: For measuring plankton stuff
        - name: OLI
          description: Operational Land Imager
          Things@iot.navigation:
            - name: [ "Landsat-7" ]
        - Things@iot.navigation:
            - name: [ Landsat-7 ]
          name: TIRS
          description: Thermal imaging radar on Landsat
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:

            entityClass:
              writeOnly: true
              type: string
              enum: [sensor]
              default: sensor

            encodingType:
              type: string
              enum: [application/pdf, "http://www.opengis.net/doc/IS/SensorML/2.0"]
              default: "http://www.opengis.net/doc/IS/SensorML/2.0"

            metadata:
              type: object

            DataStreams@iot.navigation:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object

    DataStream:
      example:
        - Things@iot.navigation:
            - name: [ Land Ocean Biogeochemical Observatory ]
          Sensors@iot.navigation:
            - name: [ SeaBird Electronics CTD ]
          ObservedProperties@iot.navigation:
            - name: [ temperature ]
          name: temperature
          description: An example synthetic temperature series
        - Things@iot.navigation:
            - name: [ Land Ocean Biogeochemical Observatory ]
          ObservedProperties@iot.navigation:
            - name: [ chlorophyll ]
          name: chlorophyll
          description: Just another chlorophyll series
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: |

            DataStreams are collections of `Observations` from the same `Sensor`.

          properties:

            entityClass:
              writeOnly: true
              type: string
              enum: [DataStream]
              default: DataStream

            unitOfMeasurement:
              type: object
              description: |
                Unified Code for Unit of Measure

              properties:
                name:
                  type: string
                  description: Name for matching and displaying

                symbol:
                  type: string
                  nullable: true
                  description: Abbreviation for the parameter

                definition:
                  type: string
                  nullable: true
                  description: A link to a formal definition

            observationType:
              type: string
              description: |
                Data model of child `Observations`. Usually a `Measurement`.

              nullable: true
              enum:
                - "OM_CategoryObservation"
                - "OM_CountObservation"
                - "OM_Measurement"
                - "OM_Observation"
                - "OM_TruthObservation"

            observedArea:
              type: object
              nullable: true
              readOnly: true
              description: |
                The bounding box that encloses all `FeaturesOfInterest` referenced by child `Observations`

            phenomenonTime:
              type: array
              description: |
                Time interval of the measured process, consisting of two ISO8601 timestamps.
              minItems: 2
              maxItems: 2
              items:
                type: string
                format: date-time

            resultTime:
              type: array
              description: |
                Time interval of receiving data, consisting of two ISO8601 timestamps. May be different than the
                measured process, due to batch uploads, latency, lack of real-time clocks in devices, etc.
              minItems: 2
              maxItems: 2
              items:
                type: string
                format: date-time

            table:
              type: string
              description: |
                Time series observations associated with a `DataStream` can be stored in the TimescaleDB.
                TimescaleDB is an extension of Postgres+Postgis, and this is SQL table reference to find and retrieve data.

            Observations@iot.navigation:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object

            ObservedProperties@iot.navigation:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  minItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  minItems: 1
                  items:
                    type: object

            Sensors@iot.navigation:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  minItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  minItems: 1
                  items:
                    type: object

            Things@iot.navigation:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  minItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  minItems: 1
                  items:
                    type: object


    Observation:
      example: 
        - Datastreams@iot.navigation:
            - name: [ temperature ]
          ts: 1000.234
          val: 10.0

        - Datastreams@iot.navigation:
            - name: [ temperature ]
          ts: 1100.194
          val: 11.7
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:

            resultTime:
              type: string
              format: date-time
              description: |
                Timestamp when the `Observation` was registered by the system.

            resultQuality:
              type: string
              description: |
                Quality of the result described as a `DQ_Element` (OGC)

            validTime:
              type: array
              description: Time interval when the result is valid
              minItems: 2
              maxItems: 2
              items:
                type: string
                format: date-time

            phenomenonTime:
              type: string
              format: date-time
              description: |
                Timestamp of the acquisition of the `Observation`

            result:
              description: The result of the observation. Usually a number.
              type: number
              format: float

            parameters:
              type: object
              description: Environmental conditions during the `Observation`

            DataStreams@iot.navigation:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  maxItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  maxItems: 1
                  items:
                    type: object

            FeaturesOfInterest@iot.navigation:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  maxItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  maxItems: 1
                  items:
                    type: object

    Task:
      example:
        - Locations@iot.navigation:
            - name: [Wharf]
          name: Do a thing
        - Locations@iot.navigation:
            - name: [Wharf]
          name: Fix me
        - Locations@iot.navigation:
            - name: [Farm]
          name: Harvest
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            Locations@iot.navigation:
              readOnly: true
              oneOf:
                - type: array
                  title: references or objects
                  maxItems: 1
                  items:
                    oneOf: 
                      - type: string
                      - type: object
            TaskingCapabilities@iot.navigation:
              readOnly: true
              oneOf:
                - type: array
                  title: references or objects
                  maxItems: 1
                  items:
                    oneOf: 
                      - type: string
                      - type: object
            
    ObservedProperty:
      example:
        - ObservedProperties@iot.navigation:
            - name: [ chlorophyll ]
          Providers@iot.navigation:
            - label: Alias
              props:
                name: [ cdom ]
          name: colored dissolved organic matter
        
        - ObservedProperties@iot.navigation:
            - name: [ conductivity ]
          Providers@iot.navigation:
            - label: Alias
              props:
                name: [ psu, sss, sal ]
          name: salinity
          description: Seawater salinity

        - Providers@iot.navigation:
            - label: Alias
              props:
                name: [ temp ]
          name: temperature
          description: Measured through a thermistor or remote sensing
      
        - Providers@iot.navigation:
            - label: Alias
              props:
                name: [ chl, chla, chl-a ]
          name: chlorophyll
          description: Measure of chlorophyll

        - name: oxygen
        - name: oxygen percent
        - name: transmission
        - name: oxygen saturation
        - name: conductivity

        - Providers@iot.navigation:
            - label: Alias
              props:
                name: [ par0plus, par0minus ]
          name: photosynthetically active radiation

        - ObservedProperties@iot.navigation:
            - name: [ transmission, cdom, cholorophyll ]
          name: turbidity

        - name: voltage
          description: Electrical voltage or sensor or power source

        - Providers@iot.navigation:
            - label: Alias
              props:
                name: [ uv, u, ww, omega, current_speed_cm, current_direction ]
          name: water velocity

      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            definition:
              type: string
              nullable: true
              description: Reference to resource that defines the property. We default to trying Wikipedia.

            DataStreams@iot.navigation:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  maxItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  maxItems: 1
                  items:
                    type: object

    Collection:
      title: stacCollection
      example:
        - name: Oysters
          description: Oyster data
          license:
          version: 1
          keywords: oysters,aquaculture,Maine,ShellSIM
        - name: Limited purpose aquaculture sites
          description: Temporary sites with a small footprint
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: |
            SpatioTemporal Asset Catalog object-linking collection object. Collections are generic, while some
            SensorThings entities are special Collections. For instance, a `DataStream` is a collection of
            `Observations`.

          properties:

            extent:
              $ref: '#/components/schemas/Extent'

    Extent:
      title: extent
      type: object
      readOnly: true
      nullable: true
      description: |

        Spatiotemporal extent of a data `Collection`. Contains a 2 or 3-D `spatial` extent, and a `temporal`
        interval.

      properties:

        spatial:
          type: array
          minLength: 4
          maxLength: 6
          items:
            type: number
            format: float

        temporal:
          type: string
          description: ISO format timestamp interval


    Provider:
      title: dataProvider
      example:
        - name: University of Maine
          description: Aquaculture research
          domain: maine.edu
        - name: Public
          description: Public Data Repository
        - name: Oceanicsdotio
          description: Research and development
          domain: oceanics.io
          owner: true
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: |
            Data providers are organizations or individuals that produce, process, host, or license data.

          properties:

            url:
              type: string
              description: URL to organization website

            roles:
              type: array
              description: |
                Data providers are labeled with a role, so that attribution and redaction works properly on synthesized
                datasets. Data in the system m
              items:
                title: providerRole
                type: string
                enum:
                  - licensor
                  - producer
                  - processor
                  - host


    Weight:
      description: |
        The total fresh product weight in grams. There are other conversions depending on your application case.

        Biogeochemical modelers are likely more interested in carbon and nutrient masses. This will apply best to products sold by weight like mussels.

      type: number
      format: float
      minimum: 0.0

    Error:
      type: object
      properties:
        message:
            type: string

    Configuration:
      type: object
      properties:

        self:
          type: string
          readOnly: true
          description: |
            Link back this the object

        metadata:
          type: object
          description: |
            Metadata for the configuration. Includes indexing and search data.
          properties:
            name:
              type: string
              maxLength: 50
              description: |
                A human readable name for the model configuration
            description:
              type: string
              description: |
                A short description to help understand the purpose of the simulation
            keywords:
              type: array
              nullable: true
              description: |
                You may optionally attach keywords to the configuration
              items:
                type: string
            license: 
              type: string
              default: proprietary
              description: |
                We need to know licensing restrictions to properly route your data.

        properties:
          type: object
          description: |
            When you configure a simulation, it will persist
            indefinitely. After the first production run it will be frozen. Future derived versions will be connected
            to preserve model provenance and intent.

          properties:

            workers:
              nullable: true
              description: | 
                Number of processes to use for Monte Carlo simulations.
              type: integer
              minimum: 1
              maximum: 4
              default: 1

            dt:
             
              description: |
                Time step in integer seconds. A one minute time step is probably unnecessary, unless you are validating/comparing a laboratory physiology study. Longer time steps may miss important tidal dynamics. 
                
                One hour is the recommended value, which is also a common sampling frequency for sensors deployed near growing areas (and therefore limits interpolation). 
                
                Integration is by Euler (`euler`) or Runge-Kutta (`rk`).

              type: integer
              minimum: 60
              maximum: 3600
              default: 3600

            integration:
              nullable: true
              description: |
                Integration is by Euler (`euler`) or Runge-Kutta 4th order (`rungeKutta`). Only `euler` is enabled.
              type: string
              enum: [euler]
              default: euler

            backend:
              nullable: true
              description: |
                There are several options for biological prediction. Your choice of backend will be based on your licenses
                and appetite for risk:
                * `shellsim` is available if you have licensed `ShellSIM` from Plymouth Marine Laboratory
                * `empirical` uses multiple linear regression and field data to drive growth predictions
                * `ensemble` uses mix of proprietary models and public data

                Only `ensemble` is enabled.

              type: string
              enum: [ensemble]
              default: ensemble

        experiments:

          description: |
            Collection of multi-simulation experiments produced by this model configuration
          type: array
          readOnly: true
          nullable: true
          items:
            type: string

    Experiment:
      title: time series
      type: object
      properties:

        data:

          type: array
          description: | 
            Result of the simulation.

          items:
            type: array
            items:

              type: object
              required:
                - time
                - weight
              properties:

                time:
                  description: |
                    Time in days. While computational time steps are usually hourly or shorter, the interval of interest for aquaculture is measured in days. 
                    
                    The internal clock uses integers to prevent numerical problems in long running simulations, but this is translated to decimal hours for calculating physiological rates.

                  type: number
                  format: float
                  minimum: 0.0

                weight:
                  $ref: "#/components/schemas/Weight"

                oxygenUptake:
                  nullable: true
                  description: |
                    Cumulative oxygen uptake. Metabolism removes oxygen from the water column. 
                    
                    If aeration does not exceed the rate of biological uptake (plus other processes), the water body will become hypoxic or anoxic.

                  type: number
                  format: float
                  minimum: 0.0

                chlorophyllUptake:
                  nullable: true
                  description: |
                    Filter feeding removes phytoplankton from the water column. Chlorophyll is a proxy for the productivity of the water body. 
                    
                    When there are too many shellfish in a semi-closed system, they can deplete available
                    food for conspecifics.

                  type: number
                  format: float
                  minimum: 0.0

                nitrogenUptake:
                  nullable: true
                  description: |
                    Filter feeding moves nitrogen from the environment into tissue.
                  type: number
                  format: float
                  minimum: 0.0

                nitrogenExcretion:
                  nullable: true
                  description: |
                    Shellfish excrete nitrogen through membrane transfer.

                  type: number
                  format: float
                  minimum: 0.0

                ammoniaLoss:
                  nullable: true
                  description: |
                    Ammonia is released to the environment as waste. This can stimulate the growth of plankton.

                  type: number
                  format: float
                  minimum: 0.0

                deposition:
                  nullable: true
                  description: |
                    Shellfish are widely considered beneficial to water quality. However, they can concentrate biological material into feces and pseudofeces. 
                    
                    These particulate forms sink more quickly, and may settle in mats either under the culture area, or downstream.
                    
                    Decomposition can lead to sediment and bottom water hypoxia.
                  type: number
                  format: float
                  minimum: 0.0

        workers:
          type: integer
          description: | 
            Parallelism used, multiplies execution time for calculating billable compute time.

        configuration:
          type: string
          format: url
          description: | 
            Link to the model configuration that the result derives
            from.
        
        start:
          type: number
          format: float
          description: |
            Start time

        finish:
          type: number
          format: float
          description: | 
            Time that the backend processes completes

        forcing:
          type: array
          description: |
            Forcing data used as input to the model

        self:
          type: string
          format: url
          description: |
            Link back to this asset
