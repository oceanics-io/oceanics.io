import { useMemo, useEffect, useCallback } from "react";
import useWorker from "../../hooks/useWorker";
/**
 * Types generated by WasmBindGen
 */
 import type { Memo } from "oceanics-io-www-wasm";
 export type ModuleType = typeof import("oceanics-io-www-wasm");

interface IMemoCache {
  documents: Memo[]
}

// This has to be defined in global scope to force Webpack to bundle the script. 
const createWorker = () => 
  new Worker(new URL("../workers/memo.worker.ts", import.meta.url), { type: 'module' })

/**
 * 
 * @param documents 
 * @returns 
 */
const useMemoCache = ({documents}: IMemoCache) => {

  const worker = useWorker(createWorker);
  const listener = useCallback(
    ({ type }: { type: string }) => {
      if (type !== "status") return;
    },
    []
  );

  useEffect(() => {
    if (!worker.ref.current) return;
    worker.ref.current.addEventListener("message", listener, { passive: true });
    worker.ref.current.postMessage({
      type: "start"
    });
    return () => {
      worker.ref.current?.removeEventListener("message", listener);
      worker.ref.current?.terminate();
    };
  }, [worker.ref.current]);

  const deserialized = useMemo(() => {
    return documents.map((doc) => new Memo(doc.metadata, doc.content, doc.slug));
  }, []);

  return deserialized;
};

export default useMemoCache;
