openapi: "3.0.0"

info:

  title: "Bathysphere API"
  version: "1.4"
  description: |

    The Bathysphere API is a distributed store and registry for public and proprietary geospatial data.
    The system is designed to support aquaculture research in the Gulf of Maine, but can be configured and extended for other applications.
    It uses best-in-class technology to ingest sensor and model data and metadata, and automatically parse them into discoverable databases.

    The representation of complex relationships between heterogenous data is simplified by applying a graph framework,
    backed by a [Neo4j](https://neo4j.com/) graph database cluster to store semi-structured data,
    along with labeled relationships. This approach can be applied to many flexible, high-level cases,
    from NASA managing their [lessons-learned](https://neo4j.com/blog/nasa-lesson-learned-database-using-neo4j-linkurious/)
    mission database, to modeling a virtual [economy](https://www.airpair.com/neo4j/posts/modelling-game-economy-with-neo4j).

    Bathypshere uses an OpenFaaS cluster for asynchoronous processing, and to securely access external data sources.
    Direct access can be provided for use in third-party services by request. These are described in the
    `FUNCTIONS` section.

    You probably have to share data anyway. Our middleware can enhance your data science and management experience by
    providing representation state transfer (REST) and graph-based services for:

    - Secure organizational accounts
    - Open Geospatial Consortium (OGC) SensorThings standard
    - [SpatioTemporal Assets Catalog](https://stacspec.org/) (STAC) standard
    - Provenance tracking
    - Granular access control and auditing


    By assessing availability over the whole domain, projects can target resources to fill coverage gaps. This supports
    an open marketplace data sharing model, which may be preferable to redundant collection.

  contact:
    name: Oceanicsdotio
    url: http://www.oceanics.io
    email: business@oceanics.io

  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

  x-logo:
    url: bathysphere.png

externalDocs:

  description: See the bathysphere_functions_repository for more information
  url: https://bitbucket.org/aquaculture/bathysphere

x-tagGroups:

  - name: BATHYSPHERE API
    tags: [ Account, Catalog, Topology ]

  - name: FUNCTIONS
    tags: [ Admin ]

  - name: NERITICS
    tags: [ ML ]

tags:

  - name: Account
    x-displayName: Analysis
    description: |
      If you have an e-mail address associated with an organization known to us, you can register to use the
      database and serives. Please review security and privacy information before uploading any proprietary data.

  - name: Catalog
    x-displayName: Catalog
    description: |
      Access data through the entity catalog interface. These are your generic CRUD operations.

  - name: Topology
    x-displayName: Topology
    description: |
      Build topological relationships and access metadata.

  - name: Admin
    x-displayName: Admin
    description: |
      Manage you account stuff. Delete it if you want.

  - name: ML
    x-displayName: ML
    description: |
      The machine learning service implements multivariate time series prediction using recurrent neural networks with
      long short-term memory. The backend is `Keras` and `TensorFlow`.


servers:
- url: https://graph.oceanics.io/api
  description: Oceanicsdotio

paths:

  /auth:

    post:
      tags: [Account]
      operationId: bathysphere.graph.handlers.register
      summary: Register
      description: |

        Register an e-mail address to get access to development API. Accounts are for development and testing purposes
        only. We won't share your contact information, but we do reserve the right to analyze and profile your use of
        our infrastructure, as well as monitor unencrypted traffic.

        Please contact us if you are interested in a dedicated database instance, or long-term multi-tenancy
        hosting.

      requestBody:
        $ref: '#/components/requestBodies/Register'

      responses:
        '200':
          $ref: '#/components/responses/TokenResponse'
        '400':
          $ref: '#/components/responses/BadRequest'


    get:
      tags: [Account]
      operationId: bathysphere.graph.handlers.token
      summary: Token
      description: |

        Exchange token or email and password for a Javascript Web Token. This will allow you make API calls and use
        graphical interfaces for a fixed period of time. If you have previously provided a secret, it will be required
        here to authenticate login and hash the token.

      parameters:
        - name: secret
          in: query
          schema:
            $ref: '#/components/schemas/SecretKey'

      responses:
        '200':
          $ref: '#/components/responses/TokenResponse'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [Account]
      operationId: bathysphere.graph.handlers.manage
      summary: Manage
      description: |

        Change e-mail address or password.

      requestBody:
        $ref: '#/components/requestBodies/Register'

      responses:
        '200':
          $ref: '#/components/responses/TokenResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /:

    get:
      tags: [Catalog]
      operationId: bathysphere.graph.handlers.catalog
      summary: Catalog
      description: |
        Get all entity types in database as collections following the SpatioTemporal Asset Catalog specification

      parameters:

        - name: asset
          in: query
          schema:
            type: string
            default: index

        - name: extension
          description: |
            Any entity can be linked topologically to any other entity, but generally
            these are grouped in functional sets by application area:
            * `sensing` implements Open Geospatial Consortium SensorThings specification (part 1),
            and has models relevant to operating and getting data from sensor networks.
            * `tasking` builds off of the SensorThings specification part 2.
            * `mesh` implements structures for spatial simulations.

          in: query
          schema:
            type: string
            enum: [sensing, mesh, tasking, admin, catalog]

      responses:
        '200':
          description: Catalog
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'

  /{entity}:

    post:
      tags: [Catalog]
      operationId: bathysphere.graph.handlers.create
      summary: Create
      description: |
        Create a new entity.

      parameters:
        - $ref: "#/components/parameters/entityClass"

      requestBody:
        $ref: '#/components/requestBodies/Entity'

      responses:
        '200':
          $ref: '#/components/responses/Entity'
        '400':
          $ref: '#/components/responses/BadRequest'

    get:
      tags: [Catalog]
      operationId: bathysphere.graph.handlers.collection
      summary: Collection
      description: |
        Get all entities of one type

      parameters:
        - $ref: "#/components/parameters/entityClass"

      responses:
        '200':
          $ref: '#/components/responses/EntityCollection'
        '404':
          $ref: '#/components/responses/NotFound'


  /{entity}({id}):

    get:
      tags: [Catalog]
      operationId: bathysphere.graph.handlers.metadata
      summary: Metadata
      description: |
        Get entity

      parameters:
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"

      responses:
        '200':
          $ref: '#/components/responses/Entity'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [ Catalog ]
      operationId: bathysphere.graph.handlers.mutate
      summary: Update
      description: Update entity
      requestBody:
        $ref: '#/components/requestBodies/Entity'

      parameters:
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"

      responses:
        '200':
          $ref: '#/components/responses/Entity'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [ Catalog ]
      operationId: bathysphere.graph.handlers.delete
      summary: Delete
      description: Delete entity and orphans recursively.
      parameters:
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"

      responses:
        '204':
          description: No content
        '404':
          $ref: '#/components/responses/NotFound'

        
  /{root}({rootId})/{entity}:

    get:
      tags: [ Topology ]
      operationId: bathysphere.graph.handlers.query
      summary: Query
      description: |
        Get related entities

      parameters:
        - $ref: "#/components/parameters/root"
        - $ref: "#/components/parameters/rootId"
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/label"

      responses:
        '200':
          $ref: '#/components/responses/EntityCollection'
        '400':
          $ref: '#/components/responses/BadRequest'


  /{root}({rootId})/{entity}({id}):

    post:
      tags: [ Topology ]
      operationId: bathysphere.graph.handlers.join
      summary: Join
      description: Create a labeled relationship between entities.
      parameters:
        - $ref: "#/components/parameters/root"
        - $ref: "#/components/parameters/rootId"
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"
        - $ref: "#/components/parameters/label"

      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'

    delete:
      tags: [Topology]
      operationId: bathysphere.graph.handlers.drop
      summary: Drop
      description: |
        Remove a labeled relationship between entities. If no `label` is specified, remove all
        relationships between the entities.

      parameters:
        - $ref: "#/components/parameters/root"
        - $ref: "#/components/parameters/rootId"
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"
        - $ref: "#/components/parameters/label"

      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'

#
#  /bathysphere_functions_archive:
#
#    post:
#      tags: [ Admin ]
#      summary: Archive
#      description: Index an external data or storage system
#
#      responses:
#        '200':
#          description: Success
#
#  /buoys:
#
#    post:
#      tags: [ IoT ]
#      summary: Buoys
#      description: |
#
#        Access third-party bathysphere_functions_buoy data.
#
#        In the simplest case this is a client for Satlantic LOBOviz servers. Because data is logged hourly,
#        the newest is also the number of hours previous to return.
#        The most recent measurement becomes available about 30 minutes after it is collected.
#
#        The user may only request data for a single bathysphere_functions_buoy at a time,
#        each of which has a unique integer identifier, `node = "node=66"`.
#
#        Omitting this, requesting multiple buoys, or using the nodes parameter—which LOBOVIZ plots rely on will result in an error.
#
#        Data fields are returned as columns in the order they are requested, according to a comma-separated expression.
#        The options for variables include those in the table below.
#
#        **Table 2. Well-known parameters**
#
#        | Name                | Unit    | Description                                                  | Source |
#        | ------------------- | ------- | ------------------------------------------------------------ | ------ |
#        | `cdom`              |         | Colored dissolved organic matter                             | SEANET |
#        | `chlorophyll`       |         | Chlorophyll-a fluoresence                                    | SEANET |
#        | `conductivity`      |         | Conductivity                                                 | SEANET |
#        | `current_direction` | degrees | Angle of current relative to true North                      | SEANET |
#        | `current_speed_cm`  | cm/s    | Speed of water relative to platform                          | SEANET |
#        | `depth`             | meters  | Depth of the pressure sensor for interpreting other observations | SEANET |
#        | `oxygen`            |         | Dissolved oxygen                                             | SEANET |
#        | `nitrate`           |         | Nitrate                                                      | SEANET |
#        | `oxygen_sat`        |         | Oxygen saturation                                            | SEANET |
#        | `oxygen_percent`    | %       | Oxygen percent saturation                                    | SEANET |
#        | `par0minus`         |         | Photosynthetically active radiation below water              | SEANET |
#        | `par0plus`          |         | Photosynthetically active radiation above water              | SEANET |
#        | `salinity`          | psu     | Salinity                                                     | SEANET |
#        | `temperature`       | deg C   | Temperature                                                  | SEANET |
#        | `transmission`      |         | Optical transmission of water                                | SEANET |
#        | `turbidity`         | NTU     | Turbidity                                                    | SEANET |
#
#
#        You cannot query latitude, longitude, or battery voltage.
#        Specifying no valid fields will return just temperature.
#        Specifying an invalid field will not return an error,
#        meaning that you’ll have to incorporate your own error handling—though the bathysphere_functions_buoy
#        configurations are unlikely to change.
#
#        The final parameter is `data_format=text`.
#        This is outputs pure text, as would be displayed in a web browser.
#        The date-time column is `YYYY–MM–DD HH:MM:SS`. The date and time a separated by a single space,
#        while columns are tab-delimited. If omitted, the response will be a file. Depending on your usage,
#        these may be identical.
#
#        The node is translated to a sensible name, and there is limited auto-correct that will sometimes
#        forgive you for guessing the field name.
#
#
#        **Table. Status Options**
#
#        | Heading                                                      |         Auth         | Description                                                  | Path      | Query        | Tokens        |
#        | :----------------------------------------------------------- | :------------------: | :----------------------------------------------------------- | --------- | ------------ | ------------- |
#        | [Configuration]() | Yes | Node and parameter definitions.                              | `Things`  | `GET`        | `$events`     |
#        | [Data age]() | Yes | Data ages                                                    | `Things`  | `GET`        | `$statistics` |
#        | [Schedules]()              | Yes | Browse schedule files                                        | `Things`  | `GET`        | `$schedule`   |
#        | [System logs]()              | Yes | E-mail and processing logs                                   | `Things`  | `GET`        | `$logs`       |
#        | [XML]()                 | Yes | Instrument configuration files                               | `Sensors` | `GET`        | `$config`     |
#        | [XML Sensors]() | Yes | Sites and frames                                             | `Sensors` | `GET`        | —             |
#        | [Check schedule files]() | Yes | Check file for errors in browser.<br /><br />Notes: We check files automatically during upload. | `Things`  | `POST` `PUT` | `$schedule`   |
#
#        **Table 4. Data**
#
#        | Heading                                             |         Auth         | Description                                  | Path     | Query | Tokens        |
#        | :-------------------------------------------------- | :------------------: | :------------------------------------------- | -------- | ----- | ------------- |
#        | [Archive]()        | Yes | Raw data (`.raw`) and log (`.raw.txt`) files | `Things` | `GET` | `$bathysphere_functions_archive`    |
#        | [Info]() |                      | Summary table with site, first, last, total  | `Things` | `GET` | `$statistics` |
#        | [Pending]()           | Yes | Files waiting to be processed                | `Things` | `GET` | `$pending`    |
#        | [Recent-Raw]()  | Yes | Daily raw text                               | `Things` | `GET` | `$recent`     |
#
#        **Table 5. Management**
#
#        | Heading       | Auth | Description     | Equivalent | Query |  |
#        | :----------- | :--: | :------------------------------------ | ------------------------------------- | ------------------------------------- | ------------------------------------- |
#        | [Event settings]() | Yes | Settings for events, e-mail contacts.    | `Things` | `PUT` | `$events` |
#        | [Hide bad events]() | Yes | Hide or show values for one site, any number of variables, on a single day for some number of hours. | `Datastreams` | `PUT` | `$mask` |
#        | [Modify sensor values]() | Yes | Apply correction to database values for calibration change. <br /><br />Notes: Our implementation is algorithmic instead of manual. | `Datastreams` | `PUT` | `$resample` |
#        | [Remove sensor values]() | Yes | Delete database values outside nominal range, but not raw data. <br /><br />Note: We mask instead of delete. Using `GET` will transform and return the data without persisting the change. | `Datastreams` | `PUT` `GET` | `$mask` |
#        | [Schedule upload]() | Yes | Upload acquisition schedule files for StorX. | `Things` | `POST` | `$schedule` |
#        | [Instrument swaps]() | Yes | Move instruments between sites, and view move history | `Sensors` | `PUT` `GET` | `$swap` |
#        | [Instrument XML upload]() | Yes | Upload XML/sensor file for use with swapping function | `Sensors` | `POST` `PUT` | `$config` |
#        | [Calibration values]() | Yes | Modify existing XML file with new calibrations | `Sensors` | `POST` `PUT` `GET` | `$calibrate` |
#        **Table 6. Graphing**
#
#        | Heading | Auth | Description | Path | Query | Parameter |
#        | :-- | :-- | --- | :-- | --- | --- |
#        | [Averages]() |  |One sensor, one site, one averaging window (d/w/m/y), for any date range. |`Datastreams` |`GET` |`$resample` `$bathysphere_functions_image` |
#        | [By year]() |  | One variable, overlapping years. Replace with Julian day. | `Datastreams` | `GET` | `$bathysphere_functions_image` `$wrap` |
#        | [Non-public](protected/) | Yes |Includes extra y-variables for diagnostic |`Datastreams` |`GET` |`$bathysphere_functions_image` |
#        |[Peaks]() |Yes | Min and max values and the date of occurance, for single site. | `Datastreams` | `GET` | `$statistics` |
#        |[Year background]() | | Display single variable for year against daily min/max for multiple other years. <br /><br />Note: Replaced with daily moving average and envelope of other sites. | `Datastreams` | `GET` | `$bathysphere_functions_image` `$wrap` `$resample` `$statistics` |
#
#
#      parameters:
#        - $ref: "#/components/parameters/HMAC"
#
#      requestBody:
#
#        description: Buoy data
#        content:
#          application/json:
#            schema:
#              type: object
#              description: Buoys function request
#              properties:
#                interval:
#                  type: array
#                  minItems: 2
#                  maxItems: 2
#                  items:
#                    type: string
#                    format: date
#                limit:
#                  type: integer
#                  description: |
#                    Number of records to retrieve, from today or the end of `interval`.
#                encoding:
#                  type: string
#                  description: Return data as CSV text or as JSON
#                  enum: [ txt, json ]
#                  default: txt
#                id:
#                  type: integer
#                  description: The identity of the bathysphere_functions_buoy, known to the external server
#                observedProperties:
#                  type: array
#                  minItems: 1
#                  items:
#                    type: string
#
#      responses:
#        '202':
#          description: Async response
#
#        '200':
#          description: Buoy data
#          content:
#            application/json:
#              schema:
#                type: object
#                description: Buoys data
#                properties:
#                  name:
#                    type: string
#                  aliases:
#                    type: array
#                    items:
#                      type: string
#                  values:
#                    type: array
#                    items:
#                      type: object
#
#  /bathysphere_functions_cache:
#
#    post:
#      tags: [ Storage ]
#      summary: Cache
#      description: Redis integration
#
#      responses:
#        '200':
#          description: Success
#
#  /bathysphere_functions_controller:
#
#    post:
#      tags: [ IoT ]
#      summary: Controller
#      description: Deploy control loops
#
#
#      responses:
#        '200':
#          description: Success
#  /bathysphere_functions_image:
#
#    post:
#
#      tags: [ Analysis ]
#      summary: Image
#      description: |
#        Create PNG images from data sources and references and bathysphere_functions_cache it.
#        The service call methods from the `matplotlib` library,
#        which uses the anti-grain graphics backend (`AGG`). The images are portable network graphics (`.png`)
#        by default, but `.pdf` and `.tiff` are available for print media.
#
#      parameters:
#        - $ref: "#/components/parameters/HMAC"
#
#      requestBody:
#
#        description: Image request
#        content:
#          application/json:
#            schema:
#              type: object
#              description: Buoys function request
#              properties:
#                labels:
#                  type: object
#                  nullable: true
#                  properties:
#                    x:
#                      type: string
#                      nullable: true
#                    y:
#                      type: string
#                      nullable: true
#
#                style:
#                  type: object
#                  nullable: true
#                  description: |
#                    Style is used change the appearance of the rendered bathysphere_functions_image.
#
#                  properties:
#
#                    template:
#                      type: string
#                      enum: [dark, light]
#                      default: dark
#                      description: |
#                        Select between light and dark templates depending on whether the bathysphere_functions_image is intended for display
#                        on a screen or for printed media.
#
#                    bg:
#                      type: string
#                      default: black
#                      description: |
#                        Override the default background color for the chosen or default template. Dark themes have a `black`
#                        background by default, and light themes have a `white` background. Use this to match the background
#                        color when embedding in a web page. This can also be transparent for bathysphere_functions_image compositing.
#
#                    contrast:
#                      type: string
#                      default: white
#                      description: |
#                        Contrast color for rendering over background.
#
#                    flag:
#                      type: string
#                      default: red
#                      description: |
#                        Highlight color for marking selected or masked data.
#
#                    label:
#                      type: string
#                      description: |
#                        Color for text and labels. The default is the same as the `contrast` color.
#
#                    dpi:
#                      type: integer
#                      default: 150
#                      minimum: 90
#                      maximum: 300
#                      description: |
#                        Image resolution. Be careful, `dpi=300` images can be very large.
#
#                    format:
#                      type: string
#                      enum: [png, pdf, tiff]
#                      default: png
#                      description: |
#                        Image file format. Only `png` is available through the API.
#
#                    alpha:
#                      type: number
#                      format: float
#                      default: 1.0
#                      maximum: 1.0
#                      minimum: 0.0
#                      description: |
#                        Transparency of drawn objects. Useful for rendering Monte Carlo simulations.
#
#                    padding:
#                      type: array
#                      minLength: 4
#                      maxLength: 4
#                      items:
#                        type: number
#                        format: float
#                      default: [0.1, 0.2, 0.05, 0.1]
#                      description: |
#                        Content padding from edges of bathysphere_functions_image to make room for labels and title.
#
#                    marker:
#                      type: integer
#                      default: 1
#                      description: |
#                        Size of markers if rendering scatter plots or points on a map
#
#                    font:
#                      type: integer
#                      default: 10
#                      description: |
#                        Font size
#
#                    text:
#                      type: number
#                      format: float
#                      default: 1.0
#                      description: |
#                        Size of labels relative to font size.
#
#                    width:
#                      type: number
#                      format: float
#                      default: 6.5
#                      description: |
#                        Width of bathysphere_functions_image in inches
#
#                    height:
#                      type: number
#                      format: float
#                      description: |
#                        Height of bathysphere_functions_image in inches
#
#                data:
#                  title: data container
#                  type: object
#
#                view:
#                  type: string
#                  description: The type of data view
#                  enum: [series, coverage, frequency, scatter]
#
#                extent:
#                  title: extent
#                  type: object
#                  readOnly: true
#                  nullable: true
#                  description: |
#
#                    Spatiotemporal extent of a data `Collection`. Contains a 2 or 3-D `spatial` extent, and a `temporal`
#                    interval.
#
#                  properties:
#
#                    spatial:
#                      type: array
#                      minLength: 4
#                      maxLength: 6
#                      items:
#                        type: number
#                        format: float
#
#                    temporal:
#                      type: string
#                      description: ISO format timestamp interval
#                args:
#                  title: arguments
#                  type: object
#                  nullable: true
#
#      responses:
#
#        '202':
#          description: Accepted
#
#        '403':
#          description: Unauthorized
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  Error:
#                    type: string
#                    example: HMAC validation
#
#        '400':
#          description: Bad request
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  Error:
#                    type: string
#                    example: Requires POST with payload
#
#        '200':
#          description: Image reference
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  uui:
#                    type: string
#                    format: uuid
#                  objectName:
#                    type: string
#                    example: example.png
#                  url:
#                    type: string
#                    format: uri
#                    example: https://data.oceanics.io/example.png
#
#  /bathysphere_functions_notify:
#
#    post:
#      tags: [ Admin ]
#      summary: Notify
#      description: Send notification by e-mail or Slack
#
#      responses:
#        '200':
#          description: Success
#
#  /bathysphere_functions_parse:
#
#    post:
#      tags: [ Analysis ]
#      summary: Parse
#      description: Heuristic XML/JSON parser
#
#      responses:
#        '200':
#          description: Success
#
#  /bathysphere_functions_postgres:
#
#    post:
#      tags: [ Storage ]
#      summary: Postgres
#      description: Postgres and PostGIS integration
#
#      requestBody:
#        description: Unauthorized
#        content:
#          application/json:
#            schema:
#              type: object
#              properties:
#                data:
#                  type: object
#                  nullable: true
#                  description: Data to ingest
#
#                encoding:
#                  type: string
#                  enum: [ json, txt ]
#                  default: json
#                  description: Encoding of result
#
#                streaming:
#                  type: boolean
#                  description: Stream the records
#                  default: false
#                table:
#                  type: string
#                fields:
#                  type: array
#                  items:
#                    type: string
#                limit:
#                  type: integer
#                  default: 100
#                order:
#                  type: string
#                  default: DESC
#                conditions:
#                  type: array
#                  items:
#                    type: str
#
#      responses:
#
#        '202':
#          description: Accepted
#
#        '200':
#          description: Records
#          content:
#            application/json:
#              schema:
#                type: array
#                items:
#                  type: object
#                  description: Parsed data record
#
#        '403':
#          description: Unauthorized
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  Error:
#                    type: string
#                    example: HMAC validation
#
#        '400':
#          description: Bad request
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  Error:
#                    type: string
#                    example: Requires POST with payload
#
#  /bathysphere_functions_repository:
#
#    post:
#      tags: [ Storage ]
#      summary: Repository
#      description: S3 object storage integration
#
#      responses:
#        '200':
#          description: Success


  /lstm/{cache}:

    post:
      tags: [ML]
      operationId: goodbuoy_ml.create_keras_lstm
      summary: Initialize model
      description: |

        Create and initialize a recurrent neural network with long short-term memory.

      parameters:
        - $ref: "#/components/parameters/Cache"

      responses:
        '200':
          $ref: '#/components/responses/Message'

  /lstm/{cache}/{object}:

    put:
      tags: [ML]
      operationId: goodbuoy_ml.train_keras_lstm
      summary: Train model
      description: |

        Feed training data to the neural network.

      requestBody:
        $ref: "#/components/requestBodies/TrainRequest"

      parameters:
        - $ref: "#/components/parameters/Cache"
        - $ref: "#/components/parameters/ObjectKey"
        - $ref: "#/components/parameters/Epochs"

      responses:
        '200':
          $ref: '#/components/responses/Message'
        '404':
          $ref: '#/components/responses/NotFound'

    get:
      tags: [ ML ]
      operationId: goodbuoy_ml.predict_keras_lstm
      summary: Predict
      description: |

        Get a prediction from the neural network.

      parameters:
        - $ref: "#/components/parameters/Cache"
        - $ref: "#/components/parameters/ObjectKey"

      responses:
        '200':
          $ref: '#/components/responses/Prediction'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [ ML ]
      summary: Destroy model
      description: |

        Destroy the model state.

      parameters:
        - $ref: "#/components/parameters/Cache"
        - $ref: "#/components/parameters/ObjectKey"

      responses:
        '200':
          $ref: '#/components/responses/Message'
        '404':
          $ref: '#/components/responses/NotFound'

  /kde/{cache}:

    post:
      tags: [ ML ]
      # operationId: goodbuoy_ml.routes.points.create
      summary: Create training points
      description: |
        Upload a collection of points for training a kernel density estimator

      parameters:
        - $ref: "#/components/parameters/Cache"

      responses:
        '200':
          $ref: '#/components/responses/Message'

  /kde/{cache}/{object}:

    get:
      tags: [ML]
      operationId: goodbuoy_ml.routes.
      summary: Predict
      description: |

        Get a prediction from the neural network.

      parameters:
        - $ref: "#/components/parameters/Cache"
        - $ref: "#/components/parameters/ObjectKey"

      responses:
        '200':
          $ref: '#/components/responses/Prediction'
        '404':
          $ref: '#/components/responses/NotFound'


components:

  parameters:


    dt:
      in: query
      name: dt
      description: Timestep, integer seconds
      schema:
        type: integer
        minimum: 60
        maximum: 3600

    bandwidth:
      in: query
      name: bandwidth
      description: |
        Width of convolution filter signal in terms of existing sample points. This assumes that the signal
        discretization has even intervals, and no missing values.

      schema:
        type: integer
        default: 1

    lowpass:
      in: query
      name: lowpass
      description: High-frequency cutoff in Hz
      schema:
        type: number
        format: foat

    highpass:
      in: query
      name: highpass
      description: Low-frequency cutoff in Hz
      schema:
        type: number
        format: foat

    fill:
      in: query
      name: fill
      description: Forward fill missing values
      schema:
        type: boolean

    compress:
      in: query
      name: compress
      description: |

        Remove negative symmetry after transformation to frequency domain. The original or filtered signal can be
        reconstituted from the positive frequencies only. More efficient if performing many operations during signal
        processing, or saving frequency spectrum itself.

      schema:
        type: boolean
        default: true

    start:
      in: query
      name: start
      description: Datetime to apply as a start
      schema:
        type: string

    observations:
      in: query
      name: observations
      description: Total number of observations to produce
      schema:
        type: int

    method:
      in: query
      name: method
      description: Interpolation method
      schema:
        type: string
        enum:
          - forward
          - back
          - interp

    dimension:
      in: query
      name: dimension
      description: Filter by y-value or time derivative
      schema:
        type: string
        enum:
          - simple
          - time

    convolutionMode:
      in: query
      name: convolutionMode
      description: |

        Determines the length of the resulting series. Mode "full" returns points of overlap, with size (N+M-1).
        Boundary/edge effects will be retained. Mode "same" will have the same length as the input series. Mode "valid"
        returns points where signals overlap, and will eliminate edges effects, but will have a different size than the
        input series.

      schema:
        type: string
        default: same
        enum:
          - full
          - same
          - valid

    max:
      in: query
      name: max
      description: Maximum to mask out or clamp
      schema:
        type: number
        format: float

    min:
      in: query
      name: min
      description: Minmum to mask out or clamp
      schema:
        type: number
        format: foat

    threshold:
      in: query
      name: threshold
      description: Number of standard deviations in masking envelope
      schema:
        type: number
        format: foat

    ObjectKey:
      name: objectKey
      in: path
      description: |

        Object string is used to load the neural network state into memory. If combined with,

      schema:
        type: string

    Cache:
      name: cache
      in: path
      description: |

        Cache destination string, routed by the service. The `state` route indicates that the model state should
        be stored inside the application container, which will force the container to persist until destroyed.

      schema:
        type: string
        default: state
        enum: [state, redis]

    Socket:
      name: socket
      in: query
      description: |

        Open socket interactive/streaming mode. Not implemented.

      schema:
        type: bool
        default: false

    Epochs:
      name: epochs
      in: query
      description: |

        Number of training epochs.

      schema:
        type: integer
        minimum: 1
        maximum: 10

    HMAC:
      name: hmac
      description: |
        Hash-based message authentication code (HMAC) used to validate content and authenticity
        of requests.

      in: header
      schema:
        type: string
        example: "hmac=sd76sd0s98sdf09"

    collection:
      required: true
      name: collection
      in: path
      schema:
        type: string

    root:
      in: path
      required: true
      name: root
      description: |
        The class name of the root or parent entity that the request object is associated with. During a `GET` request
        this will be used to collect child entities based on graph relationship. For `PUT` and `POST` requests this
        and the child entities will be linked with a labeled relationship.

      schema:
        type: string

    rootId:
      in: path
      required: true
      name: rootId
      description: |
        Unique integer identifier of the parent entity.
      schema:
        type: integer

    entityClass:
      in: path
      required: true
      name: entity
      description: |
        Name of the entity model to create or fetch.

      schema:
        type: string
        enum:
          - Datastreams
          - Observations
          - HistoricalLocations
          - Locations
          - Sensors
          - Things
          - ObservedProperties
          - Tasks
          - Actuators
          - TaskingCapabilities
          - FeaturesOfInterest
          - Collections

    entityId:
      in: path
      required: true
      name: id
      description: |
        Unique integer identifier of the resource to be retrieved.
      schema:
        type: integer


    label:
      in: query
      name: label
      description: |
        Should be in format `LABEL`, although this is not strictly necessary. Labeled relationships
        are used to crawl over the graph.
      schema:
        type: string


  requestBodies:

    Register:
      description: |
        Request is e-mail and password, plus an optional secret key for encrypting password and data.
        Note that if you lose the secret key, you will lose access to data.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Register'

    Collection:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Collection'

    Entity:
      description: |
        Entity
      content:
        application/json:
          schema:
            type: object
            oneOf:
              - $ref: '#/components/schemas/Thing'
              - $ref: '#/components/schemas/Location'
              - $ref: '#/components/schemas/HistoricalLocation'
              - $ref: '#/components/schemas/Datastream'
              - $ref: '#/components/schemas/Observation'
              - $ref: '#/components/schemas/ObservedProperty'
              - $ref: '#/components/schemas/Sensor'
              - $ref: '#/components/schemas/FeatureOfInterest'
              - $ref: '#/components/schemas/Collection'

    CollectionUpdate:
      description: |
        Relabel or index an entity collection

      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CollectionOptions'

    Asset:
      description: |
        Tell the server where to find the data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Asset'

    TrainRequest:
      description: Training data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TrainSchema'

    CreateRequest:
      description: Initialization data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateSchema'

  responses:

    Asset:
      description: |
        Description of the file
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Asset'

    Collection:
      description: |
        Description of the service and data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Collection'

    Entity:
      description: |
        Single entity
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/Thing'
              - $ref: '#/components/schemas/Location'
              - $ref: '#/components/schemas/HistoricalLocation'
              - $ref: '#/components/schemas/Datastream'
              - $ref: '#/components/schemas/Observation'
              - $ref: '#/components/schemas/ObservedProperty'
              - $ref: '#/components/schemas/Sensor'
              - $ref: '#/components/schemas/FeatureOfInterest'

    EntityCollection:
      description: |
        Collection of entities

      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EntityCollection'

    TokenResponse:
      description: Auth token
      content:
        application/json:
          schema:
            type: object
            properties:

              token:
                description: JWT Bearer token containing user ID
                type: string
                minLength: 127

              duration:
                type: integer
                description: JWT expiration interval in seconds
                default: 600
                minimum: 30
                maximum: 3600

    Message:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
         
    Prediction:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Prediction'
                
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:


    Asset:
      type: object

    CollectionOptions:
      allOf:
        - $ref: '#/components/schemas/Collection'
        - type: object
          properties:

            label:
              $ref: '#/components/schemas/EntityLabel'

            indexBy:
              type: string
              default: id
              enum:
                - id
                - location
                - ts
              description: |
                Node attribute to create an index on.


    EntityLabel:
      type: string
      enum:
        - Proxy
        - Buoy
        - Server
        - Metadata
        - File
        - Raw
      description: |
        Additional node labels that can be applied to entities, which have internal meaning.

    Error:
      type: object
      properties:
        message:
          type: string
          description: Error message

    Message:
      type: object
      properties:
        message:
          type: string
          description: Status message

    Index:
      type: string
      description: Class name of entities to index.

    SecretKey:
      description: |
        Your secret key is used to encrypt traffic and private data, such as your login credentials. If you do not
        provide your own key, a default secret will be used. If you do provide a secret key, make sure to save it.
        It is not possible for us to recover data encrypted with a user secret.

      type: string

    Register:
      type: object
      properties:

        email:
          description: |
            Registration requires an e-mail that can be used to validate non-profit or educational affiliation.
          type: string

        password:
          description: |
            Password cannot be `password`, but there are no character limits otherwise.
            A compromised account will only expose your data and publicly available
            datasets. This is encrypted to prevent possible re-use across other services. Use a good random password.
          type: string
          minLength: 10
          maxLength: 128

        secret:
          $ref: '#/components/schemas/SecretKey'

    EntityCollection:
      allOf:
        - type: object
          properties:
            "@iot.count":
              type: integer
              minimum: 1
              maximum: 100
              description: Total number of records in the response

            value:
              type: array
              description: Array of response data
              items:
                oneOf:
                  - $ref: '#/components/schemas/Thing'
                  - $ref: '#/components/schemas/Location'
                  - $ref: '#/components/schemas/HistoricalLocation'
                  - $ref: '#/components/schemas/Datastream'
                  - $ref: '#/components/schemas/Observation'
                  - $ref: '#/components/schemas/ObservedProperty'
                  - $ref: '#/components/schemas/Sensor'
                  - $ref: '#/components/schemas/FeatureOfInterest'
        - $ref: '#/components/schemas/Collection'

    EntityClass:
      type: string
      enum:
        - Datastreams
        - FeaturesOfInterest
        - Locations
        - Observations
        - ObservedProperties
        - Sensors
        - Things
        - Collections
        - Actuators
        - TaskingCapabilities
        - Tasks

    Entity:
      type: object
      properties:

        id:
          type: integer
          readOnly: true
          description: |
            Unique integer identifier for entity. This usually auto-generated, but is different that the default node
            IDs within the Neo4j database, since those are not guarenteed to persist.

        name:
          type: string
          nullable: true
          description: |
            Human readable entity name for displaying data.

        description:
          type: string
          nullable: true
          description: |
            Short but useful explaination of what the entity is.

    FeatureOfInterest:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: |
            Features of interest are usually Locations

          properties:

            encodingType:
              type: string
              description: Identifier for parsing feature data

            feature:
              type: object
              description: Feature data

            Observations:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object

    Thing:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: |
            A thing is an object of the physical or information world that is capable of of being identified
            and integrated into communication networks.

          properties:

            entityClass:
              writeOnly: true
              enum: [thing]
              default: thing

            properties:
              type: object
              description: Key-value properties

            HistoricalLocations:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object

            Locations:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object

            Datastreams:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object


    LocationEncodingType:
      type: string
      enum: ["application/vnd.geo+json"]
      default: "application/vnd.geo+json"
      description: The encoding rendered in the location response

    Location:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: |
            Last known location of a thing. May be a feature of interest, unless remote sensing.

          properties:

            entityClass:
              writeOnly: true
              enum: [location]
              default: location

            encodingType:
              $ref: '#/components/schemas/LocationEncodingType'

            location:
              type: object
              properties:
                type:
                  type: string
                  default: "Point"
                  enum: ["Point"]
                coordinates:
                  type: array
                  minLength: 2
                  maxLength: 3
                  items:
                    type: number
                    format: float


            HistoricalLocations:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object


            Things:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object

    HistoricalLocation:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:

            entityClass:
              writeOnly: true
              enum: [historicalLocation]
              default: historicalLocation

            encodingType:
              $ref: '#/components/schemas/LocationEncodingType'

            time:
              type: string
              format: date-time
              description: Timestamp when the location was current

            Things:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  minItems: 1
                  maxItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  minItems: 1
                  maxItems: 1
                  items:
                    type: object

            Locations:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  minItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  minItems: 1
                  items:
                    type: object

    Sensor:

      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:

            entityClass:
              writeOnly: true
              type: string
              enum: [sensor]
              default: sensor

            encodingType:
              type: string
              enum: [application/pdf, "http://www.opengis.net/doc/IS/SensorML/2.0"]
              default: "http://www.opengis.net/doc/IS/SensorML/2.0"

            metadata:
              type: object

            Datastreams:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object

    Datastream:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: |

            Datastreams are collections of `Observations` from the same `Sensor`.

          properties:

            entityClass:
              writeOnly: true
              type: string
              enum: [datastream]
              default: datastream

            unitOfMeasurement:
              type: object
              description: |
                Unified Code for Unit of Measure

              properties:
                name:
                  type: string
                  description: Name for matching and displaying

                symbol:
                  type: string
                  nullable: true
                  description: Abbreviation for the parameter

                definition:
                  type: string
                  nullable: true
                  description: A link to a formal definition

            observationType:
              type: string
              description: |
                Data model of child `Observations`. Usually a `Measurement`.

              nullable: true
              enum:
                - "OM_CategoryObservation"
                - "OM_CountObservation"
                - "OM_Measurement"
                - "OM_Observation"
                - "OM_TruthObservation"

            observedArea:
              type: object
              nullable: true
              readOnly: true
              description: |
                The bounding box that encloses all `FeaturesOfInterest` referenced by child `Observations`

            phenomenonTime:
              type: array
              description: |
                Time interval of the measured process, consisting of two ISO8601 timestamps.
              minItems: 2
              maxItems: 2
              items:
                type: string
                format: date-time

            resultTime:
              type: array
              description: |
                Time interval of receiving data, consisting of two ISO8601 timestamps. May be different than the
                measured process, due to batch uploads, latency, lack of real-time clocks in devices, etc.
              minItems: 2
              maxItems: 2
              items:
                type: string
                format: date-time

            table:
              type: string
              description: |
                Time series observations associated with a datastream can be stored in the TimescaleDB.
                TimescaleDB is an extension of Postgres+Postgis, and this is SQL table reference to find and
                retrieve data.


            Observations:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object

            ObservedProperties:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  minItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  minItems: 1
                  items:
                    type: object

            Sensors:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  minItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  minItems: 1
                  items:
                    type: object

            Things:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  minItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  minItems: 1
                  items:
                    type: object


    Observation:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:

            resultTime:
              type: string
              format: date-time
              description: |
                Timestamp when the `Observation` was registered by the system.

            resultQuality:
              type: string
              description: |
                Quality of the result described as a `DQ_Element` (OGC)

            validTime:
              type: array
              description: Time interval when the result is valid
              minItems: 2
              maxItems: 2
              items:
                type: string
                format: date-time

            phenomenonTime:
              type: string
              format: date-time
              description: |
                Timestamp of the acquisition of the `Observation`

            result:
              description: The result of the observation. Usually a number.
              type: number
              format: float

            parameters:
              type: object
              description: Environmental conditions during the `Observation`

            Datastreams:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  maxItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  maxItems: 1
                  items:
                    type: object

            FeaturesOfInterest:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  maxItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  maxItems: 1
                  items:
                    type: object

    ObservedProperty:

      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            definition:
              type: string
              nullable: true
              description: Reference to resource that defines the property. We default to trying Wikipedia.

            Datastreams:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  maxItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  maxItems: 1
                  items:
                    type: object

    Collection:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: |
            SpatioTemporal Asset Catalog object-linking collection object. Collections are generic, while some
            SensorThings entities are special Collections. For instance, a `Datastream` is a collection of
            `Observations`.

          properties:

            extent:
              $ref: '#/components/schemas/Extent'

    Extent:
      title: extent
      type: object
      readOnly: true
      nullable: true
      description: |

        Spatiotemporal extent of a data `Collection`. Contains a 2 or 3-D `spatial` extent, and a `temporal`
        interval.

      properties:

        spatial:
          type: array
          minLength: 4
          maxLength: 6
          items:
            type: number
            format: float

        temporal:
          type: string
          description: ISO format timestamp interval


    Provider:
      title: dataProvider
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: |
            Data providers are organizations or individuals that produce, process, host, or license data.

          properties:

            url:
              type: string
              description: URL to organization website

            roles:
              type: array
              description: |
                Data providers are labeled with a role, so that attribution and redaction works properly on synthesized
                datasets. Data in the system m
              items:
                title: providerRole
                type: string
                enum:
                  - licensor
                  - producer
                  - processor
                  - host

    Prediction:
      type: object
      properties:
        - name: count
          type: integer
        - $ref: '#/components/schemas/Datastream'

    TrainSchema:
      type: object
      properties:
        $ref: '#/components/schemas/Datastream'

    CreateSchema:
      type: object

    Time:
      type: number

    Value:
      type: number

    Periods:
      name: periods
      type: int
      minimum: 1
      maximum: 1000
      default: 1000

    Horizon:
      name: horizon
      description: |
        Sequence length the LSTM is trained on for each output point

      type: int
      minimum: 1
      maximum: 4
      default: 1

    Window:
      name: window
      description: |
        Number of observations in moving window for calculating the expected value from input datastream.

      type: int
      minimum: 1
      default: 2

    Ratio:
      name: ratio
      description: |
        Fraction of observations to use for training. The rest are left for validation.
      type: number
      format: float
      default: 0.8