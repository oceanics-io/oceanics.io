openapi: "3.0.0"

info:
  title: "Bathysphere - Graph API"
  version: "0.1"
  description: |

    The Graph API extension provides a web service for controlling the graph database backend. This enables topology for
    data models, in which graph nodes are generic entities. Schemas are only enforced by API specification validation.
    Heavy lifting for big data structures is delegated to optimized databases, while provenance tracking and
    permissions are handled in the graph layer.

    The service implements combines [SpatioTemporal Assets Catalog](https://stacspec.org/) (STAC)
    and Open Geospatial Consortium (OGC) SensorThings API specifications to provide domain-specific topologies
    for sensor networks, scientific meshes, control systems, and user authentication/permissioning.

    See our [repository](https://bitbucket.org/aquaculture/bathysphere-graph) for more information on getting started.

  contact:
    name: Oceanicsdotio
    url: http://www.oceanics.io
    email: aquaculture@oceanics.io

  license:
    name: MIT
    url: https://opensource.org/licenses/MIT


paths:

  /auth:

    post:
      tags: [Account]
      operationId: bathysphere_graph.handlers.register
      summary: Create account
      description: |

        Register an e-mail address to get access to development API. Accounts are for development and testing purposes
        only. We won't share your contact information, but we do reserve the right to analyze and profile your use of
        our infrastructure, as well as monitor unencrypted traffic.

        Please contact us if you are interested in a dedicated database instance, or long-term multi-tenancy
        hosting.

      requestBody:
        $ref: '#/components/requestBodies/Register'

      responses:
        '200':
          $ref: '#/components/responses/TokenResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

    get:
      tags: [Account]
      operationId: bathysphere_graph.handlers.get_token
      summary: Get JWT token
      description: |

        Exchange token or email and password for a Javascript Web Token. This will allow you make API calls and use
        graphical interfaces for a fixed period of time. If you have previously provided a secret, it will be required
        here to authenticate login and hash the token.

      parameters:
        - name: secret
          in: query
          schema:
            $ref: '#/components/schemas/SecretKey'

      responses:
        '200':
          $ref: '#/components/responses/TokenResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  /:

    get:
      tags: [Collection]
      operationId: bathysphere_graph.handlers.get_sets
      summary: Fetch classes
      description: |

        Get all entity type in database. Any entity can be linked topologically to any other entity, but generally
        these are grouped in functional sets by application area.

        * `catalog` implements the SpatioTemporal Asset Catalog specification.

        * `sensing` implements Open Geospatial Consortium SensorThings specification (part 1),
        and has models relevant to operating and getting data from sensor networks.

        * `tasking` builds off of the SensorThings specification part 2.

        * `mesh` implements structures for spatial simulations.

      parameters:
        - name: extension
          in: query
          schema:
            type: string
            enum: [sensing, mesh, tasking, catalog]
            default: sensing

      responses:
        '200':
          $ref: '#/components/responses/Message'
        '404':
          $ref: '#/components/responses/NotFound'

  /{entity}:

    post:
      tags: [Entity]
      operationId: bathysphere_graph.handlers.create_entity
      summary: Create
      description: |
        Create a new entity.

      parameters:
        - $ref: "#/components/parameters/entityClass"

      requestBody:
        $ref: '#/components/requestBodies/Entity'

      responses:
        '200':
          $ref: '#/components/responses/Entity'
        '400':
          $ref: '#/components/responses/BadRequest'

    put:
      tags: [Collection]
      operationId: bathysphere_graph.handlers.update_collection
      summary: Update collection
      description: |

        Update the collection. This can include re-labeling the nodes, or applying an index.

      requestBody:
        $ref: '#/components/requestBodies/CollectionUpdate'

      parameters:
        - $ref: "#/components/parameters/entityClass"

      responses:
        '204':
          description: No content
        '400':
          $ref: '#/components/responses/BadRequest'

    get:
      tags: [Collection]
      operationId: bathysphere_graph.handlers.get_all
      summary: Fetch by class
      description: |
        Get all entities of one type

      parameters:
        - $ref: "#/components/parameters/entityClass"

      responses:
        '200':
          $ref: '#/components/responses/EntityCollection'
        '404':
          $ref: '#/components/responses/NotFound'

  /{entity}({id}):

    get:
      tags: [Entity]
      operationId: bathysphere_graph.handlers.get_by_id
      summary: Fetch by ID
      description: |
        Get entity

      parameters:
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"

      responses:
        '200':
          $ref: '#/components/responses/Entity'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [Entity]
      operationId: bathysphere_graph.handlers.update
      summary: Update
      description: |

        Update entity

      requestBody:
        $ref: '#/components/requestBodies/Entity'

      parameters:
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"

      responses:
        '200':
          $ref: '#/components/responses/Entity'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [Entity]
      operationId: bathysphere_graph.handlers.delete
      summary: Delete entity and children
      description: |
        Delete recusively.

      parameters:
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"

      responses:
        '204':
          description: No content
        '404':
          $ref: '#/components/responses/NotFound'


  /{root}({rootId})/{entity}:

    post:
      tags: [Entity]
      operationId: bathysphere_graph.handlers.create_entity_as_child
      summary: Create
      description: |
        Create a new entity.

      parameters:
        - $ref: "#/components/parameters/root"
        - $ref: "#/components/parameters/rootId"
        - $ref: "#/components/parameters/entityClass"

      requestBody:
        $ref: '#/components/requestBodies/Entity'

      responses:
        '200':
          $ref: '#/components/responses/Entity'
        '400':
          $ref: '#/components/responses/BadRequest'


  /{root}({rootId})/{entity}({id}):

    post:
      tags: [Entity]
      operationId: bathysphere_graph.handlers.add_link
      summary: Link
      description: |
        Create a labeled relationship between entities.

      parameters:
        - $ref: "#/components/parameters/root"
        - $ref: "#/components/parameters/rootId"
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"

      requestBody:
        $ref: '#/components/requestBodies/AddLink'

      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'


components:

  parameters:

    root:
      in: path
      required: true
      name: root
      description: |
        The class name of the root or parent entity that the request object is associated with. During a `GET` request
        this will be used to collect child entities based on graph relationship. For `PUT` and `POST` requests this
        and the child entities will be linked with a labeled relationship.

      schema:
        type: string

    rootId:
      in: path
      required: true
      name: rootId
      description: |
        Unique integer identifier of the parent entity.
      schema:
        type: integer

    entityClass:
      in: path
      required: true
      name: entity
      description: |
        Name of the entity model to create or fetch.

      schema:
        type: string

    entityId:
      in: path
      required: true
      name: id
      description: |
        Unique integer identifier of the resource to be retrieved.
      schema:
        type: integer

  requestBodies:

    Register:
      description: |
        Request is e-mail and password, plus an optional secret key for encrypting password and data.
        Note that if you lose the secret key, you will lose access to data.

      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Register'

    Entity:
      description: |
        Entity

      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Entity'

    AddLink:
      description: |
        Manually connect two entities with a labeled relationship
      content:
        application/json:
          schema:
            type: object
            properties:
              label:
                type: string
                description: |
                  Should be in format `LABEL`, although this is not strictly necessary. Labeled relationships
                  are used to crawl over the graph.


    CollectionUpdate:
      description: |
        Relabel or index an entity collection

      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CollectionOptions'


  responses:

    EntityCollection:
      description: |
        Collection of entities

      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EntityCollection'

    Entity:
      description: |
        Single entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Entity'

    TokenResponse:
      description: Auth token
      content:
        application/json:
          schema:
            type: object
            properties:

              token:
                description: JWT Bearer token containing user ID
                type: string
                minLength: 127

              duration:
                type: integer
                description: JWT expiration interval in seconds
                default: 600
                minimum: 30
                maximum: 3600

    Message:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'

    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:

    CollectionOptions:
      type: object
      properties:

        label:
          $ref: '#/components/schemas/EntityLabel'

        indexBy:
          type: string
          default: id
          enum:
            - id
            - location
            - ts
          description: |
            Node attribute to create an index on.


    EntityLabel:
      type: string
      enum:
        - Proxy
        - Buoy
        - Server
        - Metadata
        - File
        - Raw
      description: |
        Additional node labels that can be applied to entities, which have internal meaning.

    Error:
      type: object
      properties:
        message:
          type: string
          description: Error message

    Message:
      type: object
      properties:
        message:
          type: string
          description: Status message

    Index:
      type: string
      description: Class name of entities to index.

    SecretKey:
      description: |
        Your secret key is used to encrypt traffic and private data, such as your login credentials. If you do not
        provide your own key, a default secret will be used. If you do provide a secret key, make sure to save it.
        It is not possible for us to recover data encrypted with a user secret.

      type: string

    Register:
      type: object
      properties:

        email:
          description: |
            Registration requires an e-mail that can be used to validate non-profit or educational affiliation.
          type: string

        password:
          description: |
            Password cannot be `password`, but there are no character limits otherwise.
            A compromised account will only expose your data and publicly available
            datasets. This is encrypted to prevent possible re-use across other services. Use a good random password.
          type: string
          minLength: 10
          maxLength: 128

        secret:
          $ref: '#/components/schemas/SecretKey'

    EntityCollection:
      type: object
      properties:
        "@iot.count":
          type: integer
          minimum: 1
          maximum: 100
          description: Total number of records in the response

        value:
          type: array
          description: Array of response data
          items:
            $ref: '#/components/schemas/Entity'

    EntityClass:
      type: string
      enum:
        - Datastreams
        - FeaturesOfInterest
        - Locations
        - Observations
        - ObservedProperties
        - Sensors
        - Things
        - Collections
        - Catalogs
        - Providers
        - Nodes
        - Cells
        - Mesh
        - Actuators
        - TaskingCapabilities
        - Tasks

    Entity:
      type: object
      required: [entityClass]
      properties:

        id:
          type: integer
          description: |
            Unique integer identifier for entity. This usually auto-generated, but is different that the default node
            IDs within the Neo4j database, since those are not guarenteed to persist.

        name:
          type: string
          description: |
            Human readable entity name for displaying data.

        description:
          type: string
          description: |
            Short but useful explaination of what the entity is.

        entityClass:
          type: string
          description: |
            String to help discriminator.

      discriminator:
        propertyName: entityClass
        mapping:
          Datastream: '#/components/schemas/Datastream'
          FeatureOfInterest: '#/components/schemas/FeatureOfInterest'
          Location: '#/components/schemas/Location'
          HistoricalLocation: '#/components/schemas/HistoricalLocation'
          Observation: '#/components/schemas/Observation'
          ObservedProperty: '#/components/schemas/ObservedProperty'
          Sensor: '#/components/schemas/Sensor'
          Thing: '#/components/schemas/Thing'
          Collection: '#/components/schemas/Collection'
          Catalog: '#/components/schemas/Catalog'

    FeatureOfInterest:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: |
            Features of interest are usually Locations

          properties:

            encodingType:
              type: string
              description: Identifier for parsing feature data

            feature:
              type: object
              description: Feature data


    Thing:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: |
            A thing is an object of the physical or information world that is capable of of being identified
            and integrated into communication networks.
          properties:
            properties:
              type: object
              description: Key-value properties

    LocationEncodingType:
      type: string
      enum: ["application/vnd.geo+json"]
      default: "application/vnd.geo+json"
      description: The encoding rendered in the location response

    Location:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: |
            Last known location of a thing. May be a feature of interest, unless remote sensing.

          properties:
            encodingType:
              $ref: '#/components/schemas/LocationEncodingType'


    HistoricalLocation:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            encodingType:
              $ref: '#/components/schemas/LocationEncodingType'

            time:
              type: string
              description: Timestamp when the location was current

    Sensor:

      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:

            encodingType:
              type: string
              enum: [application/pdf, "http://www.opengis.net/doc/IS/SensorML/2.0"]
              default: "http://www.opengis.net/doc/IS/SensorML/2.0"

            metadata:
              type: object


    Datastream:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:

            unitOfMeasurement:
              type: object
              properties:
                name:
                  type: string
                  description: Name for matching and displaying
                symbol:
                  type: string
                  description: Abbreviation for the parameter
                definition:
                  type: string
                  description: A link to a formal definition

            observationType:
              type: string

            observedArea:
              type: object
              description: |
                Boundary geometry, GeoJSON polygon

            phenomenonTime:
              type: array
              description: |
                Time interval of the measured process, consisting of two ISO8601 timestamps.
              items:
                type: string

            resultTime:
              type: array
              description: |
                Time interval of receiving data, consisting of two ISO8601 timestamps. May be different than the
                measured process, due to batch uploads, latency, lack of real-time clocks in devices, etc.

              items:
                type: string

            timescale:
              type: string
              description: |
                Time series observations associated with a datastream can be stored in the TimescaleDB.
                TimescaleDB is an extension of Postgres+Postgis, and this is SQL table reference to find and
                retrieve data.

    Observation:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:

            resultTime:
              type: string

            resultQuality:
              type: string

            validTime:
              type: array
              description: time interval, ISO8601
              items:
                type: string

            phenomenonTime:
              type: string

            result:
              description: The result of the observation. Usually a number.
              type: number
              format: float


    ObservedProperty:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            definition:
              type: string

    Catalog:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: |
            SpatioTemporal Asset Catalog catalog linking object.
          properties:

            title:
              type: string

    Collection:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: |
            SpatioTemporal Asset Catalog object-linking collection object.
          properties:

            extent:
              $ref: '#/components/schemas/Extent'

            license:
              type: string

            version:
              type: string

            keywords:
              type: array
              items:
                type: string

            providers:
              type: array
              items:
                $ref: '#/components/schemas/Provider'

    Extent:
      type: object
      properties:
        spatial:
          type: array
          minLength: 4
          maxLength: 6
          items:
            type: number
            format: float

        temporal:
          type: string
          description: ISO format timestamp interval


    Provider:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            url:
              type: string
              description: URL to organization website

            roles:
              $ref: '#/components/schemas/ProviderRoles'

    ProviderRoles:
      type: array
      items:
        $ref: '#/components/schemas/ProviderRole'

    ProviderRole:
      type: string
      enum:
        - licensor
        - producer
        - processor
        - host
