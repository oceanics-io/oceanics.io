openapi: "3.0.0"

info:

  title: "Bathysphere API"
  version: "1.6"
  description: |

    The Bathysphere API is a distributed store and registry for public and proprietary geospatial data.
    The system is designed to support aquaculture research in the Gulf of Maine, but can be configured and extended for other applications.
    It uses best-in-class technology to ingest sensor and model data and metadata, and automatically parse them into discoverable databases.

    The representation of complex relationships between heterogenous data is simplified by applying a graph framework,
    backed by a [Neo4j](https://neo4j.com/) graph database cluster to store semi-structured data,
    along with labeled relationships. This approach can be applied to many flexible, high-level cases,
    from NASA managing their [lessons-learned](https://neo4j.com/blog/nasa-lesson-learned-database-using-neo4j-linkurious/)
    mission database, to modeling a virtual [economy](https://www.airpair.com/neo4j/posts/modelling-game-economy-with-neo4j).

    You probably have to share data anyway. Our middleware can enhance your data science and management experience by
    providing representation state transfer (REST) and graph-based services for:

    - Secure organizational accounts
    - Open Geospatial Consortium (OGC) SensorThings standard
    - [SpatioTemporal Assets Catalog](https://stacspec.org/) (STAC) standard
    - Provenance tracking
    - Granular access control and auditing

    By assessing availability over the whole domain, projects can target resources to fill coverage gaps. This supports
    an open marketplace data sharing model, which may be preferable to redundant collection.

  contact:
    name: Oceanicsdotio
    url: http://www.oceanics.io
    email: business@oceanics.io

  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

  x-logo:
    url: bathysphere.png

externalDocs:

  description: See the `bathysphere` repository for more information
  url: https://github.com/oceanicsdotio/bathysphere

x-tagGroups:

  - name: BATHYSPHERE API
    tags: [ Account, Catalog, Topology ]

tags:

  - name: Account
    x-displayName: Account
    description: |
      If you have an e-mail address associated with an organization known to us, you can register to use the
      database and serives. Please review security and privacy information before uploading any proprietary data.

  - name: Catalog
    x-displayName: Catalog
    description: |
      Access data through the entity catalog interface. These are your generic CRUD operations.

  - name: Topology
    x-displayName: Topology
    description: |
      Build topological relationships and access metadata.


servers:
- url: https://graph.oceanics.io/{basePath}
  description: Production API server
  variables:
    basePath:
      default: api

paths:

  /auth:

    post:
      tags: [ Account ]
      operationId: bathysphere.functions.register
      summary: Register
      description: |

        Register an e-mail address to get access to development API. Accounts are for development and testing purposes
        only. We won't share your contact information, but we do reserve the right to analyze and profile your use of
        our infrastructure, as well as monitor unencrypted traffic.

        Please contact us if you are interested in a dedicated database instance, or long-term multi-tenancy
        hosting.

      requestBody:
        $ref: '#/components/requestBodies/Register'

      responses:
        '200':
          $ref: '#/components/responses/TokenResponse'
        '400':
          $ref: '#/components/responses/BadRequest'


    get:
      tags: [ Account ]
      operationId: bathysphere.functions.token
      summary: Token
      description: |

        Exchange token or email and password for a Javascript Web Token. This will allow you make API calls and use
        graphical interfaces for a fixed period of time. If you have previously provided a secret, it will be required
        here to authenticate login and hash the token.

      parameters:
        - name: secret
          in: query
          schema:
            $ref: '#/components/schemas/SecretKey'

      responses:
        '200':
          $ref: '#/components/responses/TokenResponse'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [Account]
      operationId: bathysphere.functions.manage
      summary: Manage
      description: |

        Change e-mail address or password.

      requestBody:
        $ref: '#/components/requestBodies/Register'

      responses:
        '200':
          $ref: '#/components/responses/TokenResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      
  /:

    get:
      tags: [Catalog]
      operationId: bathysphere.functions.catalog
      summary: Catalog
      description: |
        Get all entity types in database as collections following the SpatioTemporal Asset Catalog specification

      parameters:

        - name: asset
          in: query
          schema:
            type: string
            default: index

        - name: extension
          description: |
            Any entity can be linked topologically to any other entity, but generally
            these are grouped in functional sets by application area:
            * `sensing` implements Open Geospatial Consortium SensorThings specification (part 1),
            and has models relevant to operating and getting data from sensor networks.
            * `tasking` builds off of the SensorThings specification part 2.
            * `mesh` implements structures for spatial simulations.

          in: query
          schema:
            type: string
            enum: [sensing, mesh, tasking, admin, catalog]

      responses:
        '200':
          description: Catalog
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'

  /{entity}:

    post:
      tags: [Catalog]
      operationId: bathysphere.functions.create
      summary: Create
      description: |
        Create a new entity.
      parameters:
        - $ref: "#/components/parameters/entityClass"
      requestBody:
        $ref: '#/components/requestBodies/Entity'
      responses:
        '200':
          $ref: '#/components/responses/Entity'
        '400':
          $ref: '#/components/responses/BadRequest'

    get:
      tags: [Catalog]
      operationId: bathysphere.functions.collection
      summary: Collection
      description: |
        Get all entities of one type

      parameters:
        - $ref: "#/components/parameters/entityClass"

      responses:
        '200':
          $ref: '#/components/responses/EntityCollection'
        '404':
          $ref: '#/components/responses/NotFound'


  /{entity}({uuid}):

    get:
      tags: [Catalog]
      operationId: bathysphere.functions.metadata
      summary: Metadata
      description: |
        Get entity

      parameters:
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"

      responses:
        '200':
          $ref: '#/components/responses/Entity'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [ Catalog ]
      operationId: bathysphere.functions.mutate
      summary: Update
      description: Update entity
      requestBody:
        $ref: '#/components/requestBodies/Entity'

      parameters:
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"

      responses:
        '200':
          $ref: '#/components/responses/Entity'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [ Catalog ]
      operationId: bathysphere.functions.delete
      summary: Delete
      description: Delete entity and orphans recursively.
      parameters:
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"

      responses:
        '204':
          description: No content
        '404':
          $ref: '#/components/responses/NotFound'

        
  /{root}({rootId})/{entity}:

    get:
      tags: [ Topology ]
      operationId: bathysphere.functions.query
      summary: Query
      description: |
        Get related entities

      parameters:
        - $ref: "#/components/parameters/root"
        - $ref: "#/components/parameters/rootId"
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/label"

      responses:
        '200':
          $ref: '#/components/responses/EntityCollection'
        '400':
          $ref: '#/components/responses/BadRequest'


  /{root}({rootId})/{entity}({uuid}):

    post:

      tags: [ Topology ]
      operationId: bathysphere.functions.join
      summary: Join
      description: Create a labeled relationship between entities.
      parameters:
        - $ref: "#/components/parameters/root"
        - $ref: "#/components/parameters/rootId"
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"
        - $ref: "#/components/parameters/label"

      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'

    delete:
      tags: [Topology]
      operationId: bathysphere.functions.drop
      summary: Drop
      description: |
        Remove a labeled relationship between entities. If no `label` is specified, remove all
        relationships between the entities.

      parameters:
        - $ref: "#/components/parameters/root"
        - $ref: "#/components/parameters/rootId"
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"
        - $ref: "#/components/parameters/label"

      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'


components:

  parameters:

    root:
      in: path
      required: true
      name: root
      description: |
        The class name of the root or parent entity that the request object is associated with. During a `GET` request
        this will be used to collect child entities based on graph relationship. For `PUT` and `POST` requests this
        and the child entities will be linked with a labeled relationship.

      schema:
        type: string

    rootId:
      in: path
      required: true
      name: rootId
      description: |
        Unique integer identifier of the parent entity.
      schema:
        type: string

    entityClass:
      in: path
      required: true
      name: entity
      description: |
        Name of the entity model to create or fetch.

      schema:
        type: string
        enum:
          - Datastreams
          - Observations
          - HistoricalLocations
          - Locations
          - Sensors
          - Things
          - ObservedProperties
          - Tasks
          - Actuators
          - TaskingCapabilities
          - FeaturesOfInterest
          - Collections

    entityId:
      in: path
      required: true
      name: uuid
      description: |
        Unique identifier of the resource to be retrieved.
      schema:
        type: string


    label:
      in: query
      name: label
      description: |
        Should be in format `LABEL`, although this is not strictly necessary. Labeled relationships
        are used to crawl over the graph.
      schema:
        type: string


    ObjectKey:
      in: path
      name: objectKey
      required: true
      description: UUID of experiment data
      schema:
        type: string

    ThingId:
      in: path
      name: thingId
      required: true
      description: Unique identifier of the object to copy.
      schema:
        type: integer
        minimum: 0

    configId:
      in: query
      name: configId
      description: |
        A reference to a model configuration can be used instead of supplying values for `runs`, `workers`, `dt`, and
        `days`.
      schema:
        type: integer


  requestBodies:

    Register:
      description: |
        Request is e-mail and password, plus an optional secret key for encrypting password and data.
        Note that if you lose the secret key, you will lose access to data.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Register'

    Collection:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Collection'

    Entity:
      description: |
        Entity
      content:
        application/json:
          schema:
            type: object
            anyOf:  # change back to oneOf? needs discriminator
              - $ref: '#/components/schemas/Thing'
              - $ref: '#/components/schemas/Location'
              - $ref: '#/components/schemas/HistoricalLocation'
              - $ref: '#/components/schemas/Datastream'
              - $ref: '#/components/schemas/Observation'
              - $ref: '#/components/schemas/ObservedProperty'
              - $ref: '#/components/schemas/Sensor'
              - $ref: '#/components/schemas/FeatureOfInterest'
              - $ref: '#/components/schemas/Collection'

    CollectionUpdate:
      description: |
        Relabel or index an entity collection

      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CollectionOptions'

    Asset:
      description: |
        Tell the server where to find the data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Asset'

    


  responses:

    Asset:
      description: |
        Description of the file
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Asset'

    Collection:
      description: |
        Description of the service and data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Collection'

    Entity:
      description: |
        Single entity
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/Thing'
              - $ref: '#/components/schemas/Location'
              - $ref: '#/components/schemas/HistoricalLocation'
              - $ref: '#/components/schemas/Datastream'
              - $ref: '#/components/schemas/Observation'
              - $ref: '#/components/schemas/ObservedProperty'
              - $ref: '#/components/schemas/Sensor'
              - $ref: '#/components/schemas/FeatureOfInterest'

    EntityCollection:
      description: |
        Collection of entities

      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EntityCollection'

    TokenResponse:
      description: Auth token
      content:
        application/json:
          schema:
            type: object
            properties:

              token:
                description: JWT Bearer token containing user ID
                type: string
                minLength: 127

              duration:
                type: integer
                description: JWT expiration interval in seconds
                default: 600
                minimum: 30
                maximum: 3600

    Message:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
                
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Not authorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:


    Asset:
      type: object

    CollectionOptions:
      allOf:
        - $ref: '#/components/schemas/Collection'
        - type: object
          properties:

            label:
              $ref: '#/components/schemas/EntityLabel'

            indexBy:
              type: string
              default: id
              enum:
                - id
                - location
                - ts
              description: |
                Node attribute to create an index on.


    EntityLabel:
      type: string
      enum:
        - Proxy
        - Buoy
        - Server
        - Metadata
        - File
        - Raw
      description: |
        Additional node labels that can be applied to entities, which have internal meaning.

    Error:
      type: object
      properties:
        message:
          type: string
          description: Error message

    Message:
      type: object
      properties:
        message:
          type: string
          description: Status message

    Index:
      type: string
      description: Class name of entities to index.

    SecretKey:
      description: |
        Your secret key is used to encrypt traffic and private data, such as your login credentials. If you do not
        provide your own key, a default secret will be used. If you do provide a secret key, make sure to save it.
        It is not possible for us to recover data encrypted with a user secret.

      type: string

    Register:
      type: object
      properties:

        email:
          description: |
            Registration requires an e-mail that can be used to validate non-profit or educational affiliation.
          type: string

        password:
          description: |
            Password cannot be `password`, but there are no character limits otherwise.
            A compromised account will only expose your data and publicly available
            datasets. This is encrypted to prevent possible re-use across other services. Use a good random password.
          type: string
          minLength: 10
          maxLength: 128

        secret:
          $ref: '#/components/schemas/SecretKey'

    EntityCollection:
      allOf:
        - type: object
          properties:
            "@iot.count":
              type: integer
              minimum: 1
              maximum: 100
              description: Total number of records in the response

            value:
              type: array
              description: Array of response data
              items:
                oneOf:
                  - $ref: '#/components/schemas/Thing'
                  - $ref: '#/components/schemas/Location'
                  - $ref: '#/components/schemas/HistoricalLocation'
                  - $ref: '#/components/schemas/Datastream'
                  - $ref: '#/components/schemas/Observation'
                  - $ref: '#/components/schemas/ObservedProperty'
                  - $ref: '#/components/schemas/Sensor'
                  - $ref: '#/components/schemas/FeatureOfInterest'
        - $ref: '#/components/schemas/Collection'

    EntityClass:
      type: string
      enum:
        - Datastreams
        - FeaturesOfInterest
        - Locations
        - Observations
        - ObservedProperties
        - Sensors
        - Things
        - Collections
        - Actuators
        - TaskingCapabilities
        - Tasks

    Entity:
      type: object
      properties:

        id:
          type: integer
          readOnly: true
          description: |
            Unique integer identifier for entity. This usually auto-generated, but is different that the default node
            IDs within the Neo4j database, since those are not guarenteed to persist.

        name:
          type: string
          nullable: true
          description: |
            Human readable entity name for displaying data.

        description:
          type: string
          nullable: true
          description: |
            Short but useful explaination of what the entity is.

    FeatureOfInterest:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: |
            Features of interest are usually Locations

          properties:

            encodingType:
              type: string
              description: Identifier for parsing feature data

            feature:
              type: object
              description: Feature data

            Observations:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object

    Thing:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: |
            A thing is an object of the physical or information world that is capable of of being identified
            and integrated into communication networks.

          properties:

            entityClass:
              writeOnly: true
              enum: [thing]
              default: thing

            properties:
              type: object
              description: Key-value properties

            HistoricalLocations:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object

            Locations:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object

            Datastreams:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object


    LocationEncodingType:
      type: string
      enum:
        - "application/vnd.geo+json"
        - "application/vnd.network+json"
      default: "application/vnd.geo+json"
      description: The encoding rendered in the location response

    Location:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: |
            Last known location of a thing. May be a feature of interest, unless remote sensing.

          properties:

            entityClass:
              writeOnly: true
              enum: [location]
              default: location

            encodingType:
              $ref: '#/components/schemas/LocationEncodingType'

            location:
              type: object
              properties:
                type:
                  type: string
                  enum: ["Point", "Polygon"]
                coordinates:
                  type: array
                  minLength: 2
                  maxLength: 3
                  items:
                    type: number
                    format: float


            HistoricalLocations:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object


            Things:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object

    HistoricalLocation:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:

            entityClass:
              writeOnly: true
              enum: [historicalLocation]
              default: historicalLocation

            encodingType:
              $ref: '#/components/schemas/LocationEncodingType'

            time:
              type: string
              format: date-time
              description: Timestamp when the location was current

            Things:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  minItems: 1
                  maxItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  minItems: 1
                  maxItems: 1
                  items:
                    type: object

            Locations:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  minItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  minItems: 1
                  items:
                    type: object

    Sensor:

      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:

            entityClass:
              writeOnly: true
              type: string
              enum: [sensor]
              default: sensor

            encodingType:
              type: string
              enum: [application/pdf, "http://www.opengis.net/doc/IS/SensorML/2.0"]
              default: "http://www.opengis.net/doc/IS/SensorML/2.0"

            metadata:
              type: object

            Datastreams:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object

    Datastream:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: |

            Datastreams are collections of `Observations` from the same `Sensor`.

          properties:

            entityClass:
              writeOnly: true
              type: string
              enum: [datastream]
              default: datastream

            unitOfMeasurement:
              type: object
              description: |
                Unified Code for Unit of Measure

              properties:
                name:
                  type: string
                  description: Name for matching and displaying

                symbol:
                  type: string
                  nullable: true
                  description: Abbreviation for the parameter

                definition:
                  type: string
                  nullable: true
                  description: A link to a formal definition

            observationType:
              type: string
              description: |
                Data model of child `Observations`. Usually a `Measurement`.

              nullable: true
              enum:
                - "OM_CategoryObservation"
                - "OM_CountObservation"
                - "OM_Measurement"
                - "OM_Observation"
                - "OM_TruthObservation"

            observedArea:
              type: object
              nullable: true
              readOnly: true
              description: |
                The bounding box that encloses all `FeaturesOfInterest` referenced by child `Observations`

            phenomenonTime:
              type: array
              description: |
                Time interval of the measured process, consisting of two ISO8601 timestamps.
              minItems: 2
              maxItems: 2
              items:
                type: string
                format: date-time

            resultTime:
              type: array
              description: |
                Time interval of receiving data, consisting of two ISO8601 timestamps. May be different than the
                measured process, due to batch uploads, latency, lack of real-time clocks in devices, etc.
              minItems: 2
              maxItems: 2
              items:
                type: string
                format: date-time

            table:
              type: string
              description: |
                Time series observations associated with a datastream can be stored in the TimescaleDB.
                TimescaleDB is an extension of Postgres+Postgis, and this is SQL table reference to find and
                retrieve data.


            Observations:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object

            ObservedProperties:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  minItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  minItems: 1
                  items:
                    type: object

            Sensors:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  minItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  minItems: 1
                  items:
                    type: object

            Things:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  minItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  minItems: 1
                  items:
                    type: object


    Observation:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:

            resultTime:
              type: string
              format: date-time
              description: |
                Timestamp when the `Observation` was registered by the system.

            resultQuality:
              type: string
              description: |
                Quality of the result described as a `DQ_Element` (OGC)

            validTime:
              type: array
              description: Time interval when the result is valid
              minItems: 2
              maxItems: 2
              items:
                type: string
                format: date-time

            phenomenonTime:
              type: string
              format: date-time
              description: |
                Timestamp of the acquisition of the `Observation`

            result:
              description: The result of the observation. Usually a number.
              type: number
              format: float

            parameters:
              type: object
              description: Environmental conditions during the `Observation`

            Datastreams:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  maxItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  maxItems: 1
                  items:
                    type: object

            FeaturesOfInterest:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  maxItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  maxItems: 1
                  items:
                    type: object

    ObservedProperty:

      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            definition:
              type: string
              nullable: true
              description: Reference to resource that defines the property. We default to trying Wikipedia.

            Datastreams:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  maxItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  maxItems: 1
                  items:
                    type: object

    Collection:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: |
            SpatioTemporal Asset Catalog object-linking collection object. Collections are generic, while some
            SensorThings entities are special Collections. For instance, a `Datastream` is a collection of
            `Observations`.

          properties:

            extent:
              $ref: '#/components/schemas/Extent'

    Extent:
      title: extent
      type: object
      readOnly: true
      nullable: true
      description: |

        Spatiotemporal extent of a data `Collection`. Contains a 2 or 3-D `spatial` extent, and a `temporal`
        interval.

      properties:

        spatial:
          type: array
          minLength: 4
          maxLength: 6
          items:
            type: number
            format: float

        temporal:
          type: string
          description: ISO format timestamp interval


    Provider:
      title: dataProvider
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: |
            Data providers are organizations or individuals that produce, process, host, or license data.

          properties:

            url:
              type: string
              description: URL to organization website

            roles:
              type: array
              description: |
                Data providers are labeled with a role, so that attribution and redaction works properly on synthesized
                datasets. Data in the system m
              items:
                title: providerRole
                type: string
                enum:
                  - licensor
                  - producer
                  - processor
                  - host

    CreateSchema:
      type: object

    Time:
      type: number

    Value:
      type: number

    Periods:
      type: integer
      minimum: 1
      maximum: 1000
      default: 1000

    Horizon:
      description: |
        Sequence length the LSTM is trained on for each output point
      type: integer
      minimum: 1
      maximum: 4
      default: 1

    Window:
      description: |
        Number of observations in moving window for calculating the expected value from input datastream.

      type: integer
      minimum: 1
      default: 2

    Ratio:
      description: |
        Fraction of observations to use for training. The rest are left for validation.
      type: number
      format: float
      default: 0.8

  

    FFT:
      description: Array of time step responses
      type: array
      items:
        - $ref: '#/components/schemas/transformItem'

    transformItem:
      type: object
      properties:
        frequency:
          type: number
          format: float
          minimum: 0.0
        index:
          type: number
          format: float

    Mask:
      description: Array of boolean values
      type: array
      items:
        - $ref: '#/components/schemas/MaskItem'

    MaskItem:
      description: Value of single mask item
      type: boolean


    Temperature:
      description: |
        Temperature, degrees Celsius, controls vital rates.
      type: number
      format: float
      minimum: 0
      maximum: 40
  

    Weight:
      description: |
        The total fresh product weight in grams. There are other conversions depending on your application case.
        Biogeochemical modelers are likely more interested in carbon and nutrient masses. This will apply best
        to products sold by weight like mussels.

      type: number
      format: float
      minimum: 0.0


  
    dt:
      description: |
        Timestep, integer seconds. A one minute time step is probably unnecessary, unless you are validating/comparing
        a laboratory physiology study. Longer time steps may miss important tidal dynamics. One hour is the recommended
        value, which is also a common sampling frequency for sensors deplyed near growing areas (and therefore limits
        interpolation). Integration is by Euler (`euler`) or Runga-Kutta (`rk`).

      type: integer
      minimum: 60
      maximum: 3600
      default: 3600

    volume:
      description: |
        Control volume for density-dependence, measure in liters. As the number of organisms per unit volume increases,
        competition for limited resources like food or oxygen can come into play.

      type: number
      format: float
      minimum: 1
      maximum: 1000
