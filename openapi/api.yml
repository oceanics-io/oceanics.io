openapi: "3.0.0"

info:
  title: "Bathysphere API"
  version: "1.4"
  description: |

    # Overview

    Bathysphere is a geospatial library and application thats operates as infrastructure for other
    public-facing architecture. It is intended for scientific computing on unstructured triangular meshes,
    in the fields of hydrodynamics and ocean modeling.

    The Graph API provides a web service for controlling the graph database backend. The service implements Open
    Geospatial Consortium (OGC) SensorThings API specification and the
    [SpatioTemporal Assets Catalog](https://stacspec.org/) (STAC) standard.

    This enables topology for data models, in which nodes are generic entities. Schemas are only enforced
    by API specification validation. Heavy lifting for big data structures is delegated to the core Bathysphere application, while provenance
    tracking and permissions are handled in the graph.

    # Functions as a Service

    Bathypshere uses an OpenFaaS cluster for asynchoronous data execution, and access to external data sources.
    Direct access can be provided by request. These are described in the `FUNCTIONS` section.


    # Visualization

    The image rendering service creates PNG format files for time series and geospatial data. Small and simple
    data structures can be sent and analyzed directly. More complex structures like large, unstructured triangular
    meshes need to be accessible from a database already. This ensures that caching is enforced to prevent
    redundant computation.

    There are also front-end intergrations for working with Mapbox:

    <iframe src="http://localhost:63343/bathysphere/openapi/bathysphere.html" width=100%>Not available</iframe>

  contact:
    name: Oceanicsdotio
    url: http://www.oceanics.io
    email: business@oceanics.io

  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

  x-logo:
    url: bathysphere.png

externalDocs:
  description: See the repository for more information
  url: https://bitbucket.org/aquaculture/bathysphere

x-tagGroups:

  - name: BATHYSPHERE API
    tags: [Account, Catalog, Topology]
  - name: ENTITY MODELS
    tags: [Things, Sensors, Datastreams, Observations, FeaturesOfInterest, Actuators]
  - name: FUNCTIONS
    tags: [ Admin, Analysis, IoT, Storage ]

tags:
  - name: Account
  - name: Catalog
  - name: Topology
  - name: Things
    x-displayName: Things
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Thing" />
  - name: Locations
    x-displayName: Locations
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Location" />
  - name: Sensors
    x-displayName: Sensors
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Sensor" />
  - name: Actuators
    x-displayName: Actuators

  - name: Admin
  - name: Analysis
  - name: IoT
  - name: Storage

  - name: Functions
    description: |
      Functions exposes OpenFaaS endpoints. These are used internally by Bathysphere for asynchronous
      task execution, and access to external data sources. Direct access can be provided by request.
      See the [repository](https://bitbucket.org/aquaculture/bathysphere) for more information.

  - name: FeaturesOfInterest
    x-displayName: FeaturesOfInterest
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/FeatureOfInterest" />
  - name: Datastreams
    x-displayName: Datastreams
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Datastream" />
  - name: TaskingCapabilities
    x-displayName: TaskingCapabilities
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/TaskingCapability" />
  - name: Tasks
    x-displayName: Tasks
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Task" />
  - name: ObservedProperties
    x-displayName: ObservedProperties
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/ObservedProperty" />
  - name: Observations
    x-displayName: Observations
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Observation" />

servers:
- url: https://graph.oceanics.io/api
  description: Oceanicsdotio
- url: https://graph.oceanics.io/async-function
  description: Asynchronous endpoint
- url: https://graph.oceanics.io/function
  description: Function endpoint

paths:

  /auth:

    post:
      tags: [Account]
      operationId: bathysphere_graph.handlers.register
      summary: Register
      description: |

        Register an e-mail address to get access to development API. Accounts are for development and testing purposes
        only. We won't share your contact information, but we do reserve the right to analyze and profile your use of
        our infrastructure, as well as monitor unencrypted traffic.

        Please contact us if you are interested in a dedicated database instance, or long-term multi-tenancy
        hosting.

      requestBody:
        $ref: '#/components/requestBodies/Register'

      responses:
        '200':
          $ref: '#/components/responses/TokenResponse'
        '400':
          $ref: '#/components/responses/BadRequest'


    get:
      tags: [Account]
      operationId: bathysphere_graph.handlers.token
      summary: Token
      description: |

        Exchange token or email and password for a Javascript Web Token. This will allow you make API calls and use
        graphical interfaces for a fixed period of time. If you have previously provided a secret, it will be required
        here to authenticate login and hash the token.

      parameters:
        - name: secret
          in: query
          schema:
            $ref: '#/components/schemas/SecretKey'

      responses:
        '200':
          $ref: '#/components/responses/TokenResponse'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [Account]
      operationId: bathysphere_graph.handlers.manage
      summary: Manage
      description: |

        Change e-mail address or password.

      requestBody:
        $ref: '#/components/requestBodies/Register'

      responses:
        '200':
          $ref: '#/components/responses/TokenResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /:

    get:
      tags: [Catalog]
      operationId: bathysphere_graph.handlers.catalog
      summary: Catalog
      description: |
        Get all entity types in database as collections following the SpatioTemporal Asset Catalog specification

      parameters:

        - name: asset
          in: query
          schema:
            type: string
            default: index

        - name: extension
          description: |
            Any entity can be linked topologically to any other entity, but generally
            these are grouped in functional sets by application area:
            * `sensing` implements Open Geospatial Consortium SensorThings specification (part 1),
            and has models relevant to operating and getting data from sensor networks.
            * `tasking` builds off of the SensorThings specification part 2.
            * `mesh` implements structures for spatial simulations.

          in: query
          schema:
            type: string
            enum: [sensing, mesh, tasking, admin, catalog]

      responses:
        '200':
          description: Catalog
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'

  /{entity}:

    post:
      tags: [Catalog]
      operationId: bathysphere_graph.handlers.create
      summary: Create
      description: |
        Create a new entity.

      parameters:
        - $ref: "#/components/parameters/entityClass"

      requestBody:
        $ref: '#/components/requestBodies/Entity'

      responses:
        '200':
          $ref: '#/components/responses/Entity'
        '400':
          $ref: '#/components/responses/BadRequest'

    get:
      tags: [Catalog]
      operationId: bathysphere_graph.handlers.collection
      summary: Collection
      description: |
        Get all entities of one type

      parameters:
        - $ref: "#/components/parameters/entityClass"

      responses:
        '200':
          $ref: '#/components/responses/EntityCollection'
        '404':
          $ref: '#/components/responses/NotFound'


  /{entity}({id}):

    get:
      tags: [Catalog]
      operationId: bathysphere_graph.handlers.metadata
      summary: Metadata
      description: |
        Get entity

      parameters:
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"

      responses:
        '200':
          $ref: '#/components/responses/Entity'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [ Catalog ]
      operationId: bathysphere_graph.handlers.mutate
      summary: Update
      description: Update entity
      requestBody:
        $ref: '#/components/requestBodies/Entity'

      parameters:
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"

      responses:
        '200':
          $ref: '#/components/responses/Entity'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [ Catalog ]
      operationId: bathysphere_graph.handlers.delete
      summary: Delete
      description: Delete entity and orphans recursively.
      parameters:
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"

      responses:
        '204':
          description: No content
        '404':
          $ref: '#/components/responses/NotFound'


  /{root}({rootId})/{entity}:

    get:
      tags: [ Topology ]
      operationId: bathysphere_graph.handlers.query
      summary: Query
      description: |
        Get related entities

      parameters:
        - $ref: "#/components/parameters/root"
        - $ref: "#/components/parameters/rootId"
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/label"

      responses:
        '200':
          $ref: '#/components/responses/EntityCollection'
        '400':
          $ref: '#/components/responses/BadRequest'


  /{root}({rootId})/{entity}({id}):

    post:
      tags: [ Topology ]
      operationId: bathysphere_graph.handlers.join
      summary: Join
      description: Create a labeled relationship between entities.
      parameters:
        - $ref: "#/components/parameters/root"
        - $ref: "#/components/parameters/rootId"
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"
        - $ref: "#/components/parameters/label"

      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'

    delete:
      tags: [Topology]
      operationId: bathysphere_graph.handlers.drop
      summary: Drop
      description: |
        Remove a labeled relationship between entities. If no `label` is specified, remove all
        relationships between the entities.

      parameters:
        - $ref: "#/components/parameters/root"
        - $ref: "#/components/parameters/rootId"
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"
        - $ref: "#/components/parameters/label"

      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'


  /archive:

    post:
      tags: [ Admin ]
      summary: Archive
      description: Index an external data or storage system

    responses:
        '200': Success

  /buoys:

    post:
      tags: [ IoT ]
      summary: Buoys
      description: |

        Access third-party buoy data.

        In the simplest case this is a client for Satlantic LOBOviz servers.
        University of Maine buoys are part of the http://maine.loboviz.com/cgi-data/nph-data.cgi service root URI.
        A query string follows this, which is composed of time range specification, buoy identifier (`node=`), and
        fields (`params=`). Requests also take `start=` and `end=`, or `samples=` as arguements.

        Because data is logged hourly, the newest is also the number of hours previous to return.
        The most recent measurement becomes available about 30 minutes after it is collected.

        The user may only request data for a single buoy at a time,
        each of which has a unique integer identifier, `node = "node=66"`.

        Sensor 66 is currently deployed in the upper Damariscotta Estuary;
        sensors 70 and 71 are Casco Bay sites 1 and 2, respectively; and sensor 72 is located in the Bagaduce River.
        The Bowdoin College buoy is sensor 52.

        Omitting this, requesting multiple buoys, or using the nodes parameter—which LOBOVIZ plots rely on will result in an error.

        Data fields are returned as columns in the order they are requested, according to a comma-separated expression.
        The options for variables include those in the table below.

        **Table 2. Well-known parameters**

        | Name                | Unit    | Description                                                  | Source |
        | ------------------- | ------- | ------------------------------------------------------------ | ------ |
        | `cdom`              |         | Colored dissolved organic matter                             | SEANET |
        | `chlorophyll`       |         | Chlorophyll-a fluoresence                                    | SEANET |
        | `conductivity`      |         | Conductivity                                                 | SEANET |
        | `current_direction` | degrees | Angle of current relative to true North                      | SEANET |
        | `current_speed_cm`  | cm/s    | Speed of water relative to platform                          | SEANET |
        | `depth`             | meters  | Depth of the pressure sensor for interpreting other observations | SEANET |
        | `oxygen`            |         | Dissolved oxygen                                             | SEANET |
        | `nitrate`           |         | Nitrate                                                      | SEANET |
        | `oxygen_sat`        |         | Oxygen saturation                                            | SEANET |
        | `oxygen_percent`    | %       | Oxygen percent saturation                                    | SEANET |
        | `par0minus`         |         | Photosynthetically active radiation below water              | SEANET |
        | `par0plus`          |         | Photosynthetically active radiation above water              | SEANET |
        | `salinity`          | psu     | Salinity                                                     | SEANET |
        | `temperature`       | deg C   | Temperature                                                  | SEANET |
        | `transmission`      |         | Optical transmission of water                                | SEANET |
        | `turbidity`         | NTU     | Turbidity                                                    | SEANET |
        |                     |         |                                                              |        |
        |                     |         |                                                              |        |
        |                     |         |                                                              |        |
        |                     |         |                                                              |        |

        You cannot query latitude, longitude, or battery voltage.
        Specifying no valid fields will return just temperature.
        Specifying an invalid field will not return an error,
        meaning that you’ll have to incorporate your own error handling—though the buoy
        configurations are unlikely to change.

        The final parameter is `data_format=text`.
        This is outputs pure text, as would be displayed in a web browser.
        The date-time column is `YYYY–MM–DD HH:MM:SS`. The date and time a separated by a single space,
        while columns are tab-delimited. If omitted, the response will be a file. Depending on your usage,
        these may be identical.

        The node is translated to a sensible name, and there is limited auto-correct that will sometimes
        forgive you for guessing the field name.


        **Table. Status Options**

        | Heading                                                      |         Auth         | Description                                                  | Path      | Query        | Tokens        |
        | :----------------------------------------------------------- | :------------------: | :----------------------------------------------------------- | --------- | ------------ | ------------- |
        | [Configuration](http://maine.loboviz.com/cgi-config/system-config) | Yes | Node and parameter definitions.                              | `Things`  | `GET`        | `$events`     |
        | [Data age](http://maine.loboviz.com/latest/age-of-data.html) | Yes | Data ages                                                    | `Things`  | `GET`        | `$statistics` |
        | [Schedules](http://maine.loboviz.com/schedule/)              | Yes | Browse schedule files                                        | `Things`  | `GET`        | `$schedule`   |
        | [System logs](http://maine.loboviz.com/status/)              | Yes | E-mail and processing logs                                   | `Things`  | `GET`        | `$logs`       |
        | [XML](http://maine.loboviz.com/ingestorxml/)                 | Yes | Instrument configuration files                               | `Sensors` | `GET`        | `$config`     |
        | [XML Sensors](http://maine.loboviz.com/cgi-config/list-xml-sensors) | Yes | Sites and frames                                             | `Sensors` | `GET`        | —             |
        | [Check schedule files](http://maine.loboviz.com/cgi-config/check-schedule) | Yes | Check file for errors in browser.<br /><br />Notes: We check files automatically during upload. | `Things`  | `POST` `PUT` | `$schedule`   |

        **Table 4. Data**

        | Heading                                             |         Auth         | Description                                  | Path     | Query | Tokens        |
        | :-------------------------------------------------- | :------------------: | :------------------------------------------- | -------- | ----- | ------------- |
        | [Archive](http://maine.loboviz.com/archive/)        | Yes | Raw data (`.raw`) and log (`.raw.txt`) files | `Things` | `GET` | `$archive`    |
        | [Info](http://maine.loboviz.com/cgi-data/data-info) |                      | Summary table with site, first, last, total  | `Things` | `GET` | `$statistics` |
        | [Pending](http://maine.loboviz.com/data/)           | Yes | Files waiting to be processed                | `Things` | `GET` | `$pending`    |
        | [Recent-Raw](http://maine.loboviz.com/newest-raw/)  | Yes | Daily raw text                               | `Things` | `GET` | `$recent`     |

        **Table 5. Management**

        | Heading       | Auth | Description     | Equivalent | Query |  |
        | :----------- | :--: | :------------------------------------ | ------------------------------------- | ------------------------------------- | ------------------------------------- |
        | [Event settings](http://maine.loboviz.com/cgi-config/edit-events) | Yes | Settings for events, e-mail contacts.    | `Things` | `PUT` | `$events` |
        | [Hide bad events](http://maine.loboviz.com/protected/hide-bad-data.shtml) | Yes | Hide or show values for one site, any number of variables, on a single day for some number of hours. | `Datastreams` | `PUT` | `$mask` |
        | [Modify sensor values](http://maine.loboviz.com/protected/modify-values.shtml) | Yes | Apply correction to database values for calibration change. <br /><br />Notes: Our implementation is algorithmic instead of manual. | `Datastreams` | `PUT` | `$resample` |
        | [Remove sensor values](http://maine.loboviz.com/protected/remove-values.shtml) | Yes | Delete database values outside nominal range, but not raw data. <br /><br />Note: We mask instead of delete. Using `GET` will transform and return the data without persisting the change. | `Datastreams` | `PUT` `GET` | `$mask` |
        | [Schedule upload](http://maine.loboviz.com/cgi-auth/cgiwrap/lobodata/schedule-upload) | Yes | Upload acquisition schedule files for StorX. | `Things` | `POST` | `$schedule` |
        | [Instrument swaps](http://maine.loboviz.com/protected/instrument-swaps.html) | Yes | Move instruments between sites, and view move history | `Sensors` | `PUT` `GET` | `$swap` |
        | [Instrument XML upload](http://maine.loboviz.com/cgi-auth/cgiwrap/lobodata/single-xml-upload) | Yes | Upload XML/sensor file for use with swapping function | `Sensors` | `POST` `PUT` | `$config` |
        | [Calibration values](http://maine.loboviz.com/cgi-auth/cgiwrap/lobodata/calibration-values-step1) | Yes | Modify existing XML file with new calibrations | `Sensors` | `POST` `PUT` `GET` | `$calibrate` |
        **Table 6. Graphing**

        | Heading | Auth | Description | Path | Query | Parameter |
        | :-- | :-- | --- | :-- | --- | --- |
        | [Averages](http://maine.loboviz.com/loboviz/research/averages.shtml) |  |One sensor, one site, one averaging window (d/w/m/y), for any date range. |`Datastreams` |`GET` |`$resample` `$image` |
        | [By year](http://maine.loboviz.com/loboviz/research/by-year.shtml) |  | One variable, overlapping years. Replace with Julian day. | `Datastreams` | `GET` | `$image` `$wrap` |
        | [Non-public](http://maine.loboviz.com/protected/) | Yes |Includes extra y-variables for diagnostic |`Datastreams` |`GET` |`$image` |
        |[Peaks](http://maine.loboviz.com/loboviz/research/recent-peaks.shtml) |Yes | Min and max values and the date of occurance, for single site. | `Datastreams` | `GET` | `$statistics` |
        |[Year background](http://maine.loboviz.com/loboviz/research/year-background.shtml) | | Display single variable for year against daily min/max for multiple other years. <br /><br />Note: Replaced with daily moving average and envelope of other sites. | `Datastreams` | `GET` | `$image` `$wrap` `$resample` `$statistics` |





      parameters:
        - $ref: "#/components/parameters/HMAC"

      requestBody:

        description: Buoy data
        content:
          application/json:
            schema:
              type: object
              description: Buoys function request
              properties:
                interval:
                  type: array
                  minItems: 2
                  maxItems: 2
                  items:
                    type: string
                    format: date
                limit:
                  type: integer
                  description: |
                    Number of records to retrieve, from today or the end of `interval`.
                encoding:
                  type: string
                  description: Return data as CSV text or as JSON
                  enum: [ txt, json ]
                  default: txt
                id:
                  type: integer
                  description: The identity of the buoy, known to the external server
                observedProperties:
                  type: array
                  minItems: 1
                  items:
                    type: string

    responses:
        '202':
          description: Async response

        '200':
          description: Buoy data
          content:
            application/json:
              schema:
                type: object
                description: Buoys data
                properties:
                  name:
                    type: string
                  aliases:
                    type: array
                    items:
                      type: string
                  values:
                    type: array
                    items:
                      type: object

  /cache:

    post:
      tags: [ Storage ]
      summary: Cache
      description: Redis integration

  /controller:

    post:
      tags: [ IoT ]
      summary: Controller
      description: Deploy control loops

  /image:

    post:

      tags: [ Analysis ]
      summary: Image
      description: |
        Create PNG images from data sources and references and cache it.
        The service call methods from the `matplotlib` library,
        which uses the anti-grain graphics backend (`AGG`). The images are portable network graphics (`.png`)
        by default, but `.pdf` and `.tiff` are available for print media.

      parameters:
        - $ref: "#/components/parameters/HMAC"

      requestBody:

        description: Image request
        content:
          application/json:
            schema:
              type: object
              description: Buoys function request
              properties:
                labels:
                  type: object
                  nullable: true
                  properties:
                    x:
                      type: string
                      nullable: true
                    y:
                      type: string
                      nullable: true

                style:
                  type: object
                  nullable: true
                  description: |
                    Style is used change the appearance of the rendered image.

                  properties:

                    template:
                      type: string
                      enum: [dark, light]
                      default: dark
                      description: |
                        Select between light and dark templates depending on whether the image is intended for display
                        on a screen or for printed media.

                    bg:
                      type: string
                      default: black
                      description: |
                        Override the default background color for the chosen or default template. Dark themes have a `black`
                        background by default, and light themes have a `white` background. Use this to match the background
                        color when embedding in a web page. This can also be transparent for image compositing.

                    contrast:
                      type: string
                      default: white
                      description: |
                        Contrast color for rendering over background.

                    flag:
                      type: string
                      default: red
                      description: |
                        Highlight color for marking selected or masked data.

                    label:
                      type: string
                      description: |
                        Color for text and labels. The default is the same as the `contrast` color.

                    dpi:
                      type: integer
                      default: 150
                      minimum: 90
                      maximum: 300
                      description: |
                        Image resolution. Be careful, `dpi=300` images can be very large.

                    format:
                      type: string
                      enum: [png, pdf, tiff]
                      default: png
                      description: |
                        Image file format. Only `png` is available through the API.

                    alpha:
                      type: number
                      format: float
                      default: 1.0
                      maximum: 1.0
                      minimum: 0.0
                      description: |
                        Transparency of drawn objects. Useful for rendering Monte Carlo simulations.

                    padding:
                      type: array
                      minLength: 4
                      maxLength: 4
                      items:
                        type: number
                        format: float
                      default: [0.1, 0.2, 0.05, 0.1]
                      description: |
                        Content padding from edges of image to make room for labels and title.

                    marker:
                      type: integer
                      default: 1
                      description: |
                        Size of markers if rendering scatter plots or points on a map

                    font:
                      type: integer
                      default: 10
                      description: |
                        Font size

                    text:
                      type: number
                      format: float
                      default: 1.0
                      description: |
                        Size of labels relative to font size.

                    width:
                      type: number
                      format: float
                      default: 6.5
                      description: |
                        Width of image in inches

                    height:
                      type: number
                      format: float
                      description: |
                        Height of image in inches

                data:
                  title: data container
                  type: object

                view:
                  type: string
                  description: The type of data view
                  enum: [series, coverage, frequency, scatter]

                extent:
                  title: extent
                  type: object
                  readOnly: true
                  nullable: true
                  description: |

                    Spatiotemporal extent of a data `Collection`. Contains a 2 or 3-D `spatial` extent, and a `temporal`
                    interval.

                  properties:

                    spatial:
                      type: array
                      minLength: 4
                      maxLength: 6
                      items:
                        type: number
                        format: float

                    temporal:
                      type: string
                      description: ISO format timestamp interval
                args:
                  title: arguments
                  type: object
                  nullable: true

      responses:

        '202':
          description: Accepted

        '403':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  Error:
                    type: string
                    example: HMAC validation

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  Error:
                    type: string
                    example: Requires POST with payload

        '200':
          description: Image reference
          content:
            application/json:
              schema:
                type: object
                properties:
                  uui:
                    type: string
                    format: uuid
                  objectName:
                    type: string
                    example: example.png
                  url:
                    type: string
                    format: uri
                    example: https://data.oceanics.io/example.png

  /notify:

    post:
      tags: [ Admin ]
      summary: Notify
      description: Send notification by e-mail or Slack

  /parse:

    post:
      tags: [ Analysis ]
      summary: Parse
      description: Heuristic XML/JSON parser

  /postgres:

    post:
      tags: [ Storage ]
      summary: Postgres
      description: Postgres and PostGIS integration

      requestBody:
        description: Unauthorized
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  nullable: true
                  description: Data to ingest

                encoding:
                  type: string
                  enum: [ json, txt ]
                  default: json
                  description: Encoding of result

                streaming:
                  type: boolean
                  description: Stream the records
                  default: false
                table:
                  type: string
                fields:
                  type: array
                  items:
                    type: string
                limit:
                  type: integer
                  default: 100
                order:
                  type: string
                  default: DESC
                conditions:
                  type: array
                  items:
                    type: str




      responses:

        '202':
          description: Accepted

        '200':
          description: Records
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  description: Parsed data record

        '403':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  Error:
                    type: string
                    example: HMAC validation

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  Error:
                    type: string
                    example: Requires POST with payload

  /repository:

    post:
      tags: [ Storage ]
      summary: Repository
      description: S3 object storage integration

components:

  parameters:


    HMAC:
      name: hmac
      description: |
        Hash-based message authentication code (HMAC) used to validate content and authenticity
        of requests.

      in: header
      type: string
      example: "hmac=sd76sd0s98sdf09"

    collection:
      required: true
      name: collection
      in: path
      schema:
        type: string

    root:
      in: path
      required: true
      name: root
      description: |
        The class name of the root or parent entity that the request object is associated with. During a `GET` request
        this will be used to collect child entities based on graph relationship. For `PUT` and `POST` requests this
        and the child entities will be linked with a labeled relationship.

      schema:
        type: string

    rootId:
      in: path
      required: true
      name: rootId
      description: |
        Unique integer identifier of the parent entity.
      schema:
        type: integer

    entityClass:
      in: path
      required: true
      name: entity
      description: |
        Name of the entity model to create or fetch.

      schema:
        type: string
        enum:
          - Datastreams
          - Observations
          - HistoricalLocations
          - Locations
          - Sensors
          - Things
          - ObservedProperties
          - Tasks
          - Actuators
          - TaskingCapabilities
          - FeaturesOfInterest
          - Collections

    entityId:
      in: path
      required: true
      name: id
      description: |
        Unique integer identifier of the resource to be retrieved.
      schema:
        type: integer


    label:
      in: query
      name: label
      description: |
        Should be in format `LABEL`, although this is not strictly necessary. Labeled relationships
        are used to crawl over the graph.
      schema:
        type: string


  requestBodies:

    Register:
      description: |
        Request is e-mail and password, plus an optional secret key for encrypting password and data.
        Note that if you lose the secret key, you will lose access to data.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Register'

    Collection:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Collection'

    Entity:
      description: |
        Entity
      content:
        application/json:
          schema:
            type: object
            oneOf:
              - $ref: '#/components/schemas/Thing'
              - $ref: '#/components/schemas/Location'
              - $ref: '#/components/schemas/HistoricalLocation'
              - $ref: '#/components/schemas/Datastream'
              - $ref: '#/components/schemas/Observation'
              - $ref: '#/components/schemas/ObservedProperty'
              - $ref: '#/components/schemas/Sensor'
              - $ref: '#/components/schemas/FeatureOfInterest'
              - $ref: '#/components/schemas/Collection'

    CollectionUpdate:
      description: |
        Relabel or index an entity collection

      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CollectionOptions'

    Asset:
      description: |
        Tell the server where to find the data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Asset'


  responses:

    Asset:
      description: |
        Description of the file
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Asset'

    Collection:
      description: |
        Description of the service and data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Collection'

    EntityCollection:
      description: |
        Collection of entities

      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EntityCollection'

    Entity:
      description: |
        Single entity
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/Thing'
              - $ref: '#/components/schemas/Location'
              - $ref: '#/components/schemas/HistoricalLocation'
              - $ref: '#/components/schemas/Datastream'
              - $ref: '#/components/schemas/Observation'
              - $ref: '#/components/schemas/ObservedProperty'
              - $ref: '#/components/schemas/Sensor'
              - $ref: '#/components/schemas/FeatureOfInterest'

    TokenResponse:
      description: Auth token
      content:
        application/json:
          schema:
            type: object
            properties:

              token:
                description: JWT Bearer token containing user ID
                type: string
                minLength: 127

              duration:
                type: integer
                description: JWT expiration interval in seconds
                default: 600
                minimum: 30
                maximum: 3600

    Message:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'

    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:


    Asset:
      type: object

    CollectionOptions:
      allOf:
        - $ref: '#/components/schemas/Collection'
        - type: object
          properties:

            label:
              $ref: '#/components/schemas/EntityLabel'

            indexBy:
              type: string
              default: id
              enum:
                - id
                - location
                - ts
              description: |
                Node attribute to create an index on.


    EntityLabel:
      type: string
      enum:
        - Proxy
        - Buoy
        - Server
        - Metadata
        - File
        - Raw
      description: |
        Additional node labels that can be applied to entities, which have internal meaning.

    Error:
      type: object
      properties:
        message:
          type: string
          description: Error message

    Message:
      type: object
      properties:
        message:
          type: string
          description: Status message

    Index:
      type: string
      description: Class name of entities to index.

    SecretKey:
      description: |
        Your secret key is used to encrypt traffic and private data, such as your login credentials. If you do not
        provide your own key, a default secret will be used. If you do provide a secret key, make sure to save it.
        It is not possible for us to recover data encrypted with a user secret.

      type: string

    Register:
      type: object
      properties:

        email:
          description: |
            Registration requires an e-mail that can be used to validate non-profit or educational affiliation.
          type: string

        password:
          description: |
            Password cannot be `password`, but there are no character limits otherwise.
            A compromised account will only expose your data and publicly available
            datasets. This is encrypted to prevent possible re-use across other services. Use a good random password.
          type: string
          minLength: 10
          maxLength: 128

        secret:
          $ref: '#/components/schemas/SecretKey'

    EntityCollection:
      allOf:
        - type: object
          properties:
            "@iot.count":
              type: integer
              minimum: 1
              maximum: 100
              description: Total number of records in the response

            value:
              type: array
              description: Array of response data
              items:
                oneOf:
                  - $ref: '#/components/schemas/Thing'
                  - $ref: '#/components/schemas/Location'
                  - $ref: '#/components/schemas/HistoricalLocation'
                  - $ref: '#/components/schemas/Datastream'
                  - $ref: '#/components/schemas/Observation'
                  - $ref: '#/components/schemas/ObservedProperty'
                  - $ref: '#/components/schemas/Sensor'
                  - $ref: '#/components/schemas/FeatureOfInterest'
        - $ref: '#/components/schemas/Collection'

    EntityClass:
      type: string
      enum:
        - Datastreams
        - FeaturesOfInterest
        - Locations
        - Observations
        - ObservedProperties
        - Sensors
        - Things
        - Collections
        - Actuators
        - TaskingCapabilities
        - Tasks

    Entity:
      type: object
      properties:

        id:
          type: integer
          readOnly: true
          description: |
            Unique integer identifier for entity. This usually auto-generated, but is different that the default node
            IDs within the Neo4j database, since those are not guarenteed to persist.

        name:
          type: string
          nullable: true
          description: |
            Human readable entity name for displaying data.

        description:
          type: string
          nullable: true
          description: |
            Short but useful explaination of what the entity is.

    FeatureOfInterest:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: |
            Features of interest are usually Locations

          properties:

            encodingType:
              type: string
              description: Identifier for parsing feature data

            feature:
              type: object
              description: Feature data

            Observations:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object

    Thing:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: |
            A thing is an object of the physical or information world that is capable of of being identified
            and integrated into communication networks.

          properties:

            entityClass:
              writeOnly: true
              enum: [thing]
              default: thing

            properties:
              type: object
              description: Key-value properties

            HistoricalLocations:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object

            Locations:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object

            Datastreams:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object


    LocationEncodingType:
      type: string
      enum: ["application/vnd.geo+json"]
      default: "application/vnd.geo+json"
      description: The encoding rendered in the location response

    Location:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: |
            Last known location of a thing. May be a feature of interest, unless remote sensing.

          properties:

            entityClass:
              writeOnly: true
              enum: [location]
              default: location

            encodingType:
              $ref: '#/components/schemas/LocationEncodingType'

            location:
              type: object
              properties:
                type:
                  type: string
                  default: "Point"
                  enum: ["Point"]
                coordinates:
                  type: array
                  minLength: 2
                  maxLength: 3
                  items:
                    type: number
                    format: float


            HistoricalLocations:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object


            Things:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object

    HistoricalLocation:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:

            entityClass:
              writeOnly: true
              enum: [historicalLocation]
              default: historicalLocation

            encodingType:
              $ref: '#/components/schemas/LocationEncodingType'

            time:
              type: string
              format: date-time
              description: Timestamp when the location was current

            Things:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  minItems: 1
                  maxItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  minItems: 1
                  maxItems: 1
                  items:
                    type: object

            Locations:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  minItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  minItems: 1
                  items:
                    type: object

    Sensor:

      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:

            entityClass:
              writeOnly: true
              type: string
              enum: [sensor]
              default: sensor

            encodingType:
              type: string
              enum: [application/pdf, "http://www.opengis.net/doc/IS/SensorML/2.0"]
              default: "http://www.opengis.net/doc/IS/SensorML/2.0"

            metadata:
              type: object

            Datastreams:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object

    Datastream:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: |

            Datastreams are collections of `Observations` from the same `Sensor`.

          properties:

            entityClass:
              writeOnly: true
              type: string
              enum: [datastream]
              default: datastream

            unitOfMeasurement:
              type: object
              description: |
                Unified Code for Unit of Measure

              properties:
                name:
                  type: string
                  description: Name for matching and displaying

                symbol:
                  type: string
                  nullable: true
                  description: Abbreviation for the parameter

                definition:
                  type: string
                  nullable: true
                  description: A link to a formal definition

            observationType:
              type: string
              description: |
                Data model of child `Observations`. Usually a `Measurement`.

              nullable: true
              enum:
                - "OM_CategoryObservation"
                - "OM_CountObservation"
                - "OM_Measurement"
                - "OM_Observation"
                - "OM_TruthObservation"

            observedArea:
              type: object
              nullable: true
              readOnly: true
              description: |
                The bounding box that encloses all `FeaturesOfInterest` referenced by child `Observations`

            phenomenonTime:
              type: array
              description: |
                Time interval of the measured process, consisting of two ISO8601 timestamps.
              minItems: 2
              maxItems: 2
              items:
                type: string
                format: date-time

            resultTime:
              type: array
              description: |
                Time interval of receiving data, consisting of two ISO8601 timestamps. May be different than the
                measured process, due to batch uploads, latency, lack of real-time clocks in devices, etc.
              minItems: 2
              maxItems: 2
              items:
                type: string
                format: date-time

            table:
              type: string
              description: |
                Time series observations associated with a datastream can be stored in the TimescaleDB.
                TimescaleDB is an extension of Postgres+Postgis, and this is SQL table reference to find and
                retrieve data.


            Observations:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object

            ObservedProperties:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  minItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  minItems: 1
                  items:
                    type: object

            Sensors:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  minItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  minItems: 1
                  items:
                    type: object

            Things:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  minItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  minItems: 1
                  items:
                    type: object


    Observation:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:

            resultTime:
              type: string
              format: date-time
              description: |
                Timestamp when the `Observation` was registered by the system.

            resultQuality:
              type: string
              description: |
                Quality of the result described as a `DQ_Element` (OGC)

            validTime:
              type: array
              description: Time interval when the result is valid
              minItems: 2
              maxItems: 2
              items:
                type: string
                format: date-time

            phenomenonTime:
              type: string
              format: date-time
              description: |
                Timestamp of the acquisition of the `Observation`

            result:
              description: The result of the observation. Usually a number.
              type: number
              format: float

            parameters:
              type: object
              description: Environmental conditions during the `Observation`

            Datastreams:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  maxItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  maxItems: 1
                  items:
                    type: object

            FeaturesOfInterest:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  maxItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  maxItems: 1
                  items:
                    type: object

    ObservedProperty:

      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            definition:
              type: string
              nullable: true
              description: Reference to resource that defines the property. We default to trying Wikipedia.

            Datastreams:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  maxItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  maxItems: 1
                  items:
                    type: object

    Collection:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: |
            SpatioTemporal Asset Catalog object-linking collection object. Collections are generic, while some
            SensorThings entities are special Collections. For instance, a `Datastream` is a collection of
            `Observations`.

          properties:

            extent:
              $ref: '#/components/schemas/Extent'

    Extent:
      title: extent
      type: object
      readOnly: true
      nullable: true
      description: |

        Spatiotemporal extent of a data `Collection`. Contains a 2 or 3-D `spatial` extent, and a `temporal`
        interval.

      properties:

        spatial:
          type: array
          minLength: 4
          maxLength: 6
          items:
            type: number
            format: float

        temporal:
          type: string
          description: ISO format timestamp interval


    Provider:
      title: dataProvider
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: |
            Data providers are organizations or individuals that produce, process, host, or license data.

          properties:

            url:
              type: string
              description: URL to organization website

            roles:
              type: array
              description: |
                Data providers are labeled with a role, so that attribution and redaction works properly on synthesized
                datasets. Data in the system m
              items:
                title: providerRole
                type: string
                enum:
                  - licensor
                  - producer
                  - processor
                  - host
