openapi: "3.0.0"

info:

  title: "Bathysphere API"
  version: "1.4"
  description: |

    The Bathysphere API is a distributed store and registry for public and proprietary geospatial data.
    The system is designed to support aquaculture research in the Gulf of Maine, but can be configured and extended for other applications.
    It uses best-in-class technology to ingest sensor and model data and metadata, and automatically parse them into discoverable databases.

    The representation of complex relationships between heterogenous data is simplified by applying a graph framework,
    backed by a [Neo4j](https://neo4j.com/) graph database cluster to store semi-structured data,
    along with labeled relationships. This approach can be applied to many flexible, high-level cases,
    from NASA managing their [lessons-learned](https://neo4j.com/blog/nasa-lesson-learned-database-using-neo4j-linkurious/)
    mission database, to modeling a virtual [economy](https://www.airpair.com/neo4j/posts/modelling-game-economy-with-neo4j).

    You probably have to share data anyway. Our middleware can enhance your data science and management experience by
    providing representation state transfer (REST) and graph-based services for:

    - Secure organizational accounts
    - Open Geospatial Consortium (OGC) SensorThings standard
    - [SpatioTemporal Assets Catalog](https://stacspec.org/) (STAC) standard
    - Provenance tracking
    - Granular access control and auditing

    By assessing availability over the whole domain, projects can target resources to fill coverage gaps. This supports
    an open marketplace data sharing model, which may be preferable to redundant collection.

  contact:
    name: Oceanicsdotio
    url: http://www.oceanics.io
    email: business@oceanics.io

  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

  x-logo:
    url: bathysphere.png

externalDocs:

  description: See the bathysphere_functions_repository for more information
  url: https://github.com/oceanicsdotio/bathysphere

x-tagGroups:

  - name: BATHYSPHERE API
    tags: [ Account, Catalog, Topology ]

#   - name: FUNCTIONS
#     tags: [ Bivalve, Image ]

#   - name: NERITICS
#     tags: [ ML, Filter, Frequency, Mask ]

tags:

  - name: Account
    x-displayName: Account
    description: |
      If you have an e-mail address associated with an organization known to us, you can register to use the
      database and serives. Please review security and privacy information before uploading any proprietary data.

  - name: Catalog
    x-displayName: Catalog
    description: |
      Access data through the entity catalog interface. These are your generic CRUD operations.

  - name: Topology
    x-displayName: Topology
    description: |
      Build topological relationships and access metadata.

#   - name: ML
#     x-displayName: ML
#     description: |
#       The machine learning service implements multivariate time series prediction using recurrent neural networks with
#       long short-term memory. The backend is `Keras` and `TensorFlow`.

#   - name: Filter
#     x-displayName: Filter
#     description: |
#       Time series filtering

#   - name: Frequency
#     x-displayName: Frequency
#     description: |
#       Frequency domain manipulation

#   - name: Mask
#     x-displayName: Mask
#     description: |
#       Time series and raster masking

#   - name: Image
#     x-displayName: Image
#     description: |
#       Anti-grain graphics

#   - name: Bivalve
#     x-displayName: Bivalve
#     description: |
#       Simulation and analysis API for aquaculture planning. This API implements a machine-oriented RESTful API service
#       in Python, C#, and Mono that runs batches of parallel processes. Modeling with `ShellSIM` requires a licensed copy
#       of the v3.0.0.2 `.dll` from Plymouth Marine Laboratory. The community version replaces `ShellSIM` with multiple
#       regression or neural netowrks trained on Monte Carlo simulations and empirical data.
  
#       You can setup and run simulations in multiple ways. The recommended way is to create re-usable configurations,
#       and then request runs by referencing these and supplying any required forcing parameters. Configurations are
#       locked after their first run, unless used in `test` mode.

servers:
- url: https://graph.oceanics.io/{basePath}
  description: Production API server
  variables:
    basePath:
      default: api

paths:

  /auth:

    post:
      tags: [ Account ]
      operationId: bathysphere.graph.functions.register
      summary: Register
      description: |

        Register an e-mail address to get access to development API. Accounts are for development and testing purposes
        only. We won't share your contact information, but we do reserve the right to analyze and profile your use of
        our infrastructure, as well as monitor unencrypted traffic.

        Please contact us if you are interested in a dedicated database instance, or long-term multi-tenancy
        hosting.

      requestBody:
        $ref: '#/components/requestBodies/Register'

      responses:
        '200':
          $ref: '#/components/responses/TokenResponse'
        '400':
          $ref: '#/components/responses/BadRequest'


    get:
      tags: [ Account ]
      operationId: bathysphere.graph.functions.token
      summary: Token
      description: |

        Exchange token or email and password for a Javascript Web Token. This will allow you make API calls and use
        graphical interfaces for a fixed period of time. If you have previously provided a secret, it will be required
        here to authenticate login and hash the token.

      parameters:
        - name: secret
          in: query
          schema:
            $ref: '#/components/schemas/SecretKey'

      responses:
        '200':
          $ref: '#/components/responses/TokenResponse'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [Account]
      operationId: bathysphere.graph.functions.manage
      summary: Manage
      description: |

        Change e-mail address or password.

      requestBody:
        $ref: '#/components/requestBodies/Register'

      responses:
        '200':
          $ref: '#/components/responses/TokenResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /:

    get:
      tags: [Catalog]
      operationId: bathysphere.graph.functions.catalog
      summary: Catalog
      description: |
        Get all entity types in database as collections following the SpatioTemporal Asset Catalog specification

      parameters:

        - name: asset
          in: query
          schema:
            type: string
            default: index

        - name: extension
          description: |
            Any entity can be linked topologically to any other entity, but generally
            these are grouped in functional sets by application area:
            * `sensing` implements Open Geospatial Consortium SensorThings specification (part 1),
            and has models relevant to operating and getting data from sensor networks.
            * `tasking` builds off of the SensorThings specification part 2.
            * `mesh` implements structures for spatial simulations.

          in: query
          schema:
            type: string
            enum: [sensing, mesh, tasking, admin, catalog]

      responses:
        '200':
          description: Catalog
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'

  /{entity}:

    post:
      tags: [Catalog]
      operationId: bathysphere.graph.functions.create
      summary: Create
      description: |
        Create a new entity.
      parameters:
        - $ref: "#/components/parameters/entityClass"
      requestBody:
        $ref: '#/components/requestBodies/Entity'
      responses:
        '200':
          $ref: '#/components/responses/Entity'
        '400':
          $ref: '#/components/responses/BadRequest'

    get:
      tags: [Catalog]
      operationId: bathysphere.graph.functions.collection
      summary: Collection
      description: |
        Get all entities of one type

      parameters:
        - $ref: "#/components/parameters/entityClass"

      responses:
        '200':
          $ref: '#/components/responses/EntityCollection'
        '404':
          $ref: '#/components/responses/NotFound'


  /{entity}({uuid}):

    get:
      tags: [Catalog]
      operationId: bathysphere.graph.functions.metadata
      summary: Metadata
      description: |
        Get entity

      parameters:
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"

      responses:
        '200':
          $ref: '#/components/responses/Entity'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [ Catalog ]
      operationId: bathysphere.graph.functions.mutate
      summary: Update
      description: Update entity
      requestBody:
        $ref: '#/components/requestBodies/Entity'

      parameters:
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"

      responses:
        '200':
          $ref: '#/components/responses/Entity'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [ Catalog ]
      operationId: bathysphere.graph.functions.delete
      summary: Delete
      description: Delete entity and orphans recursively.
      parameters:
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"

      responses:
        '204':
          description: No content
        '404':
          $ref: '#/components/responses/NotFound'

        
  /{root}({rootId})/{entity}:

    get:
      tags: [ Topology ]
      operationId: bathysphere.graph.functions.query
      summary: Query
      description: |
        Get related entities

      parameters:
        - $ref: "#/components/parameters/root"
        - $ref: "#/components/parameters/rootId"
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/label"

      responses:
        '200':
          $ref: '#/components/responses/EntityCollection'
        '400':
          $ref: '#/components/responses/BadRequest'


  /{root}({rootId})/{entity}({uuid}):

    post:
      tags: [ Topology ]
      operationId: bathysphere.graph.functions.join
      summary: Join
      description: Create a labeled relationship between entities.
      parameters:
        - $ref: "#/components/parameters/root"
        - $ref: "#/components/parameters/rootId"
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"
        - $ref: "#/components/parameters/label"

      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'

    delete:
      tags: [Topology]
      operationId: bathysphere.graph.functions.drop
      summary: Drop
      description: |
        Remove a labeled relationship between entities. If no `label` is specified, remove all
        relationships between the entities.

      parameters:
        - $ref: "#/components/parameters/root"
        - $ref: "#/components/parameters/rootId"
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"
        - $ref: "#/components/parameters/label"

      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'


  /image:

    post:

      tags: [ Image ]
      summary: Render
      operationId: bathysphere.image.functions.render
      description: |
        Create PNG images from data sources and references and bathysphere_functions_cache it.
        The service call methods from the `matplotlib` library,
        which uses the anti-grain graphics backend (`AGG`). The images are portable network graphics (`.png`)
        by default, but `.pdf` and `.tiff` are available for print media.

      requestBody:

        description: | 
          Image request

        content:
          application/json:
            schema:

              type: object
              description: | 
                Image function request

              properties:

                labels:
                  type: object
                  nullable: true
                  properties:
                    x:
                      type: string
                      nullable: true
                    y:
                      type: string
                      nullable: true

                style:
                  type: object
                  nullable: true
                  description: |
                    Style is used change the appearance of the rendered image.

                  properties:

                    template:
                      type: string
                      enum: [dark, light]
                      default: dark
                      description: |
                        Select between light and dark templates depending on whether the image is intended for display
                        on a screen or for printed media.

                    bg:
                      type: string
                      default: black
                      description: |
                        Override the default background color for the chosen or default template. Dark themes have a `black`
                        background by default, and light themes have a `white` background. Use this to match the background
                        color when embedding in a web page. This can also be transparent for bathysphere_functions_image compositing.

                    contrast:
                      type: string
                      default: white
                      description: |
                        Contrast color for rendering over background.

                    flag:
                      type: string
                      default: red
                      description: |
                        Highlight color for marking selected or masked data.

                    label:
                      type: string
                      description: |
                        Color for text and labels. The default is the same as the `contrast` color.

                    dpi:
                      type: integer
                      default: 150
                      minimum: 90
                      maximum: 300
                      description: |
                        Image resolution. Be careful, `dpi=300` images can be very large.

                    format:
                      type: string
                      enum: [png, pdf, tiff]
                      default: png
                      description: |
                        Image file format. Only `png` is available through the API.

                    alpha:
                      type: number
                      format: float
                      default: 1.0
                      maximum: 1.0
                      minimum: 0.0
                      description: |
                        Transparency of drawn objects. Useful for rendering Monte Carlo simulations.

                    padding:
                      type: array
                      minLength: 4
                      maxLength: 4
                      items:
                        type: number
                        format: float
                      default: [0.1, 0.2, 0.05, 0.1]
                      description: |
                        Content padding from edges of bathysphere_functions_image to make room for labels and title.

                    marker:
                      type: integer
                      default: 1
                      description: |
                        Size of markers if rendering scatter plots or points on a map

                    font:
                      type: integer
                      default: 10
                      description: |
                        Font size

                    text:
                      type: number
                      format: float
                      default: 1.0
                      description: |
                        Size of labels relative to font size.

                    width:
                      type: number
                      format: float
                      default: 6.5
                      description: |
                        Width of bathysphere_functions_image in inches

                    height:
                      type: number
                      format: float
                      description: |
                        Height of bathysphere_functions_image in inches

                data:
                  title: data container
                  type: object
                  properties:
                    DataStreams:
                      type: array
                      items:
                    
                        title: asset
                        type: object
                        properties:
                          objectName:
                            type: string
                            nullable: true
                          objectKey:
                            type: string
                            nullable: true
                          args:
                            type: object
                            nullable: true

                    FeatureCollections:
                      type: array
                      items:
                        type: object
                        properties:
                          features:
                            type: array
                            items:
                              type: object
                              
                            


                    

                view:
                  type: string
                  description: The type of data view
                  enum: [spatial, series, coverage, frequency, scatter]

                extent:
                  title: extent
                  type: object
                  nullable: true
                  description: |

                    Spatiotemporal extent of a data `Collection`. Contains a 2 or 3-D `spatial` extent, and a `temporal`
                    interval.

                  properties:

                    spatial:
                      type: array
                      minLength: 4
                      maxLength: 6
                      nullable: true
                      items:
                        type: number
                        format: float

                    temporal:
                      type: string
                      nullable: true
                      description: ISO format timestamp interval

                    generic:
                      type: array
                      minLength: 4
                      maxLength: 4
                      nullable: true
                      items:
                        type: number
                        format: float

                args:
                  title: arguments
                  type: object
                  nullable: true

      responses:

        '202':
          description: Accepted

        '403':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  Error:
                    type: string
                    example: HMAC validation

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  Error:
                    type: string
                    example: Requires POST with payload

        '200':
          description: Image reference
          content:
            image/png:
              schema:
                type: string
                format: binary

            # application/json:
            #   schema:
            #     type: object
            #     properties:
            #       uuid:
            #         type: string
            #         format: uuid
            #       objectName:
            #         type: string
            #         example: example.png
            #       url:
            #         type: string
            #         format: uri
            #         example: https://data.oceanics.io/example.png



#   '/bivalve/':

#     post:
#       tags: [Bivalve]
#       summary: Configure
#       operationId: neritics_bivalve.functions.configure
#       description: |

#         Upload a model configuration that will be associated with you and your organization. The settings will later be
#         accessible by reference for starting further simulations with the same mathematical and computational
#         behavior. There may be some additional restrictions, depending on your organizational affiliation,
#         settings, and permissions.

#         Configurations are immutable after the first time they are run. This ensures that if there are simulation
#         results in the system from a previous run, the configuration is also likely to be there, except through
#         intentional deletions or database loss.

#       requestBody:
#         $ref: "#/components/requestBodies/Configuration"
#       responses:
#         '200':
#           $ref: '#/components/responses/Configuration'

#     get:
#       tags: [Bivalve]
#       summary: Get configurations
#       operationId: neritics_bivalve.functions.get_index
#       description: |
#         Get metadata for all model configurations.

#       responses:
#         '200':
#           $ref: '#/components/responses/ConfigurationCollection'

#   '/bivalve/{objectKey}':

#     get:
#       tags: [Bivalve]
#       summary: Get saved object by UUID
#       operationId: neritics_bivalve.functions.get_object
#       description: |
#         Retrieve details about a model configuration or simulation. This includes links to and summary statistics
#         of the individual simulations using these settings.

#       parameters:
#         - $ref: '#/components/parameters/ObjectKey'
#       responses:
#         '200':
#           $ref: '#/components/responses/Configuration'

#     post:
#       tags: [Bivalve]
#       summary: Run
#       description: |

#         The bivalve endpoint uses either constant conditions over a fixed period, or time-series data sources. Responses
#         are JSON structures. The application executes a synchronous kernel call for every location, and solves for
#         mass conservation and energy dynamics.

#         Posting with `configId` will use an existing configuration as a reference. Any supplied parameters will override
#         defaults, creating a derived copy of the simulation configuration if necessary.

#       operationId: neritics_bivalve.functions.run_batch
#       parameters:
#         - $ref: '#/components/parameters/ObjectKey'
#         - $ref: '#/components/parameters/species'
#         - $ref: '#/components/parameters/weight'

#       requestBody:
#         $ref: '#/components/requestBodies/Experiment'
#       responses:
#         '200':
#           $ref: '#/components/responses/Experiment'


#   /lstm/{cache}:

#     post:
#       tags: [ML]
#       operationId: goodbuoy_ml.create_keras_lstm
#       summary: Initialize model
#       description: |

#         Create and initialize a recurrent neural network with long short-term memory.

#       parameters:
#         - $ref: "#/components/parameters/Cache"

#       responses:
#         '200':
#           $ref: '#/components/responses/Message'

#   /lstm/{cache}/{object}:

#     put:
#       tags: [ML]
#       operationId: goodbuoy_ml.train_keras_lstm
#       summary: Train model
#       description: |

#         Feed training data to the neural network.

#       requestBody:
#         $ref: "#/components/requestBodies/TrainRequest"

#       parameters:
#         - $ref: "#/components/parameters/Cache"
#         - $ref: "#/components/parameters/ObjectKey"
#         - $ref: "#/components/parameters/Epochs"

#       responses:
#         '200':
#           $ref: '#/components/responses/Message'
#         '404':
#           $ref: '#/components/responses/NotFound'

#     get:
#       tags: [ ML ]
#       operationId: goodbuoy_ml.predict_keras_lstm
#       summary: Predict
#       description: |

#         Get a prediction from the neural network.

#       parameters:
#         - $ref: "#/components/parameters/Cache"
#         - $ref: "#/components/parameters/ObjectKey"

#       responses:
#         '200':
#           $ref: '#/components/responses/Prediction'
#         '404':
#           $ref: '#/components/responses/NotFound'

#     delete:
#       tags: [ ML ]
#       summary: Destroy model
#       description: |

#         Destroy the model state.

#       parameters:
#         - $ref: "#/components/parameters/Cache"
#         - $ref: "#/components/parameters/ObjectKey"

#       responses:
#         '200':
#           $ref: '#/components/responses/Message'
#         '404':
#           $ref: '#/components/responses/NotFound'

#   /kde/{cache}:

#     post:
#       tags: [ ML ]
#       # operationId: goodbuoy_ml.routes.points.create
#       summary: Create training points
#       description: |
#         Upload a collection of points for training a kernel density estimator

#       parameters:
#         - $ref: "#/components/parameters/Cache"

#       responses:
#         '200':
#           $ref: '#/components/responses/Message'

#   /kde/{cache}/{object}:

#     get:
#       tags: [ML]
#       operationId: goodbuoy_ml.routes.
#       summary: Predict
#       description: |

#         Get a prediction from the neural network.

#       parameters:
#         - $ref: "#/components/parameters/Cache"
#         - $ref: "#/components/parameters/ObjectKey"

#       responses:
#         '200':
#           $ref: '#/components/responses/Prediction'
#         '404':
#           $ref: '#/components/responses/NotFound'


#   /filter/smooth:

#     post:
#       tags: [Filter]
#       summary: Smooth
#       description: |

#         Smooth an evenly-spaced time series using convolution. The backend uses the `Numpy.convolve` method.
#         The result is a filtered time series, with a length that depends on the `convolutionMode` parameter. It is
#         the same length by default, but introduces artifacts at the boundaries.

#       operationId: neritics_filter.routes.smooth_convolve

#       parameters:
#         - $ref: '#/components/parameters/bandwidth'
#         - $ref: '#/components/parameters/convolutionMode'

#       requestBody:
#         $ref: '#/components/requestBodies/Series'

#       responses:
#         '200':
#           $ref: '#/components/responses/Filtered'
#         '400':
#           $ref: '#/components/responses/BadRequest'
#         '403':
#           $ref: '#/components/responses/Unauthorized'
#         '404':
#           $ref: '#/components/responses/NotFound'
#         '500':
#           $ref: '#/components/responses/ServerError'

#   /filter/fft:

#     post:
#       tags: [Filter]
#       summary: Bandpass
#       description: |

#         Filter an evenly-spaced time series using fast Fourier transform. The query string can include `lowpass` and
#         `highpass` thresholds. With both described, this acts as a bandpass filter. The `fill` option will
#         automatically forward-fill missing values to prevent anomalies.

#       operationId: neritics_filter.routes.fft

#       parameters:
#         - $ref: '#/components/parameters/dt'
#         - $ref: '#/components/parameters/lowpass'
#         - $ref: '#/components/parameters/highpass'
#         - $ref: '#/components/parameters/fill'
#         - $ref: '#/components/parameters/compress'

#       requestBody:
#         $ref: '#/components/requestBodies/Series'

#       responses:
#         '200':
#           $ref: '#/components/responses/Filtered'
#         '400':
#           $ref: '#/components/responses/BadRequest'
#         '403':
#           $ref: '#/components/responses/Unauthorized'
#         '404':
#           $ref: '#/components/responses/NotFound'
#         '500':
#           $ref: '#/components/responses/ServerError'

#   /filter/spectrum:

#     post:
#       tags: [Frequency]
#       summary: Spectrum
#       description: |

#         Generate a frequency spectrum for the provided signal. Must be evenly spaced. If there are missing values,
#         the `fill` flag will forward-fill before the transformation. The result can be compressed by remove negative
#         symmetry with the `compress` flag.

#       operationId: neritics_filter.routes.spectrum

#       parameters:
#         - $ref: '#/components/parameters/dt'
#         - $ref: '#/components/parameters/fill'
#         - $ref: '#/components/parameters/compress'

#       requestBody:
#         $ref: '#/components/requestBodies/Series'

#       responses:
#         '200':
#           $ref: '#/components/responses/Frequency'
#         '400':
#           $ref: '#/components/responses/BadRequest'
#         '403':
#           $ref: '#/components/responses/Unauthorized'
#         '404':
#           $ref: '#/components/responses/NotFound'
#         '500':
#           $ref: '#/components/responses/ServerError'

#   /filter/resample:

#     post:
#       tags: [Filter]
#       summary: Resample and interpolate
#       description: |

#         Resample a sparse time series at specified rate by either forward/back filling or linear interpolation.

#       operationId: neritics_filter.routes.resample_sparse_series

#       parameters:
#         - $ref: '#/components/parameters/observations'
#         - $ref: '#/components/parameters/start'
#         - $ref: '#/components/parameters/method'

#       requestBody:
#         $ref: '#/components/requestBodies/Series'

#       responses:
#         '200':
#           $ref: '#/components/responses/Filtered'
#         '400':
#           $ref: '#/components/responses/BadRequest'
#         '403':
#           $ref: '#/components/responses/Unauthorized'
#         '404':
#           $ref: '#/components/responses/NotFound'
#         '500':
#           $ref: '#/components/responses/ServerError'

#   /filter/outlier:

#     post:
#       tags: [Mask]
#       summary: Statistical outliers
#       description: |

#         Generate a boolean mask for the series. This can be for the independent variable, using the `dimension=simple`
#         query, or for time derivatives with `dimension=time`. True values in the response are masked, meaning these
#         indices can be deleted from in-memory time series.

#       operationId: neritics_filter.routes.outlier_handler

#       parameters:
#         - $ref: '#/components/parameters/threshold'
#         - $ref: '#/components/parameters/dimension'

#       requestBody:
#         $ref: '#/components/requestBodies/Series'

#       responses:
#         '200':
#           $ref: '#/components/responses/Mask'
#         '400':
#           $ref: '#/components/responses/BadRequest'
#         '403':
#           $ref: '#/components/responses/Unauthorized'
#         '404':
#           $ref: '#/components/responses/NotFound'
#         '500':
#           $ref: '#/components/responses/ServerError'

#   /filter/range:

#     post:
#       tags: [Mask]
#       summary: Out of range values
#       description: |

#         Generate a boolean mask for the series. True values are those outside the given range, can can be used to cull
#         data from the client application.

#       operationId: neritics_filter.routes.outlier_range

#       parameters:
#         - $ref: '#/components/parameters/max'
#         - $ref: '#/components/parameters/min'

#       requestBody:
#         $ref: '#/components/requestBodies/Series'

#       responses:
#         '200':
#           $ref: '#/components/responses/Mask'
#         '400':
#           $ref: '#/components/responses/BadRequest'
#         '403':
#           $ref: '#/components/responses/Unauthorized'
#         '404':
#           $ref: '#/components/responses/NotFound'
#         '500':
#           $ref: '#/components/responses/ServerError'



components:

  parameters:

    bandwidth:
      in: query
      name: bandwidth
      description: |
        Width of convolution filter signal in terms of existing sample points. This assumes that the signal
        discretization has even intervals, and no missing values.

      schema:
        type: integer
        default: 1

    lowpass:
      in: query
      name: lowpass
      description: High-frequency cutoff in Hz
      schema:
        type: number
        format: foat

    highpass:
      in: query
      name: highpass
      description: Low-frequency cutoff in Hz
      schema:
        type: number
        format: foat

    fill:
      in: query
      name: fill
      description: Forward fill missing values
      schema:
        type: boolean

    compress:
      in: query
      name: compress
      description: |

        Remove negative symmetry after transformation to frequency domain. The original or filtered signal can be
        reconstituted from the positive frequencies only. More efficient if performing many operations during signal
        processing, or saving frequency spectrum itself.

      schema:
        type: boolean
        default: true

    start:
      in: query
      name: start
      description: Datetime to apply as a start
      schema:
        type: string

    observations:
      in: query
      name: observations
      description: Total number of observations to produce
      schema:
        type: int

    method:
      in: query
      name: method
      description: Interpolation method
      schema:
        type: string
        enum:
          - forward
          - back
          - interp

    dimension:
      in: query
      name: dimension
      description: Filter by y-value or time derivative
      schema:
        type: string
        enum:
          - simple
          - time

    convolutionMode:
      in: query
      name: convolutionMode
      description: |

        Determines the length of the resulting series. Mode "full" returns points of overlap, with size (N+M-1).
        Boundary/edge effects will be retained. Mode "same" will have the same length as the input series. Mode "valid"
        returns points where signals overlap, and will eliminate edges effects, but will have a different size than the
        input series.

      schema:
        type: string
        default: same
        enum:
          - full
          - same
          - valid

    max:
      in: query
      name: max
      description: Maximum to mask out or clamp
      schema:
        type: number
        format: float

    min:
      in: query
      name: min
      description: Minmum to mask out or clamp
      schema:
        type: number
        format: foat

    threshold:
      in: query
      name: threshold
      description: Number of standard deviations in masking envelope
      schema:
        type: number
        format: foat


    Cache:
      name: cache
      in: path
      description: |

        Cache destination string, routed by the service. The `state` route indicates that the model state should
        be stored inside the application container, which will force the container to persist until destroyed.

      schema:
        type: string
        default: state
        enum: [state, redis]

    Socket:
      name: socket
      in: query
      description: |

        Open socket interactive/streaming mode. Not implemented.

      schema:
        type: bool
        default: false

    Epochs:
      name: epochs
      in: query
      description: |

        Number of training epochs.

      schema:
        type: integer
        minimum: 1
        maximum: 10

    HMAC:
      name: hmac
      description: |
        Hash-based message authentication code (HMAC) used to validate content and authenticity
        of requests.

      in: header
      schema:
        type: string
        example: "hmac=sd76sd0s98sdf09"

    collection:
      required: true
      name: collection
      in: path
      schema:
        type: string

    root:
      in: path
      required: true
      name: root
      description: |
        The class name of the root or parent entity that the request object is associated with. During a `GET` request
        this will be used to collect child entities based on graph relationship. For `PUT` and `POST` requests this
        and the child entities will be linked with a labeled relationship.

      schema:
        type: string

    rootId:
      in: path
      required: true
      name: rootId
      description: |
        Unique integer identifier of the parent entity.
      schema:
        type: integer

    entityClass:
      in: path
      required: true
      name: entity
      description: |
        Name of the entity model to create or fetch.

      schema:
        type: string
        enum:
          - Datastreams
          - Observations
          - HistoricalLocations
          - Locations
          - Sensors
          - Things
          - ObservedProperties
          - Tasks
          - Actuators
          - TaskingCapabilities
          - FeaturesOfInterest
          - Collections

    entityId:
      in: path
      required: true
      name: uuid
      description: |
        Unique identifier of the resource to be retrieved.
      schema:
        type: string


    label:
      in: query
      name: label
      description: |
        Should be in format `LABEL`, although this is not strictly necessary. Labeled relationships
        are used to crawl over the graph.
      schema:
        type: string


    ObjectKey:
      in: path
      name: objectKey
      required: true
      description: UUID of experiment data
      schema:
        type: string

    ThingId:
      in: path
      name: thingId
      required: true
      description: Unique identifier of the object to copy.
      schema:
        type: integer
        minimum: 0

    configId:
      in: query
      name: configId
      description: |
        A reference to a model configuration can be used instead of supplying values for `runs`, `workers`, `dt`, and
        `days`.
      schema:
        type: integer

    species:
      in: query
      name: species
      description: string identifier for culture species
      required: true
      schema:
        type: string
        default: oyster
        enum: [oyster, mussel, scallop]

    cultureType:
      in: query
      name: cultureType
      description: |
        String identifier for culture method. Midwater configurations reutilize pseudofaeces,
        while bottom culture prevents resuspension.
      required: true
      schema:
        type: string
        enum: [midwater, bottom, rope]

    ploidy:
      in: query
      name: ploidy
      description: |
        Shellfish are assumed to be reproductive, and therefore diploid. Future features will include phylogeography
        tools.

      schema:
        type: string
        enum: [diploid, triploid]
        default: diploid

    dryWeight:
      in: query
      name: dryWeight
      description: |
        Actual mass of organic material. Automatically calculated from fresh weight.
      schema:
        type: number
        format: float
        minimum: 0.0

    shellHeight:
      in: query
      name: shellHeight
      description: |
        Linear size measurement. Automatically calculated from fresh weight.
      schema:
        type: number
        format: float

    workers:
      in: query
      name: workers
      schema:
        $ref: "#/components/schemas/Workers"

    days:
      in: query
      name: days
      description: Length of simulation in days
      schema:
        $ref: "#/components/schemas/Days"

    runs:
      in: query
      name: runs
      schema:
        $ref: "#/components/schemas/Runs"

    dt:
      in: query
      name: dt
      description: Timestep, integer seconds
      schema:
        $ref: "#/components/schemas/dt"

    volume:
      in: query
      name: volume
      description: Control volume for density-dependence
      schema:
        $ref: "#/components/schemas/volume"

    weight:
      name: weight
      in: query
      required: true
      schema:
        $ref: "#/components/schemas/Weight"
    


  requestBodies:

    Register:
      description: |
        Request is e-mail and password, plus an optional secret key for encrypting password and data.
        Note that if you lose the secret key, you will lose access to data.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Register'

    Collection:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Collection'

    Entity:
      description: |
        Entity
      content:
        application/json:
          schema:
            type: object
            anyOf:  # change back to oneOf? needs discriminator
              - $ref: '#/components/schemas/Thing'
              - $ref: '#/components/schemas/Location'
              - $ref: '#/components/schemas/HistoricalLocation'
              - $ref: '#/components/schemas/Datastream'
              - $ref: '#/components/schemas/Observation'
              - $ref: '#/components/schemas/ObservedProperty'
              - $ref: '#/components/schemas/Sensor'
              - $ref: '#/components/schemas/FeatureOfInterest'
              - $ref: '#/components/schemas/Collection'

    CollectionUpdate:
      description: |
        Relabel or index an entity collection

      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CollectionOptions'

    Asset:
      description: |
        Tell the server where to find the data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Asset'

    TrainRequest:
      description: Training data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Datastream'

    CreateRequest:
      description: Initialization data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateSchema'

    Series:
      description: Time series to filter or convert
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Datastream'


    ConfigurationCollection:
      description: Configurations
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConfigurationCollection'

    Configuration:
      description: Model configuration
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Configuration'

    Experiment:
      description: Optional JSON object containing forcing information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RunSimulation'
        


  responses:

    Asset:
      description: |
        Description of the file
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Asset'

    Collection:
      description: |
        Description of the service and data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Collection'

    Entity:
      description: |
        Single entity
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/Thing'
              - $ref: '#/components/schemas/Location'
              - $ref: '#/components/schemas/HistoricalLocation'
              - $ref: '#/components/schemas/Datastream'
              - $ref: '#/components/schemas/Observation'
              - $ref: '#/components/schemas/ObservedProperty'
              - $ref: '#/components/schemas/Sensor'
              - $ref: '#/components/schemas/FeatureOfInterest'

    EntityCollection:
      description: |
        Collection of entities

      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EntityCollection'

    TokenResponse:
      description: Auth token
      content:
        application/json:
          schema:
            type: object
            properties:

              token:
                description: JWT Bearer token containing user ID
                type: string
                minLength: 127

              duration:
                type: integer
                description: JWT expiration interval in seconds
                default: 600
                minimum: 30
                maximum: 3600

    Message:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
         
    Prediction:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Datastream'
                
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Frequency:
      description: New time series
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FFT'

    Filtered:
      description: New time series
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Datastream'

    Mask:
      description: Mask of time series
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Mask'

    Unauthorized:
      description: Not authorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'


    ConfigurationCollection:
      description: Model configurations
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConfigurationCollection'

    Configuration:
      description: Model configuration
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Configuration'

    Experiment:
      description: Return simulations
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Experiment'
        

  schemas:


    Asset:
      type: object

    CollectionOptions:
      allOf:
        - $ref: '#/components/schemas/Collection'
        - type: object
          properties:

            label:
              $ref: '#/components/schemas/EntityLabel'

            indexBy:
              type: string
              default: id
              enum:
                - id
                - location
                - ts
              description: |
                Node attribute to create an index on.


    EntityLabel:
      type: string
      enum:
        - Proxy
        - Buoy
        - Server
        - Metadata
        - File
        - Raw
      description: |
        Additional node labels that can be applied to entities, which have internal meaning.

    Error:
      type: object
      properties:
        message:
          type: string
          description: Error message

    Message:
      type: object
      properties:
        message:
          type: string
          description: Status message

    Index:
      type: string
      description: Class name of entities to index.

    SecretKey:
      description: |
        Your secret key is used to encrypt traffic and private data, such as your login credentials. If you do not
        provide your own key, a default secret will be used. If you do provide a secret key, make sure to save it.
        It is not possible for us to recover data encrypted with a user secret.

      type: string

    Register:
      type: object
      properties:

        email:
          description: |
            Registration requires an e-mail that can be used to validate non-profit or educational affiliation.
          type: string

        password:
          description: |
            Password cannot be `password`, but there are no character limits otherwise.
            A compromised account will only expose your data and publicly available
            datasets. This is encrypted to prevent possible re-use across other services. Use a good random password.
          type: string
          minLength: 10
          maxLength: 128

        secret:
          $ref: '#/components/schemas/SecretKey'

    EntityCollection:
      allOf:
        - type: object
          properties:
            "@iot.count":
              type: integer
              minimum: 1
              maximum: 100
              description: Total number of records in the response

            value:
              type: array
              description: Array of response data
              items:
                oneOf:
                  - $ref: '#/components/schemas/Thing'
                  - $ref: '#/components/schemas/Location'
                  - $ref: '#/components/schemas/HistoricalLocation'
                  - $ref: '#/components/schemas/Datastream'
                  - $ref: '#/components/schemas/Observation'
                  - $ref: '#/components/schemas/ObservedProperty'
                  - $ref: '#/components/schemas/Sensor'
                  - $ref: '#/components/schemas/FeatureOfInterest'
        - $ref: '#/components/schemas/Collection'

    EntityClass:
      type: string
      enum:
        - Datastreams
        - FeaturesOfInterest
        - Locations
        - Observations
        - ObservedProperties
        - Sensors
        - Things
        - Collections
        - Actuators
        - TaskingCapabilities
        - Tasks

    Entity:
      type: object
      properties:

        id:
          type: integer
          readOnly: true
          description: |
            Unique integer identifier for entity. This usually auto-generated, but is different that the default node
            IDs within the Neo4j database, since those are not guarenteed to persist.

        name:
          type: string
          nullable: true
          description: |
            Human readable entity name for displaying data.

        description:
          type: string
          nullable: true
          description: |
            Short but useful explaination of what the entity is.

    FeatureOfInterest:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: |
            Features of interest are usually Locations

          properties:

            encodingType:
              type: string
              description: Identifier for parsing feature data

            feature:
              type: object
              description: Feature data

            Observations:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object

    Thing:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: |
            A thing is an object of the physical or information world that is capable of of being identified
            and integrated into communication networks.

          properties:

            entityClass:
              writeOnly: true
              enum: [thing]
              default: thing

            properties:
              type: object
              description: Key-value properties

            HistoricalLocations:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object

            Locations:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object

            Datastreams:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object


    LocationEncodingType:
      type: string
      enum: ["application/vnd.geo+json"]
      default: "application/vnd.geo+json"
      description: The encoding rendered in the location response

    Location:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: |
            Last known location of a thing. May be a feature of interest, unless remote sensing.

          properties:

            entityClass:
              writeOnly: true
              enum: [location]
              default: location

            encodingType:
              $ref: '#/components/schemas/LocationEncodingType'

            location:
              type: object
              properties:
                type:
                  type: string
                  default: "Point"
                  enum: ["Point"]
                coordinates:
                  type: array
                  minLength: 2
                  maxLength: 3
                  items:
                    type: number
                    format: float


            HistoricalLocations:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object


            Things:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object

    HistoricalLocation:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:

            entityClass:
              writeOnly: true
              enum: [historicalLocation]
              default: historicalLocation

            encodingType:
              $ref: '#/components/schemas/LocationEncodingType'

            time:
              type: string
              format: date-time
              description: Timestamp when the location was current

            Things:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  minItems: 1
                  maxItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  minItems: 1
                  maxItems: 1
                  items:
                    type: object

            Locations:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  minItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  minItems: 1
                  items:
                    type: object

    Sensor:

      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:

            entityClass:
              writeOnly: true
              type: string
              enum: [sensor]
              default: sensor

            encodingType:
              type: string
              enum: [application/pdf, "http://www.opengis.net/doc/IS/SensorML/2.0"]
              default: "http://www.opengis.net/doc/IS/SensorML/2.0"

            metadata:
              type: object

            Datastreams:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object

    Datastream:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: |

            Datastreams are collections of `Observations` from the same `Sensor`.

          properties:

            entityClass:
              writeOnly: true
              type: string
              enum: [datastream]
              default: datastream

            unitOfMeasurement:
              type: object
              description: |
                Unified Code for Unit of Measure

              properties:
                name:
                  type: string
                  description: Name for matching and displaying

                symbol:
                  type: string
                  nullable: true
                  description: Abbreviation for the parameter

                definition:
                  type: string
                  nullable: true
                  description: A link to a formal definition

            observationType:
              type: string
              description: |
                Data model of child `Observations`. Usually a `Measurement`.

              nullable: true
              enum:
                - "OM_CategoryObservation"
                - "OM_CountObservation"
                - "OM_Measurement"
                - "OM_Observation"
                - "OM_TruthObservation"

            observedArea:
              type: object
              nullable: true
              readOnly: true
              description: |
                The bounding box that encloses all `FeaturesOfInterest` referenced by child `Observations`

            phenomenonTime:
              type: array
              description: |
                Time interval of the measured process, consisting of two ISO8601 timestamps.
              minItems: 2
              maxItems: 2
              items:
                type: string
                format: date-time

            resultTime:
              type: array
              description: |
                Time interval of receiving data, consisting of two ISO8601 timestamps. May be different than the
                measured process, due to batch uploads, latency, lack of real-time clocks in devices, etc.
              minItems: 2
              maxItems: 2
              items:
                type: string
                format: date-time

            table:
              type: string
              description: |
                Time series observations associated with a datastream can be stored in the TimescaleDB.
                TimescaleDB is an extension of Postgres+Postgis, and this is SQL table reference to find and
                retrieve data.


            Observations:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  items:
                    type: string

                - type: array
                  title: objects
                  items:
                    type: object

            ObservedProperties:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  minItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  minItems: 1
                  items:
                    type: object

            Sensors:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  minItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  minItems: 1
                  items:
                    type: object

            Things:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  minItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  minItems: 1
                  items:
                    type: object


    Observation:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:

            resultTime:
              type: string
              format: date-time
              description: |
                Timestamp when the `Observation` was registered by the system.

            resultQuality:
              type: string
              description: |
                Quality of the result described as a `DQ_Element` (OGC)

            validTime:
              type: array
              description: Time interval when the result is valid
              minItems: 2
              maxItems: 2
              items:
                type: string
                format: date-time

            phenomenonTime:
              type: string
              format: date-time
              description: |
                Timestamp of the acquisition of the `Observation`

            result:
              description: The result of the observation. Usually a number.
              type: number
              format: float

            parameters:
              type: object
              description: Environmental conditions during the `Observation`

            Datastreams:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  maxItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  maxItems: 1
                  items:
                    type: object

            FeaturesOfInterest:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  maxItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  maxItems: 1
                  items:
                    type: object

    ObservedProperty:

      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            definition:
              type: string
              nullable: true
              description: Reference to resource that defines the property. We default to trying Wikipedia.

            Datastreams:
              readOnly: true
              oneOf:

                - type: array
                  title: references
                  maxItems: 1
                  items:
                    type: string

                - type: array
                  title: objects
                  maxItems: 1
                  items:
                    type: object

    Collection:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: |
            SpatioTemporal Asset Catalog object-linking collection object. Collections are generic, while some
            SensorThings entities are special Collections. For instance, a `Datastream` is a collection of
            `Observations`.

          properties:

            extent:
              $ref: '#/components/schemas/Extent'

    Extent:
      title: extent
      type: object
      readOnly: true
      nullable: true
      description: |

        Spatiotemporal extent of a data `Collection`. Contains a 2 or 3-D `spatial` extent, and a `temporal`
        interval.

      properties:

        spatial:
          type: array
          minLength: 4
          maxLength: 6
          items:
            type: number
            format: float

        temporal:
          type: string
          description: ISO format timestamp interval


    Provider:
      title: dataProvider
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: |
            Data providers are organizations or individuals that produce, process, host, or license data.

          properties:

            url:
              type: string
              description: URL to organization website

            roles:
              type: array
              description: |
                Data providers are labeled with a role, so that attribution and redaction works properly on synthesized
                datasets. Data in the system m
              items:
                title: providerRole
                type: string
                enum:
                  - licensor
                  - producer
                  - processor
                  - host

    CreateSchema:
      type: object

    Time:
      type: number

    Value:
      type: number

    Periods:
      type: integer
      minimum: 1
      maximum: 1000
      default: 1000

    Horizon:
      description: |
        Sequence length the LSTM is trained on for each output point
      type: integer
      minimum: 1
      maximum: 4
      default: 1

    Window:
      description: |
        Number of observations in moving window for calculating the expected value from input datastream.

      type: integer
      minimum: 1
      default: 2

    Ratio:
      description: |
        Fraction of observations to use for training. The rest are left for validation.
      type: number
      format: float
      default: 0.8

  

    FFT:
      description: Array of time step responses
      type: array
      items:
        - $ref: '#/components/schemas/transformItem'

    transformItem:
      type: object
      properties:
        frequency:
          type: number
          format: float
          minimum: 0.0
        index:
          type: number
          format: float

    Mask:
      description: Array of boolean values
      type: array
      items:
        - $ref: '#/components/schemas/MaskItem'

    MaskItem:
      description: Value of single mask item
      type: boolean


    Temperature:
      description: |
        Temperature, degrees Celsius, controls vital rates.
      type: number
      format: float
      minimum: 0
      maximum: 40
  

    Weight:
      description: |
        The total fresh product weight in grams. There are other conversions depending on your application case.
        Biogeochemical modelers are likely more interested in carbon and nutrient masses. This will apply best
        to products sold by weight like mussels.

      type: number
      format: float
      minimum: 0.0


    ConfigurationCollection:
      title: modelConfigurations
      allOf:
        - type: object
          properties:

            "@iot.count":
              type: integer
              minimum: 0
              maximum: 100
              description: Total number of records in the response

            value:
              type: array
              items:
                $ref: '#/components/schemas/Configuration'

    Configuration:
      type: object
      properties:

        metadata:
          $ref: "#/components/schemas/Collection"

        properties:
          type: object
          description: |
            Reproducibility is central to heuristic systems. When you configure a simulation, it will persist
            indefinitely. After the first production run it will be frozen. Future derived versions will be connected
            to preserve model provenance and intent.

          properties:

            workers:
              $ref: "#/components/schemas/Workers"

            runs:
              $ref: "#/components/schemas/Runs"

            dt:
              $ref: "#/components/schemas/dt"

            days:
             $ref: "#/components/schemas/Days"

            integration:
              $ref: '#/components/schemas/integration'

            locked:
              readOnly: true
              type: boolean
              default: false
              description: The model configuration is in production and has been locked.

            backend:
              description: |
                There are several options for biological prediction. Your choice of backend will be based on your licenses
                and appetite for risk:
                * `shellsim` is available if you have licensed `ShellSIM` from Plymouth Marine Laboratory
                * `empirical` uses multiple linear regression and field data to drive growth predictions
                * `tensorflow` uses a recurrent neural network trained on multiple data sources and models
              type: string
              enum: [shellsim, empirical, tensorflow]
              default: shellsim

            derivedFrom:
              readOnly: true
              description: |
                When new configurations are created as copies of existing instances, they will be linked with a
                directional `DERIVED_FROM` relationship (in `neo4j` graph parlance). This is a URL to access information
                about it.

              type: string

        experiments:
          description: Collection of multi-simulation experiments produced by this model configuration
          type: array
          readOnly: true
          nullable: true
          items:
            $ref: '#/components/schemas/Experiment'


    Experiment:
      title: experiment
      oneOf:
        - $ref: '#/components/schemas/Series'
        - $ref: '#/components/schemas/Streaming'

    Series:
      title: time series
      allOf:
        - $ref: "#/components/schemas/Collection"
        - description: Collection of `Datastreams`
          type: object
          properties:
            location:
              $ref: "#/components/schemas/Location"
            datastreams:
              type: array
              items:
                $ref: "#/components/schemas/Datastream"

    Streaming:
      title: streaming
      allOf:
        - $ref: "#/components/schemas/Collection"
        - description: Array of time step responses
          type: object
          properties:
            location:
              $ref: "#/components/schemas/Location"
            stream:
              type: array
              items:
                $ref: '#/components/schemas/Response'

    Response:
      title: rowResponse
      type: object
      required:
        - time
        - weight
      properties:

        time:
          description: |
            Time in days. While computational time steps are usually hourly or shorter, the interval of interest
            for aqaculturists is measured in days. The internal clock uses integers to prevent numerical problems
            in long running simulations, but this is translated to decimal hours for calculating physiological rates.

          type: number
          format: float
          minimum: 0.0

        weight:
          $ref: "#/components/schemas/Weight"

        oxygenUptake:
          nullable: true
          description: |
            Cummulative oxygen uptake. Metabolism removes oxygen from the water column. If aeration does not exceed
            the rate of biological uptake (plus other processes), the water body will become hypoxic or anoxic.

          type: number
          format: float
          minimum: 0.0

        chlorophyllUptake:
          nullable: true
          description: |
            Filter feeding removes phytoplankton from the water column. Chlorophyll is a proxy for the productivity
            of the water body. When there are too many shellfish in a semi-closed system, they can deplete available
            food for conspecifics.

          type: number
          format: float
          minimum: 0.0

        nitrogenUptake:
          nullable: true
          description: |
            Filter feeding moves nitrogen from the environment into tissue.
          type: number
          format: float
          minimum: 0.0

        nitrogenExcretion:
          nullable: true
          description: |
            Shellfish excrete nitrogen through membrane transfer.

          type: number
          format: float
          minimum: 0.0

        ammoniaLoss:
          nullable: true
          description: |
            Ammonia is released to the environment as waste. This can stimulate the growth of plankton.

          type: number
          format: float
          minimum: 0.0

        deposition:
          nullable: true
          description: |
            Shellfish are widely considered beneficial to
            water quality. However, they can concentrate biological material into feces and psuedofeces. These
            particulate forms sink more quickly, and may settle in mats either under the culture area, or downstream.
            Decomposition can lead to sediment and bottom water hypoxia.
          type: number
          format: float
          minimum: 0.0


    RunSimulation:
      allOf:
        - $ref: "#/components/schemas/Collection"
        - type: object
          properties:
            location:
              $ref: "#/components/schemas/Location"
            forcing:
              $ref: "#/components/schemas/Forcing"

    Forcing:
      title: forcingParameters
      description: Constant or time-varying forcing conditions for the model execution.
      type: object
      nullable: true
      properties:

        temperature:
          description: |
            Temperature, degrees Celsius, controls vital rates.
          type: number
          format: float
          minimum: 0.0
          maximum: 40.0

        turbidity:
          description: |
            Turbidity helps determine the amount of food available to shellfish.

          type: number
          format: float
          minimum: 0.0
          maximum: 1

        chlorophyll:
          description: Chlorophyll-a concentration (ug/L) is a proxy for food availability.
          type: number
          format: float
          minimum: 0.0

        salinity:
          description: Salinity, PSU
          type: number
          format: float
          minimum: 0
          maximum: 40

        current:
          description: Current speed, cm/s
          type: number
          format: float
          minimum: 0
          maximum: 100

        particulatOrganicMatter:
          description: Particulate Organic Matter (mg/L), or POM, is used as an additional food source.
          type: number
          format: float
          minimum: 0

        totalParticulateMatter:
          description: TPM/SPM, mg/L
          type: number
          format: float
          minimum: 0

        particulateOrganicCarbon:
          description: Particulate organic carbon, POC, ug/L
          type: number
          format: float
          minimum: 0

        oxygen:
          description: Dissolved oxygen concentration (mg/L) acts as a limitation on metabolism.
          type: number
          format: float
          minimum: 0

        seed:
          description: Number of seed added during the first time step.
          type: integer
          minimum: 1
          default: 1

    Workers:
      description: Number of processes to use for Monte Carlo simulations.
      type: integer
      minimum: 1
      maximum: 8
      default: 1

    Days:
      description: |
        Length of simulation in days. For most simulations of growing commercial conditions, any growing window over
        ~2 years is not ideal. Rather than running for a fixed period, a termination trigger can be specified. To
        prevent infinite loops, the simulation will end automatically after a few minutes.

      nullable: true
      type: integer
      minimum: 1
      maximum: 730
      default: 365

    Runs:
      description: Number of Monte Carlo replications to run.
      type: integer
      minimum: 1
      maximum: 512
      default: 1

    integration:
      description: |
        Integration is by Euler (`euler`) or Runge-Kutta 4th order (`rungeKutta`). If `backend=shellsim`, then this will
        default to `euler`, because the C# kernel is written that way.
      type: string
      enum: [euler, rungeKutta]
      default: euler

    dt:
      description: |
        Timestep, integer seconds. A one minute time step is probably unnecessary, unless you are validating/comparing
        a laboratory physiology study. Longer time steps may miss important tidal dynamics. One hour is the recommended
        value, which is also a common sampling frequency for sensors deplyed near growing areas (and therefore limits
        interpolation). Integration is by Euler (`euler`) or Runga-Kutta (`rk`).

      type: integer
      minimum: 60
      maximum: 3600
      default: 3600

    volume:
      description: |
        Control volume for density-dependence, measure in liters. As the number of organisms per unit volume increases,
        competition for limited resources like food or oxygen can come into play.

      type: number
      format: float
      minimum: 1
      maximum: 1000
