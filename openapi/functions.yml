openapi: "3.0.0"

info:

  title: "Functions API"
  version: "1.0"
  description: |

    The functions exposes OpenFaaS endpoints. These are used internally by Bathysphere for asynchronous
    task execution, and access to external data sources. Direct access can be provided by request.
    See the [repository](https://bitbucket.org/aquaculture/bathysphere) for more information.

  contact:
    name: Oceanicsdotio
    url: http://www.oceanics.io
    email: business@oceanics.io

  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

  x-logo:
    url: bathysphere.png

tags:
  - name: Admin
  - name: Analysis
  - name: IoT
  - name: Storage

servers:
- url: https://graph.oceanics.io/function
  description: Synchronous endpoint
- url: https://graph.oceanics.io/async-function
  description: Asynchronous endpoint

paths:

  /archive:

    post:
      tags: [ Admin ]
      summary: Archive
      description: Index an external data or storage system

    responses:
        '200': Success

  /buoys:

    post:
      tags: [ IoT ]
      summary: Buoys
      description: Access third-party buoy data

      parameters:
        - $ref: "#/components/parameters/HMAC"

      requestBody:

        description: Buoy data
        content:
          application/json:
            schema:
              type: object
              description: Buoys function request
              properties:
                interval:
                  type: array
                  minItems: 2
                  maxItems: 2
                  items:
                    type: string
                    format: date-time
                limit:
                  type: integer
                  description: |
                    Number of records to retrieve, from today or the end of `interval`.
                encoding:
                  type: string
                  description: Return data as CSV text or as JSON
                  enum: [ txt, json ]
                  default: txt
                id:
                  type: integer
                  description: The identity of the buoy, known to the external server
                observedProperties:
                  type: array
                  minItems: 1
                  items:
                    type: string

    responses:
        '202':
          description: Async response

        '200':
          description: Buoy data
          content:
            application/json:
              schema:
                type: object
                description: Buoys data
                properties:
                  name:
                    type: string
                  aliases:
                    type: array
                    items:
                      type: string
                  values:
                    type: array
                    items:
                      type: object

  /cache:

    post:
      tags: [ Storage ]
      summary: Cache
      description: Redis integration

  /controller:

    post:
      tags: [ IoT ]
      summary: Controller
      description: Deploy control loops

  /image:

    post:

      tags: [ Analysis ]
      summary: Image
      description: |
        Create PNG images from data sources and references and cache it.
        The service call methods from the `matplotlib` library,
        which uses the anti-grain graphics backend (`AGG`). The images are portable network graphics (`.png`)
        by default, but `.pdf` and `.tiff` are available for print media.

      parameters:
        - $ref: "#/components/parameters/HMAC"

      requestBody:

        description: Image request
        content:
          application/json:
            schema:
              type: object
              description: Buoys function request
              properties:
                labels:
                  type: object
                  nullable: true
                  properties:
                    x:
                      type: string
                      nullable: true
                    y:
                      type: string
                      nullable: true

                style:
                  type: object
                  nullable: true
                  description: |
                    Style is used change the appearance of the rendered image.

                  properties:

                    template:
                      type: string
                      enum: [dark, light]
                      default: dark
                      description: |
                        Select between light and dark templates depending on whether the image is intended for display
                        on a screen or for printed media.

                    bg:
                      type: string
                      default: black
                      description: |
                        Override the default background color for the chosen or default template. Dark themes have a `black`
                        background by default, and light themes have a `white` background. Use this to match the background
                        color when embedding in a web page. This can also be transparent for image compositing.

                    contrast:
                      type: string
                      default: white
                      description: |
                        Contrast color for rendering over background.

                    flag:
                      type: string
                      default: red
                      description: |
                        Highlight color for marking selected or masked data.

                    label:
                      type: string
                      description: |
                        Color for text and labels. The default is the same as the `contrast` color.

                    dpi:
                      type: integer
                      default: 150
                      minimum: 90
                      maximum: 300
                      description: |
                        Image resolution. Be careful, `dpi=300` images can be very large.

                    format:
                      type: string
                      enum: [png, pdf, tiff]
                      default: png
                      description: |
                        Image file format. Only `png` is available through the API.

                    alpha:
                      type: number
                      format: float
                      default: 1.0
                      maximum: 1.0
                      minimum: 0.0
                      description: |
                        Transparency of drawn objects. Useful for rendering Monte Carlo simulations.

                    padding:
                      type: array
                      minLength: 4
                      maxLength: 4
                      items:
                        type: number
                        format: float
                      default: [0.1, 0.2, 0.05, 0.1]
                      description: |
                        Content padding from edges of image to make room for labels and title.

                    marker:
                      type: integer
                      default: 1
                      description: |
                        Size of markers if rendering scatter plots or points on a map

                    font:
                      type: integer
                      default: 10
                      description: |
                        Font size

                    text:
                      type: number
                      format: float
                      default: 1.0
                      description: |
                        Size of labels relative to font size.

                    width:
                      type: number
                      format: float
                      default: 6.5
                      description: |
                        Width of image in inches

                    height:
                      type: number
                      format: float
                      description: |
                        Height of image in inches

                data:
                  title: data container
                  type: object

                view:
                  type: string
                  description: The type of data view
                  enum: [series, coverage, frequency, scatter]

                extent:
                  title: extent
                  type: object
                  readOnly: true
                  nullable: true
                  description: |

                    Spatiotemporal extent of a data `Collection`. Contains a 2 or 3-D `spatial` extent, and a `temporal`
                    interval.

                  properties:

                    spatial:
                      type: array
                      minLength: 4
                      maxLength: 6
                      items:
                        type: number
                        format: float

                    temporal:
                      type: string
                      description: ISO format timestamp interval
                args:
                  title: arguments
                  type: object
                  nullable: true

      responses:

        '202':
          description: Accepted

        '403':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  Error:
                    type: string
                    example: HMAC validation

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  Error:
                    type: string
                    example: Requires POST with payload

        '200':
          description: Image reference
          content:
            application/json:
              schema:
                type: object
                properties:
                  uui:
                    type: string
                    format: uuid
                  objectName:
                    type: string
                    example: example.png
                  url:
                    type: string
                    format: uri
                    example: https://data.oceanics.io/example.png

  /notify:

    post:
      tags: [ Admin ]
      summary: Notify
      description: Send notification by e-mail or Slack

  /parse:

    post:
      tags: [ Analysis ]
      summary: Parse
      description: Heuristic XML/JSON parser

  /postgres:

    post:
      tags: [ Storage ]
      summary: Postgres
      description: Postgres and PostGIS integration

      requestBody:
        description: Unauthorized
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  nullable: true
                  description: Data to ingest

                encoding:
                  type: string
                  enum: [ json, txt ]
                  default: json
                  description: Encoding of result

                streaming:
                  type: boolean
                  description: Stream the records
                  default: false
                table:
                  type: string
                fields:
                  type: array
                  items:
                    type: string
                limit:
                  type: integer
                  default: 100
                order:
                  type: string
                  default: DESC
                conditions:
                  type: array
                  items:
                    type: str




      responses:

        '202':
          description: Accepted

        '200':
          description: Records
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  description: Parsed data record

        '403':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  Error:
                    type: string
                    example: HMAC validation

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  Error:
                    type: string
                    example: Requires POST with payload

  /repository:

    post:
      tags: [ Storage ]
      summary: Repository
      description: S3 object storage integration

components:

  parameters:
    HMAC:
      name: hmac
      description: |
        Hash-based message authentication code (HMAC) used to validate content and authenticity
        of requests.

      in: header
      type: string
      example: "hmac=sd76sd0s98sdf09"
