openapi: "3.0.0"

info:
  title: "Functions API"
  version: "1.0"
  description: |

    The functions exposes OpenFaaS endpoints. These are used internally by Bathysphere for asynchronous
    task execution, and access to external data sources. Direct access can be provided by request.
    See the [repository](https://bitbucket.org/aquaculture/bathysphere) for more information.

  contact:
    name: Oceanicsdotio
    url: http://www.oceanics.io
    email: business@oceanics.io

  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

  x-logo:
    url: bathysphere.png

#x-tagGroups:
#  - name: Storage
#    tags: [ Postgres, Repository, Cache ]
#  - name: IoT
#    tags: [ Buoys, Controller ]
#  - name: Admin
#    tags: [ Archive, Notify ]
#  - name: Analysis
#    tags: [ Image, Parse ]

tags:
  - name: Archive
  - name: Buoys
  - name: Cache
  - name: Controller
  - name: Image
  - name: Notify
  - name: Parse
  - name: Postgres
  - name: Repository

servers:

- url: https://graph.oceanics.io/function
  description: Synchronous endpoint

- url: https://graph.oceanics.io/async-function
  description: Asynchronous endpoint


paths:

  /archive:

    post:
      tags: [ Archive ]
      summary: Data ingestion
      description: Index an external data or storage system


  /buoys:

    post:
      tags: [ Buoys ]
      summary: Buoy data
      description: Access third-party buoy data
      headers:
        hmac:
          description: |
            HMAC header
          schema:
            type: str

  /cache:

    post:
      tags: [ Cache ]
      summary: Cache data
      description: Redis integration

  /controller:

    post:
      tags: [ Controller ]
      summary: Control system
      description: Deploy control loops

  /image:

  /image/series:

    post:

      tags: [ Image ]
      summary: Data view
      description: |
        Create PNG images from data sources and references and cache it.
        The service call methods from the `matplotlib` library,
        which uses the anti-grain graphics backend (`AGG`). The images are portable network graphics (`.png`)
        by default, but `.pdf` and `.tiff` are available for print media.

      parameters:

        - name: view
          in: query
          description: |
            How to transform and render the data
          schema:
            type: string
            enum: [series, coverage, frequency, scatter]
            default: scatter

      requestBody:
        $ref: "#/components/requestBodies/Datastreams"

      responses:
        '200':
          description: Image Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  link:
                    type: string
                  objectKey:
                    type: string
        '404':
          $ref: '#/components/responses/NotFound'

  /notify:

    post:
      tags: [ Notify ]
      summary: Send notification
      description: Send notification by e-mail or Slack

  /parse:

    post:
      tags: [ Parse ]
      summary: Parse data
      description: Heuristic XML/JSON parser

  /postgres:

    post:
      tags: [ Postgres ]
      summary: SQL support
      description: Postgres and PostGIS integration

  /repository:

    post:
      tags: [ Repository ]
      summary: Object storage
      description: S3 object storage integration

components:

  schemas:

    SatlanticThing:
      allOf:
      - $ref: "https://graph.oceanics.io/api.yml#/components/schemas/Thing"
      - type: object
        properties:
          externalId:
            description: External identifier
            type: integer
            format: int32
            minimum: 1

    Schedule:
      type: object
      properties:
        scheduleCreationProgram:
          type: string
        scheduleCreationOperator:
          type: string
        scheduleCreationTime:
          type: string
          format: date-time

        storxSettings:
          type: object
          properties:
            type:
              type: string
              default: "STOR-X"

            operatingCurrent:
              type: string
              default: 50(mA)

            peakOperatingCurrent:
              type: string
              default: 50(mA)

            cleanUpTime:
              type: string
              default: 0(min)

        emailSettings:
          type: object

    SensorConfig:
      type: object

    Events:
      type: array
      items:
        type: object
        properties:

          comparison:
            type: string
            default: 'eq'
          action:
            type: string
          contact:
            type: string

    SatlanticSensor:
      allOf:
        - $ref: "https://graph.oceanics.io/api.yml#/components/schemas/Sensor"
        - type: object
          properties:
            name:
              type: string
            sn:
              type: string


    FTPSettings:
      server:
        description: FTP_SERVER
        type: string
      port:
        description: FTP_PORT
        type: integer
      user:
        description: FTP_USER
        type: string
      password:
        description: FTP_PASSWORD
        type: string
        format: password

    Auth:
      type: object
      properties:
        user:
          description: AUTHUSER
          type: string
        password:
          description: AUTHPW
          type: string
          format: password

    ScheduleConfig:
      type: object
      properties:
        port:
          description: SCHED_PORT
          type: integer
          default: 80
        path:
          description: PATHNAME
          type: string
          default: "/schedule"

    EmailConfig:
      type: object
      properties:
        domainNameServers:
          description: DOM_NAM_SERV1, DOM_NAM_SERV2
          type: array
          maxItems: 2
          items:
            type: string

        helo:
          description: HELO
          type: string
          default: "storx.storxmodem.com"

        server:
          description: SERVER
          type: string
          default: "23.92.25.145"

        webaddress:
          description: WEBADDRESS
          type: string
          default: "23.92.25.145"

        ip:
          description: IPVAL
          type: string
          default: "0.0.0.0"

        port:
          description: PORT
          type: integer
          default: 25

        from:
          description: STORXEMAIL
          type: string
          default: "storx.xxx@storxmodem.com"

        to:
          description: EMAIL
          type: string
          default: "lobodata@server.loboviz.com"

        user:
          description: USERID
          type: string
          default: ""

        password:
          description: PASSWD
          type: string
          format: password
          default: ""

        headercom:
          description: HEADERCOM
          type: integer
          default: 0

        datacom:
          description: DATACOM
          type: integer
          default: 0

        apn:
          description: APN
          type: string
          default: BROADBAND

    Style:
      type: object
      description: |
        Style is used change the appearance of the rendered image.

      properties:

        template:
          type: string
          enum: [dark, light]
          default: dark
          description: |
            Select between light and dark templates depending on whether the image is intended for display
            on a screen or for printed media.

        bg:
          type: string
          default: black
          description: |
            Override the default background color for the chosen or default template. Dark themes have a `black`
            background by default, and light themes have a `white` background. Use this to match the background
            color when embedding in a web page. This can also be transparent for image compositing.

        contrast:
          type: string
          default: white
          description: |
            Contrast color for rendering over background.

        flag:
          type: string
          default: red
          description: |
            Highlight color for marking selected or masked data.

        label:
          type: string
          description: |
            Color for text and labels. The default is the same as the `contrast` color.

        dpi:
          type: integer
          default: 150
          minimum: 90
          maximum: 300
          description: |
            Image resolution. Be careful, `dpi=300` images can be very large.

        format:
          type: string
          enum: [png, pdf, tiff]
          default: png
          description: |
            Image file format. Only `png` is available through the API.

        alpha:
          type: number
          format: float
          default: 1.0
          maximum: 1.0
          minimum: 0.0
          description: |
            Transparency of drawn objects. Useful for rendering Monte Carlo simulations.

        padding:
          type: array
          minLength: 4
          maxLength: 4
          items:
            type: number
            format: float
          default: [0.1, 0.2, 0.05, 0.1]
          description: |
            Content padding from edges of image to make room for labels and title.

        marker:
          type: integer
          default: 1
          description: |
            Size of markers if rendering scatter plots or points on a map

        font:
          type: integer
          default: 10
          description: |
            Font size

        text:
          type: number
          format: float
          default: 1.0
          description: |
            Size of labels relative to font size.

        width:
          type: number
          format: float
          default: 6.5
          description: |
            Width of image in inches

        height:
          type: number
          format: float
          description: |
            Height of image in inches


    Datastreams:
      type: object
      properties:
        datastream:
          type: array
          items:
            $ref: '#/components/schemas/Observation'
        extent:
          $ref: '#/components/schemas/Extent'
        style:
          $ref: '#/components/schemas/Style'

    Reference:
      type: object
      properties:
        extent:
          $ref: '#/components/schemas/Extent'
        style:
          $ref: '#/components/schemas/Style'

#    Observation:
#      oneOf:
#      - type: object
#        properties:
#          time:
#            type: number
#          value:
#            type: number
#      - type: array
#        minLength: 2
#        items:
#          type: number
#          format: float

